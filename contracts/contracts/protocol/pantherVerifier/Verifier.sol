// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.16;

import { SnarkProof, VerifyingKey } from "../../common/Types.sol";
import "../crypto/EllipticCurveMath.sol";

/// @dev This is slightly modified code generated by the `snarkjs` lib (v.0.6.9).
abstract contract Verifier is EllipticCurveMath {
    /// @return isVerified bool true if proof is valid
    function verify(
        uint160 circuitId,
        uint256[] memory input,
        SnarkProof memory proof
    ) public view returns (bool isVerified) {
        VerifyingKey memory vk = loadVerifyingKey(circuitId);
        require(input.length + 1 == vk.ic.length, "verifier-bad-input");

        // Compute the linear combination vk_x
        G1Point memory vk_x = G1Point(0, 0);
        for (uint256 i = 0; i < input.length; i++) {
            require(
                input[i] < snark_scalar_field,
                "verifier-gte-snark-scalar-field"
            );
            vk_x = addition(vk_x, scalar_mul(vk.ic[i + 1], input[i]));
        }
        vk_x = addition(vk_x, vk.ic[0]);

        isVerified = pairingProd4(
            negate(proof.a),
            proof.b,
            vk.alfa1,
            vk.beta2,
            vk_x,
            vk.gamma2,
            proof.c,
            vk.delta2
        );
    }

    function loadVerifyingKey(uint160 circuitId)
        internal
        view
        virtual
        returns (VerifyingKey memory);
}
