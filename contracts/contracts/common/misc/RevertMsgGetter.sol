// SPDX-License-Identifier: BUSL-1.1
// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar
pragma solidity ^0.8.16;

abstract contract RevertMsgGetter {
    // TODO: check if it may be simplified to `revert(add(result, 32), mload(result))`
    // Approach borrowed from https://ethereum.stackexchange.com/a/83577
    function getRevertMsg(
        bytes memory _returnData
    ) internal pure returns (string memory) {
        // Solidity returns the revert message encoded as
        // `abi.encodeWithSelector("Error(string)", string(msg))`.
        // The sighash occupies the first 4 bytes of the _returnData. The msg length
        // offset (32) occupies the next 32 bytes, followed by 32 bytes w/ the length.
        // It's 68 bytes so far. Finally, the msg content follows.
        // So, if the _returnData contains a revert message generated by Solidity code,
        // the _returnData length should exceed 68.
        if (_returnData.length < 69) return "Call reverted silently";

        // solhint-disable-next-line no-inline-assembly
        assembly {
            // Slice the sighash.
            _returnData := add(_returnData, 0x04)
        }
        // All that remains is the revert string
        return abi.decode(_returnData, (string));
    }
}
