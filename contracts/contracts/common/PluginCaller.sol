// SPDX-License-Identifier: GPL-3.0-or-later
// solhint-disable avoid-low-level-calls
// solhint-disable no-inline-assembly
// slither-disable-next-line solc-version
pragma solidity ^0.8.19;

/// @title PluginCaller
/// @dev call Plugin, return amount as result or revert
library CallerWithUint256Result {
    function callWithUint256Result(
        address to,
        bytes memory callData
    ) internal returns (uint256) {
        // slither-disable-next-line low-level-calls
        (bool success, bytes memory result) = to.call(callData);

        if (!success) {
            revert(getRevertMsg(result));
        }

        (result);

        return abi.decode(result, (uint256));
    }

    function getRevertMsg(
        bytes memory _returnData
    ) internal pure returns (string memory) {
        // Solidity returns the revert message encoded as
        // `abi.encodeWithSelector("Error(string)", string(msg))`.
        // The sighash occupies the first 4 bytes of the _returnData. The msg length
        // offset (32) occupies the next 32 bytes, followed by 32 bytes w/ the length.
        // It's 68 bytes so far. Finally, the msg content follows.
        // So, if the _returnData contains a revert message generated by Solidity code,
        // the _returnData length should exceed 68.
        if (_returnData.length < 69) return "Call reverted silently";

        // solhint-disable-next-line no-inline-assembly
        assembly {
            // Slice the sighash.
            _returnData := add(_returnData, 0x04)
        }
        // All that remains is the revert string
        return abi.decode(_returnData, (string));
    }
}
