{
  "address": "0xC46566b6E5077c83778876aF6957cE6f553994A4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "action",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adviser",
          "type": "address"
        }
      ],
      "name": "AdviserUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        }
      ],
      "name": "BalanceAdjusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SharesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SharesRedeemed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "action",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "adviser",
          "type": "address"
        }
      ],
      "name": "addRewardAdviser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "entitled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastVestedBlock",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "action",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "onAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "shares",
          "type": "uint96"
        },
        {
          "internalType": "uint160",
          "name": "offset",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "action",
          "type": "bytes4"
        }
      ],
      "name": "removeRewardAdviser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "rewardAdvisers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25011408d586f3dda28244c92a58996c343c2b31a5150be1d2c36997752e2777",
  "receipt": {
    "to": null,
    "from": "0xE33b386126149F11cbee6a691d7aFf72dF8dd16d",
    "contractAddress": "0xC46566b6E5077c83778876aF6957cE6f553994A4",
    "transactionIndex": 17,
    "gasUsed": "1615200",
    "logsBloom": "0x
    "blockHash": "0xc16b50a0f7d0912f87b6399d49fbd503f6dbc9491e2aa60f9c704ceb5e280339",
    "transactionHash": "0x25011408d586f3dda28244c92a58996c343c2b31a5150be1d2c36997752e2777",
    "logs": [],
    "blockNumber": 10070635,
    "cumulativeGasUsed": "5429996",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaE329e01CA91e2492376f44Cf1d393749FE53ad3",
    "0x8E88becefa043E161E28eEE04FcDD73C75B9AeDb",
    "0xE33b386126149F11cbee6a691d7aFf72dF8dd16d"
  ],
  "numDeployments": 1,
  "solcInputHash": "02b076c97c2a6876f90ebc67b2adfe45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adviser\",\"type\":\"address\"}],\"name\":\"AdviserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"}],\"name\":\"BalanceAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesRedeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"adviser\",\"type\":\"address\"}],\"name\":\"addRewardAdviser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"entitled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVestedBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"onAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"shares\",\"type\":\"uint96\"},{\"internalType\":\"uint160\",\"name\":\"offset\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"}],\"name\":\"removeRewardAdviser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"rewardAdvisers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BalanceAdjusted(uint256)\":{\"details\":\"Emitted when the Treasury counts for \\\"extra\\\" reward tokens. \\\"Extra\\\" tokens are ones sent to this contract directly (rather than vested via the REWARD_POOL).\"},\"RewardAdded(uint256)\":{\"details\":\"Emitted when new reward token amount vested to this contract\"},\"RewardPaid(address,uint256)\":{\"details\":\"Emitted when reward token amount paid to/for a user\"},\"SharesGranted(address,uint256)\":{\"details\":\"Emitted when new shares granted to a user\"},\"SharesRedeemed(address,uint256)\":{\"details\":\"Emitted when shares of a user redeemed\"}},\"kind\":\"dev\",\"methods\":{\"addRewardAdviser(address,bytes4,address)\":{\"details\":\"May be only called by the {OWNER} !!!!! Before adding a new \\\"adviser\\\", ensure \\\"shares\\\" it \\\"advices\\\" can not overflow `UserRecord.shares`, `UserRecord.offset` and `totalShares`.\"},\"claimErc20(address,address,uint256)\":{\"details\":\"May be only called by the {OWNER}\"},\"removeRewardAdviser(address,bytes4)\":{\"details\":\"May be only called by the {OWNER}\"}},\"stateVariables\":{\"MIN_SHARES_REWARDED\":{\"details\":\"Min number of unredeemed shares being rewarded\"},\"START_BLOCK\":{\"details\":\"Block the contract deployed in\"},\"lastBalance\":{\"details\":\"Reward token balance (aka Treasury) after last vesting (token total supply is supposed to not exceed 2**96)\"},\"lastVestedBlock\":{\"details\":\"Block when reward tokens were last time were vested in\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"REWARD_POOL()\":{\"notice\":\"RewardPool instance that vests the reward token\"},\"REWARD_TOKEN()\":{\"notice\":\"Token rewards are given in\"},\"addRewardAdviser(address,bytes4,address)\":{\"notice\":\"Adds the \\\"RewardAdviser\\\" for given ActionOracle and action type\"},\"claimErc20(address,address,uint256)\":{\"notice\":\"Withdraws accidentally sent token from this contract\"},\"entitled(address)\":{\"notice\":\"Returns reward token amount entitled to the given user/account\"},\"removeRewardAdviser(address,bytes4)\":{\"notice\":\"Remove \\\"RewardAdviser\\\" for given ActionOracle and action type\"},\"totalShares()\":{\"notice\":\"Total number of unredeemed shares (it is supposed to not exceed 2**128)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardMaster.sol\":\"RewardMaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/RewardMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"./actions/RewardAdvisersList.sol\\\";\\nimport \\\"./interfaces/IActionMsgReceiver.sol\\\";\\nimport \\\"./interfaces/IErc20Min.sol\\\";\\nimport \\\"./interfaces/IRewardAdviser.sol\\\";\\nimport \\\"./interfaces/IRewardPool.sol\\\";\\nimport \\\"./utils/ImmutableOwnable.sol\\\";\\nimport \\\"./utils/Claimable.sol\\\";\\nimport \\\"./utils/NonReentrant.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\n\\n/***\\n * @title RewardMaster\\n * @notice It accounts rewards and distributes reward tokens to users.\\n * @dev It withdraws the reward token from (or via) the \\\"REWARD_POOL\\\" contract,\\n * and keeps tokens, aka \\\"Treasury\\\", on its balance until distribution.\\n * It issues to users \\\"shares\\\" in the Treasury, or redeems shares, paying out\\n * tokens from the Treasury to users, or on behalf of users, as follows.\\n * It receives messages (calls) on \\\"actions\\\" to be rewarded from authorized\\n * \\\"ActionOracle\\\" contracts.\\n * On every \\\"action\\\" message received, it calls a \\\"RewardAdviser\\\" contract,\\n * assigned for that ActionOracle and action type, which advices on how many\\n * shares shall be created and to whom, or whose shares must be redeemed, and\\n * where reward tokens shall be sent to.\\n * The owner may add or remove addresses of ActionOracle`s and RewardAdviser`s.\\n */\\ncontract RewardMaster is\\n    ImmutableOwnable,\\n    Utils,\\n    Claimable,\\n    NonReentrant,\\n    RewardAdvisersList,\\n    IActionMsgReceiver\\n{\\n    // solhint-disable var-name-mixedcase\\n\\n    /// @notice Token rewards are given in\\n    address public immutable REWARD_TOKEN;\\n\\n    /// @notice RewardPool instance that vests the reward token\\n    address public immutable REWARD_POOL;\\n\\n    /// @dev Block the contract deployed in\\n    uint256 public immutable START_BLOCK;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /**\\n     * At any time, the amount of the reward token a user is entitled to is:\\n     *   tokenAmountEntitled = accumRewardPerShare * user.shares - user.offset\\n     *\\n     * This formula works since we update parameters as follows ...\\n     *\\n     * - when a new reward token amount added to the Treasury:\\n     *   accumRewardPerShare += tokenAmountAdded / totalShares\\n     *\\n     * - when new shares granted to a user:\\n     *   user.offset += sharesToCreate * accumRewardPerShare\\n     *   user.shares += sharesToCreate\\n     *   totalShares += sharesToCreate\\n     *\\n     * - when shares redeemed to a user:\\n     *   redemptionRate = accumRewardPerShare - user.offset/user.shares\\n     *   user.offset -= user.offset/user.shares * sharesToRedeem\\n     *   user.shares -= sharesToRedeem\\n     *   totalShares -= sharesToRedeem\\n     *   tokenAmountPayable = redemptionRate * sharesToRedeem\\n     *\\n     * (Scaling omitted in formulas above for clarity.)\\n     */\\n\\n    /// @dev Block when reward tokens were last time were vested in\\n    uint32 public lastVestedBlock;\\n    /// @dev Reward token balance (aka Treasury) after last vesting\\n    /// (token total supply is supposed to not exceed 2**96)\\n    uint96 public lastBalance;\\n\\n    /// @notice Total number of unredeemed shares\\n    /// (it is supposed to not exceed 2**128)\\n    uint128 public totalShares;\\n    /// @dev Min number of unredeemed shares being rewarded\\n    uint256 private constant MIN_SHARES_REWARDED = 1000;\\n\\n    // see comments above for explanation\\n    uint256 public accumRewardPerShare;\\n    // `accumRewardPerShare` is scaled (up) with this factor\\n    uint256 private constant SCALE = 1e9;\\n\\n    // see comments above for explanation\\n    struct UserRecord {\\n        // (limited to 2**96)\\n        uint96 shares;\\n        uint160 offset;\\n    }\\n\\n    // Mapping from user address to UserRecord data\\n    mapping(address => UserRecord) public records;\\n\\n    /// @dev Emitted when new shares granted to a user\\n    event SharesGranted(address indexed user, uint256 amount);\\n    /// @dev Emitted when shares of a user redeemed\\n    event SharesRedeemed(address indexed user, uint256 amount);\\n    /// @dev Emitted when new reward token amount vested to this contract\\n    event RewardAdded(uint256 reward);\\n    /// @dev Emitted when reward token amount paid to/for a user\\n    event RewardPaid(address indexed user, uint256 reward);\\n    /// @dev Emitted when the Treasury counts for \\\"extra\\\" reward tokens.\\n    /// \\\"Extra\\\" tokens are ones sent to this contract directly (rather than\\n    /// vested via the REWARD_POOL).\\n    event BalanceAdjusted(uint256 adjustment);\\n\\n    constructor(\\n        address _rewardToken,\\n        address _rewardPool,\\n        address _owner\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            _rewardToken != address(0) && _rewardPool != address(0),\\n            \\\"RM:C1\\\"\\n        );\\n\\n        REWARD_TOKEN = _rewardToken;\\n        REWARD_POOL = _rewardPool;\\n        START_BLOCK = blockNow();\\n    }\\n\\n    /// @notice Returns reward token amount entitled to the given user/account\\n    // This amount the account would get if shares would be redeemed now\\n    function entitled(address account) public view returns (uint256 reward) {\\n        UserRecord memory rec = records[account];\\n        if (rec.shares == 0) return 0;\\n\\n        // no reentrancy guard needed for the known contract call\\n        uint256 releasable = IRewardPool(REWARD_POOL).releasableAmount();\\n        uint256 _accumRewardPerShare = accumRewardPerShare;\\n        uint256 _totalShares = uint256(totalShares);\\n        if (releasable != 0 && _totalShares >= MIN_SHARES_REWARDED) {\\n            _accumRewardPerShare += (releasable * SCALE) / _totalShares;\\n        }\\n\\n        (reward, , ) = _computeRedemption(\\n            uint256(rec.shares),\\n            rec,\\n            _accumRewardPerShare\\n        );\\n    }\\n\\n    function onAction(bytes4 action, bytes memory message) external override {\\n        IRewardAdviser adviser = _getRewardAdviserOrRevert(msg.sender, action);\\n        // no reentrancy guard needed for the known contract call\\n        IRewardAdviser.Advice memory advice = adviser.getRewardAdvice(\\n            action,\\n            message\\n        );\\n        if (advice.sharesToCreate > 0) {\\n            _grantShares(advice.createSharesFor, advice.sharesToCreate);\\n        }\\n        if (advice.sharesToRedeem > 0) {\\n            _redeemShares(\\n                advice.redeemSharesFrom,\\n                advice.sharesToRedeem,\\n                advice.sendRewardTo\\n            );\\n        }\\n    }\\n\\n    /* ========== ONLY FOR OWNER FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Adds the \\\"RewardAdviser\\\" for given ActionOracle and action type\\n     * @dev May be only called by the {OWNER}\\n     * !!!!! Before adding a new \\\"adviser\\\", ensure \\\"shares\\\" it \\\"advices\\\" can not\\n     * overflow `UserRecord.shares`, `UserRecord.offset` and `totalShares`.\\n     */\\n    function addRewardAdviser(\\n        address oracle,\\n        bytes4 action,\\n        address adviser\\n    ) external onlyOwner {\\n        _addRewardAdviser(oracle, action, adviser);\\n    }\\n\\n    /// @notice Remove \\\"RewardAdviser\\\" for given ActionOracle and action type\\n    /// @dev May be only called by the {OWNER}\\n    function removeRewardAdviser(address oracle, bytes4 action)\\n        external\\n        onlyOwner\\n    {\\n        _removeRewardAdviser(oracle, action);\\n    }\\n\\n    /// @notice Withdraws accidentally sent token from this contract\\n    /// @dev May be only called by the {OWNER}\\n    function claimErc20(\\n        address claimedToken,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner nonReentrant {\\n        if (claimedToken == address(REWARD_TOKEN)) {\\n            // Not allowed if unclaimed shares remain\\n            require(totalShares == 0, \\\"RM: Failed to claim\\\");\\n        }\\n        _claimErc20(claimedToken, to, amount);\\n    }\\n\\n    /* ========== INTERNAL & PRIVATE FUNCTIONS ========== */\\n\\n    function _computeRedemption(\\n        uint256 sharesToRedeem,\\n        UserRecord memory rec,\\n        uint256 _accumRewardPerShare\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 reward,\\n            uint256 newShares,\\n            uint256 newOffset\\n        )\\n    {\\n        // `rec.shares` and `sharesToRedeem` are assumed to be non-zero here,\\n        // and `sharesToRedeem` does not exceed `rec.shares`\\n        newShares = uint256(rec.shares) - sharesToRedeem;\\n\\n        uint256 offsetRedeemed = newShares == 0\\n            ? uint256(rec.offset)\\n            : (uint256(rec.offset) * sharesToRedeem) / uint256(rec.shares);\\n        newOffset = uint256(rec.offset) - offsetRedeemed;\\n\\n        reward = 0;\\n        if (_accumRewardPerShare != 0) {\\n            reward = (sharesToRedeem * _accumRewardPerShare) / SCALE;\\n            // avoid eventual overflow resulted from rounding\\n            reward -= reward >= offsetRedeemed ? offsetRedeemed : reward;\\n        }\\n    }\\n\\n    function _grantShares(address to, uint256 shares)\\n        internal\\n        nonZeroAmount(shares)\\n        nonZeroAddress(to)\\n    {\\n        (\\n            uint256 _accumRewardPerShare,\\n            uint256 newBalance,\\n            uint256 oldBalance\\n        ) = _triggerVesting();\\n\\n        if (oldBalance != newBalance) lastBalance = safe96(newBalance);\\n\\n        UserRecord memory rec = records[to];\\n        uint256 newOffset = uint256(rec.offset) +\\n            (shares * _accumRewardPerShare) /\\n            SCALE;\\n        uint256 newShares = uint256(rec.shares) + shares;\\n\\n        records[to] = UserRecord(safe96(newShares), safe160(newOffset));\\n        totalShares = safe128(uint256(totalShares) + shares);\\n\\n        emit SharesGranted(to, shares);\\n    }\\n\\n    function _redeemShares(\\n        address from,\\n        // `shares` assumed to be non-zero\\n        uint256 shares,\\n        address to\\n    ) internal nonZeroAmount(shares) nonZeroAddress(from) nonZeroAddress(to) {\\n        UserRecord memory rec = records[from];\\n        require(rec.shares >= shares, \\\"RM: Not enough shares to redeem\\\");\\n\\n        (\\n            uint256 _accumRewardPerShare,\\n            uint256 newBalance,\\n            uint256 oldBalance\\n        ) = _triggerVesting();\\n\\n        (\\n            uint256 reward,\\n            uint256 newShares,\\n            uint256 newOffset\\n        ) = _computeRedemption(shares, rec, _accumRewardPerShare);\\n\\n        records[from] = UserRecord(safe96(newShares), safe160(newOffset));\\n        totalShares = safe128(uint256(totalShares) - shares);\\n\\n        uint256 _lastBalance = newBalance - reward;\\n        if (oldBalance != _lastBalance) {\\n            lastBalance = safe96(_lastBalance);\\n        }\\n\\n        if (reward != 0) {\\n            // known contract - nether reentrancy guard nor safeTransfer required\\n            require(\\n                IErc20Min(REWARD_TOKEN).transfer(to, reward),\\n                \\\"RM: Internal transfer failed\\\"\\n            );\\n            emit RewardPaid(to, reward);\\n        }\\n\\n        emit SharesRedeemed(from, shares);\\n    }\\n\\n    function _triggerVesting()\\n        internal\\n        returns (\\n            uint256 newAccumRewardPerShare,\\n            uint256 newBalance,\\n            uint256 oldBalance\\n        )\\n    {\\n        uint32 _blockNow = safe32BlockNow();\\n        newAccumRewardPerShare = accumRewardPerShare;\\n        oldBalance = uint256(lastBalance);\\n        uint256 _totalShares = totalShares;\\n\\n        if (\\n            lastVestedBlock >= _blockNow || _totalShares < MIN_SHARES_REWARDED\\n        ) {\\n            return (newAccumRewardPerShare, oldBalance, oldBalance);\\n        }\\n\\n        // known contracts, no reentrancy guard needed\\n        uint256 newlyVested = IRewardPool(REWARD_POOL).vestRewards();\\n        newBalance = IErc20Min(REWARD_TOKEN).balanceOf(address(this));\\n\\n        uint256 expectedBalance = oldBalance + newlyVested;\\n        if (newBalance > expectedBalance) {\\n            // somebody transferred tokens to this contract directly\\n            uint256 adjustment = newBalance - expectedBalance;\\n            newlyVested += adjustment;\\n            emit BalanceAdjusted(adjustment);\\n        }\\n        if (newlyVested != 0) {\\n            newAccumRewardPerShare += (newlyVested * SCALE) / _totalShares;\\n            accumRewardPerShare = newAccumRewardPerShare;\\n            emit RewardAdded(newlyVested);\\n        }\\n        lastVestedBlock = _blockNow;\\n        lastBalance = safe96(newBalance);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier nonZeroAmount(uint256 amount) {\\n        require(amount > 0, \\\"RM: Zero amount provided\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"RM: Zero address provided\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0dddbd5ce3afe92d94dcf68def1e6a785daa64489d249b431cdddc054cefa016\",\"license\":\"UNLICENSED\"},\"contracts/actions/RewardAdvisersList.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IRewardAdviser.sol\\\";\\n\\n/**\\n * @title ActionControllers\\n * @notice It maintains a list of \\\"ActionOracle\\\" and \\\"RewardAdviser\\\" instances.\\n * For a tuple of ActionOracle address and action type, an RewardAdviser\\n * instance of  may be mapped.\\n */\\nabstract contract RewardAdvisersList {\\n    /// @dev Emitted when RewardAdviser added, updated, or removed\\n    event AdviserUpdated(\\n        address indexed oracle,\\n        bytes4 indexed action,\\n        address adviser\\n    );\\n\\n    /// @dev mapping from ActionOracle and (type of) action to ActionController\\n    mapping(address => mapping(bytes4 => address)) public rewardAdvisers;\\n\\n    function _addRewardAdviser(\\n        address oracle,\\n        bytes4 action,\\n        address adviser\\n    ) internal {\\n        require(\\n            oracle != address(0) &&\\n                adviser != address(0) &&\\n                action != bytes4(0),\\n            \\\"ACM:E1\\\"\\n        );\\n        require(rewardAdvisers[oracle][action] == address(0), \\\"ACM:E2\\\");\\n        rewardAdvisers[oracle][action] = adviser;\\n        emit AdviserUpdated(oracle, action, adviser);\\n    }\\n\\n    function _removeRewardAdviser(address oracle, bytes4 action) internal {\\n        require(rewardAdvisers[oracle][action] != address(0), \\\"ACM:E3\\\");\\n        rewardAdvisers[oracle][action] = address(0);\\n        emit AdviserUpdated(oracle, action, address(0));\\n    }\\n\\n    function _getRewardAdviserOrRevert(address oracle, bytes4 action)\\n        internal\\n        view\\n        returns (IRewardAdviser)\\n    {\\n        address adviser = rewardAdvisers[oracle][action];\\n        require(adviser != address(0), \\\"ACM:E4\\\");\\n        return IRewardAdviser(adviser);\\n    }\\n}\\n\",\"keccak256\":\"0xf4e990da93c7112fc26adef5245dd4032ff6d86a1b653c9620e1dce99bd5da6e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IActionMsgReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IActionMsgReceiver {\\n    function onAction(bytes4 action, bytes memory message) external;\\n}\\n\",\"keccak256\":\"0x63eef574820bb79cbcd97be37575491617054bc11836be452c2eda73c4861f58\",\"license\":\"MIT\"},\"contracts/interfaces/IErc20Min.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IErc20Min {\\n    /// @dev ERC-20 `balanceOf`\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @dev ERC-20 `transfer`\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /// @dev ERC-20 `transferFrom`\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @dev EIP-2612 `permit`\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x732db097fcf91d4e4bf49a43262f9268e02f6a7abb7583edfa861468c0541bf2\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardAdviser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardAdviser {\\n    struct Advice {\\n        // advice on new \\\"shares\\\" (in the reward pool) to create\\n        address createSharesFor;\\n        uint96 sharesToCreate;\\n        // advice on \\\"shares\\\" to redeem\\n        address redeemSharesFrom;\\n        uint96 sharesToRedeem;\\n        // advice on address the reward against redeemed shares to send to\\n        address sendRewardTo;\\n    }\\n\\n    function getRewardAdvice(bytes4 action, bytes memory message)\\n        external\\n        returns (Advice memory);\\n}\\n\",\"keccak256\":\"0x9ecf725af20a11f29d94406fc335d3b20afd60dfb9e398a409966e0568ac1bbb\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.0;\\n\\ninterface IRewardPool {\\n    /// @notice Returns token amount that may be released (vested) now\\n    function releasableAmount() external view returns (uint256);\\n\\n    /// @notice Vests releasable token amount to the {recipient}\\n    /// @dev {recipient} only may call\\n    function vestRewards() external returns (uint256 amount);\\n\\n    /// @notice Emitted on vesting to the {recipient}\\n    event Vested(uint256 amount);\\n\\n    /// @notice Emitted on parameters initialized.\\n    event Initialized(uint256 _poolId, address _recipient, uint256 _endTime);\\n}\\n\",\"keccak256\":\"0x71e5db44f47a4e7256deceef5077d5ddda9dcb5815bf12590746f3d7aa812054\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Claimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Claimable\\n * @notice It withdraws accidentally sent tokens from this contract.\\n */\\ncontract Claimable {\\n    bytes4 private constant SELECTOR_TRANSFER =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    /// @dev Withdraws ERC20 tokens from this contract\\n    /// (take care of reentrancy attack risk mitigation)\\n    function _claimErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(SELECTOR_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"claimErc20: TRANSFER_FAILED\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x702e63e7eef33ed5490abd4a58db7074a1bcf1b055057cbbbdbeaa4112f5c437\",\"license\":\"MIT\"},\"contracts/utils/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xa7fcff1c9e37b9c757c39cf83b9149b440de47f72a1fb77426a75520fedead5c\",\"license\":\"MIT\"},\"contracts/utils/NonReentrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title NonReentrant\\n * @notice It provides reentrancy guard.\\n * The code borrowed from openzeppelin-contracts.\\n * Unlike original, this version requires neither `constructor` no `init` call.\\n */\\nabstract contract NonReentrant {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _reentrancyStatus;\\n\\n    modifier nonReentrant() {\\n        // Being called right after deployment, when _reentrancyStatus is 0 ,\\n        // it does not revert (which is expected behaviour)\\n        require(_reentrancyStatus != _ENTERED, \\\"claimErc20: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _reentrancyStatus = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _reentrancyStatus = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xbf71fedcb5a991cc9142ec5f8260ddfd30da2d17f0fe9171ea276901835a53fa\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nabstract contract Utils {\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x792e9324cc764dbd45210aa817127d67fae28bee7dc9b91e98cd1253617b04e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001e4138038062001e41833981016040819052620000359162000145565b806001600160a01b038116620000925760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b60601b6001600160601b0319166080526001600160a01b03831615801590620000c357506001600160a01b03821615155b620000f95760405162461bcd60e51b8152602060048201526005602482015264524d3a433160d81b604482015260640162000089565b6001600160601b0319606084811b821660a05283901b1660c0526200011b4390565b60e052506200018e915050565b80516001600160a01b03811681146200014057600080fd5b919050565b6000806000606084860312156200015a578283fd5b620001658462000128565b9250620001756020850162000128565b9150620001856040850162000128565b90509250925092565b60805160601c60a05160601c60c05160601c60e051611c3962000208600039600061018c0152600081816103160152818161051e01526114830152600081816102ef015281816106f201528181610e02015261152c01526000818160ff015281816104470152818161062801526107a10152611c396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063492bc9bc1161009757806392a70fb01161006657806392a70fb0146102d757806399248ea7146102ea57806399f91c281461031157806399ff97361461033857600080fd5b8063492bc9bc146102635780634934da9e146102885780636e1ede72146102915780638f1c56bd146102a457600080fd5b806339b3e826116100d357806339b3e826146101875780633a98ef39146101bc57806345d68542146101ee578063469e90671461020157600080fd5b8063117803e3146100fa5780631b8650461461013e5780632007577e14610153575b600080fd5b6101217f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61015161014c366004611973565b61034b565b005b6101216101613660046118d7565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610135565b6002546101d690600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610135565b6101516101fc3660046118d7565b610445565b61023c61020f36600461187b565b6004602052600090815260409020546001600160601b03811690600160601b90046001600160a01b031682565b604080516001600160601b0390931683526001600160a01b03909116602083015201610135565b6002546102739063ffffffff1681565b60405163ffffffff9091168152602001610135565b6101ae60035481565b6101ae61029f36600461187b565b6104c7565b6002546102bf9064010000000090046001600160601b031681565b6040516001600160601b039091168152602001610135565b6101516102e5366004611897565b610626565b6101217f000000000000000000000000000000000000000000000000000000000000000081565b6101217f000000000000000000000000000000000000000000000000000000000000000081565b61015161034636600461190b565b61079f565b6000610357338461081e565b90506000816001600160a01b031663e9cb032485856040518363ffffffff1660e01b8152600401610389929190611ada565b60a060405180830381600087803b1580156103a357600080fd5b505af11580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db9190611a13565b60208101519091506001600160601b03161561040c5761040c816000015182602001516001600160601b03166108a4565b60608101516001600160601b03161561043f5761043f816040015182606001516001600160601b03168360800151610b29565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104b95760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064015b60405180910390fd5b6104c38282610f61565b5050565b6001600160a01b0380821660009081526004602090815260408083208151808301909252546001600160601b038116808352600160601b90910490941691810191909152909161051a5750600092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b9400816040518163ffffffff1660e01b815260040160206040518083038186803b15801561057557600080fd5b505afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190611aa6565b60035460025491925090600160801b90046001600160801b031682158015906105d857506103e88110155b1561060357806105ec633b9aca0085611b86565b6105f69190611b66565b6106009083611b4e565b91505b8351610619906001600160601b0316858461105d565b5090979650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146106955760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016104b0565b600260005414156106e85760405162461bcd60e51b815260206004820152601a60248201527f636c61696d45726332303a207265656e7472616e742063616c6c00000000000060448201526064016104b0565b60026000819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561078a57600254600160801b90046001600160801b03161561078a5760405162461bcd60e51b815260206004820152601360248201527f524d3a204661696c656420746f20636c61696d0000000000000000000000000060448201526064016104b0565b610795838383611133565b5050600160005550565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461080e5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016104b0565b610819838383611293565b505050565b6001600160a01b0380831660009081526001602090815260408083206001600160e01b0319861684529091528120549091168061089d5760405162461bcd60e51b815260206004820152600660248201527f41434d3a4534000000000000000000000000000000000000000000000000000060448201526064016104b0565b9392505050565b80600081116108f55760405162461bcd60e51b815260206004820152601860248201527f524d3a205a65726f20616d6f756e742070726f7669646564000000000000000060448201526064016104b0565b826001600160a01b03811661094c5760405162461bcd60e51b815260206004820152601960248201527f524d3a205a65726f20616464726573732070726f76696465640000000000000060448201526064016104b0565b6000806000610959611419565b9250925092508181146109965761096f826116cd565b600260046101000a8154816001600160601b0302191690836001600160601b031602179055505b6001600160a01b0380881660009081526004602090815260408083208151808301909252546001600160601b0381168252600160601b900490931690830152633b9aca006109e4868a611b86565b6109ee9190611b66565b82602001516001600160a01b0316610a069190611b4e565b905060008883600001516001600160601b0316610a239190611b4e565b90506040518060400160405280610a39836116cd565b6001600160601b03168152602001610a5084611726565b6001600160a01b039081169091528b8116600090815260046020908152604090912083519390910151909116600160601b026001600160601b03909216919091179055600254610abb90610ab6908b906001600160801b03600160801b90910416611b4e565b61178c565b600280546001600160801b03928316600160801b0292169190911790556040516001600160a01b038b16907fa9cb08b17f930ad003053de9e6b23478fb011aa5113047ce62b832dcbb6d2e4290610b15908c815260200190565b60405180910390a250505050505050505050565b8160008111610b7a5760405162461bcd60e51b815260206004820152601860248201527f524d3a205a65726f20616d6f756e742070726f7669646564000000000000000060448201526064016104b0565b836001600160a01b038116610bd15760405162461bcd60e51b815260206004820152601960248201527f524d3a205a65726f20616464726573732070726f76696465640000000000000060448201526064016104b0565b826001600160a01b038116610c285760405162461bcd60e51b815260206004820152601960248201527f524d3a205a65726f20616464726573732070726f76696465640000000000000060448201526064016104b0565b6001600160a01b038087166000908152600460209081526040918290208251808401909352546001600160601b038116808452600160601b9091049093169082015290861115610cba5760405162461bcd60e51b815260206004820152601f60248201527f524d3a204e6f7420656e6f7567682073686172657320746f2072656465656d0060448201526064016104b0565b6000806000610cc7611419565b9250925092506000806000610cdd8c888861105d565b9250925092506040518060400160405280610cf7846116cd565b6001600160601b03168152602001610d0e83611726565b6001600160a01b039081169091528e8116600090815260046020908152604090912083519390910151909116600160601b026001600160601b03909216919091179055600254610d7490610ab6908e906001600160801b03600160801b90910416611ba5565b600280546001600160801b03928316600160801b0292169190911790556000610d9d8487611ba5565b9050808514610dd657610daf816116cd565b600260046101000a8154816001600160601b0302191690836001600160601b031602179055505b8315610f0e5760405163a9059cbb60e01b81526001600160a01b038d81166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015610e4657600080fd5b505af1158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e9190611953565b610eca5760405162461bcd60e51b815260206004820152601c60248201527f524d3a20496e7465726e616c207472616e73666572206661696c65640000000060448201526064016104b0565b8b6001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048685604051610f0591815260200190565b60405180910390a25b8d6001600160a01b03167fc064950777109fc27d3ee46c0e316d1aad25e9b115d36ea363e5623fabf0f4fe8e604051610f4991815260200190565b60405180910390a25050505050505050505050505050565b6001600160a01b0382811660009081526001602090815260408083206001600160e01b03198616845290915290205416610fdd5760405162461bcd60e51b815260206004820152600660248201527f41434d3a4533000000000000000000000000000000000000000000000000000060448201526064016104b0565b6001600160a01b03821660008181526001602090815260408083206001600160e01b03198616808552908352818420805473ffffffffffffffffffffffffffffffffffffffff19169055905192835292917fc3b2e3d4ba2ea7ac7abc74ac870cb893deaa227c6c21322632d97e6a2e2bf92d910160405180910390a35050565b60008060008585600001516001600160601b031661107b9190611ba5565b9150600082156110bb5785600001516001600160601b03168787602001516001600160a01b03166110ac9190611b86565b6110b69190611b66565b6110ca565b85602001516001600160a01b03165b90508086602001516001600160a01b03166110e59190611ba5565b600094509150841561112957633b9aca006111008689611b86565b61110a9190611b66565b93508084101561111a578361111c565b805b6111269085611ba5565b93505b5093509350939050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915160009283928716916111d49190611abe565b6000604051808303816000865af19150503d8060008114611211576040519150601f19603f3d011682016040523d82523d6000602084013e611216565b606091505b50915091508180156112405750805115806112405750808060200190518101906112409190611953565b61128c5760405162461bcd60e51b815260206004820152601b60248201527f636c61696d45726332303a205452414e534645525f4641494c4544000000000060448201526064016104b0565b5050505050565b6001600160a01b038316158015906112b357506001600160a01b03811615155b80156112c857506001600160e01b0319821615155b6113145760405162461bcd60e51b815260206004820152600660248201527f41434d3a4531000000000000000000000000000000000000000000000000000060448201526064016104b0565b6001600160a01b0383811660009081526001602090815260408083206001600160e01b03198716845290915290205416156113915760405162461bcd60e51b815260206004820152600660248201527f41434d3a4532000000000000000000000000000000000000000000000000000060448201526064016104b0565b6001600160a01b0383811660008181526001602090815260408083206001600160e01b0319881680855290835292819020805473ffffffffffffffffffffffffffffffffffffffff191695871695861790555193845290927fc3b2e3d4ba2ea7ac7abc74ac870cb893deaa227c6c21322632d97e6a2e2bf92d910160405180910390a3505050565b6000806000806114276117e1565b6003546002549095506001600160601b0364010000000082041693509091506001600160801b03600160801b8204169063ffffffff808416911610158061146f57506103e881105b1561147f57509293909250829150565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633c43059d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156114dc57600080fd5b505af11580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611aa6565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561157657600080fd5b505afa15801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae9190611aa6565b945060006115bc8286611b4e565b90508086111561161b5760006115d28288611ba5565b90506115de8184611b4e565b92507f0701991c7670454699af0d89a71c6225608163b182136536a3a34395535b5a488160405161161191815260200190565b60405180910390a1505b81156116805782611630633b9aca0084611b86565b61163a9190611b66565b6116449088611b4e565b60038190556040518381529097507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15b6002805463ffffffff191663ffffffff861617905561169e866116cd565b600260046101000a8154816001600160601b0302191690836001600160601b0316021790555050505050909192565b6000600160601b82106117225760405162461bcd60e51b815260206004820152600860248201527f554e53414645393600000000000000000000000000000000000000000000000060448201526064016104b0565b5090565b60007401000000000000000000000000000000000000000082106117225760405162461bcd60e51b815260206004820152600960248201527f554e53414645313630000000000000000000000000000000000000000000000060448201526064016104b0565b6000600160801b82106117225760405162461bcd60e51b815260206004820152600960248201527f554e53414645313238000000000000000000000000000000000000000000000060448201526064016104b0565b60006117ec436117f1565b905090565b600064010000000082106117225760405162461bcd60e51b815260206004820152600860248201527f554e53414645333200000000000000000000000000000000000000000000000060448201526064016104b0565b80356001600160e01b03198116811461185f57600080fd5b919050565b80516001600160601b038116811461185f57600080fd5b60006020828403121561188c578081fd5b813561089d81611c14565b6000806000606084860312156118ab578182fd5b83356118b681611c14565b925060208401356118c681611c14565b929592945050506040919091013590565b600080604083850312156118e9578182fd5b82356118f481611c14565b915061190260208401611847565b90509250929050565b60008060006060848603121561191f578283fd5b833561192a81611c14565b925061193860208501611847565b9150604084013561194881611c14565b809150509250925092565b600060208284031215611964578081fd5b8151801515811461089d578182fd5b60008060408385031215611985578182fd5b61198e83611847565b915060208084013567ffffffffffffffff808211156119ab578384fd5b818601915086601f8301126119be578384fd5b8135818111156119d0576119d0611bfe565b6119e2601f8201601f19168501611b1d565b915080825287848285010111156119f7578485fd5b8084840185840137810190920192909252919491935090915050565b600060a08284031215611a24578081fd5b60405160a0810181811067ffffffffffffffff82111715611a4757611a47611bfe565b6040528251611a5581611c14565b8152611a6360208401611864565b60208201526040830151611a7681611c14565b6040820152611a8760608401611864565b60608201526080830151611a9a81611c14565b60808201529392505050565b600060208284031215611ab7578081fd5b5051919050565b60008251611ad0818460208701611bbc565b9190910192915050565b63ffffffff60e01b831681526040602082015260008251806040840152611b08816060850160208701611bbc565b601f01601f1916919091016060019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4657611b46611bfe565b604052919050565b60008219821115611b6157611b61611be8565b500190565b600082611b8157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ba057611ba0611be8565b500290565b600082821015611bb757611bb7611be8565b500390565b60005b83811015611bd7578181015183820152602001611bbf565b8381111561043f5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c2957600080fd5b5056fea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063492bc9bc1161009757806392a70fb01161006657806392a70fb0146102d757806399248ea7146102ea57806399f91c281461031157806399ff97361461033857600080fd5b8063492bc9bc146102635780634934da9e146102885780636e1ede72146102915780638f1c56bd146102a457600080fd5b806339b3e826116100d357806339b3e826146101875780633a98ef39146101bc57806345d68542146101ee578063469e90671461020157600080fd5b8063117803e3146100fa5780631b8650461461013e5780632007577e14610153575b600080fd5b6101217f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61015161014c366004611973565b61034b565b005b6101216101613660046118d7565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610135565b6002546101d690600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610135565b6101516101fc3660046118d7565b610445565b61023c61020f36600461187b565b6004602052600090815260409020546001600160601b03811690600160601b90046001600160a01b031682565b604080516001600160601b0390931683526001600160a01b03909116602083015201610135565b6002546102739063ffffffff1681565b60405163ffffffff9091168152602001610135565b6101ae60035481565b6101ae61029f36600461187b565b6104c7565b6002546102bf9064010000000090046001600160601b031681565b6040516001600160601b039091168152602001610135565b6101516102e5366004611897565b610626565b6101217f000000000000000000000000000000000000000000000000000000000000000081565b6101217f000000000000000000000000000000000000000000000000000000000000000081565b61015161034636600461190b565b61079f565b6000610357338461081e565b90506000816001600160a01b031663e9cb032485856040518363ffffffff1660e01b8152600401610389929190611ada565b60a060405180830381600087803b1580156103a357600080fd5b505af11580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db9190611a13565b60208101519091506001600160601b03161561040c5761040c816000015182602001516001600160601b03166108a4565b60608101516001600160601b03161561043f5761043f816040015182606001516001600160601b03168360800151610b29565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104b95760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064015b60405180910390fd5b6104c38282610f61565b5050565b6001600160a01b0380821660009081526004602090815260408083208151808301909252546001600160601b038116808352600160601b90910490941691810191909152909161051a5750600092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b9400816040518163ffffffff1660e01b815260040160206040518083038186803b15801561057557600080fd5b505afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190611aa6565b60035460025491925090600160801b90046001600160801b031682158015906105d857506103e88110155b1561060357806105ec633b9aca0085611b86565b6105f69190611b66565b6106009083611b4e565b91505b8351610619906001600160601b0316858461105d565b5090979650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146106955760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016104b0565b600260005414156106e85760405162461bcd60e51b815260206004820152601a60248201527f636c61696d45726332303a207265656e7472616e742063616c6c00000000000060448201526064016104b0565b60026000819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561078a57600254600160801b90046001600160801b03161561078a5760405162461bcd60e51b815260206004820152601360248201527f524d3a204661696c656420746f20636c61696d0000000000000000000000000060448201526064016104b0565b610795838383611133565b5050600160005550565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461080e5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016104b0565b610819838383611293565b505050565b6001600160a01b0380831660009081526001602090815260408083206001600160e01b0319861684529091528120549091168061089d5760405162461bcd60e51b815260206004820152600660248201527f41434d3a4534000000000000000000000000000000000000000000000000000060448201526064016104b0565b9392505050565b80600081116108f55760405162461bcd60e51b815260206004820152601860248201527f524d3a205a65726f20616d6f756e742070726f7669646564000000000000000060448201526064016104b0565b826001600160a01b03811661094c5760405162461bcd60e51b815260206004820152601960248201527f524d3a205a65726f20616464726573732070726f76696465640000000000000060448201526064016104b0565b6000806000610959611419565b9250925092508181146109965761096f826116cd565b600260046101000a8154816001600160601b0302191690836001600160601b031602179055505b6001600160a01b0380881660009081526004602090815260408083208151808301909252546001600160601b0381168252600160601b900490931690830152633b9aca006109e4868a611b86565b6109ee9190611b66565b82602001516001600160a01b0316610a069190611b4e565b905060008883600001516001600160601b0316610a239190611b4e565b90506040518060400160405280610a39836116cd565b6001600160601b03168152602001610a5084611726565b6001600160a01b039081169091528b8116600090815260046020908152604090912083519390910151909116600160601b026001600160601b03909216919091179055600254610abb90610ab6908b906001600160801b03600160801b90910416611b4e565b61178c565b600280546001600160801b03928316600160801b0292169190911790556040516001600160a01b038b16907fa9cb08b17f930ad003053de9e6b23478fb011aa5113047ce62b832dcbb6d2e4290610b15908c815260200190565b60405180910390a250505050505050505050565b8160008111610b7a5760405162461bcd60e51b815260206004820152601860248201527f524d3a205a65726f20616d6f756e742070726f7669646564000000000000000060448201526064016104b0565b836001600160a01b038116610bd15760405162461bcd60e51b815260206004820152601960248201527f524d3a205a65726f20616464726573732070726f76696465640000000000000060448201526064016104b0565b826001600160a01b038116610c285760405162461bcd60e51b815260206004820152601960248201527f524d3a205a65726f20616464726573732070726f76696465640000000000000060448201526064016104b0565b6001600160a01b038087166000908152600460209081526040918290208251808401909352546001600160601b038116808452600160601b9091049093169082015290861115610cba5760405162461bcd60e51b815260206004820152601f60248201527f524d3a204e6f7420656e6f7567682073686172657320746f2072656465656d0060448201526064016104b0565b6000806000610cc7611419565b9250925092506000806000610cdd8c888861105d565b9250925092506040518060400160405280610cf7846116cd565b6001600160601b03168152602001610d0e83611726565b6001600160a01b039081169091528e8116600090815260046020908152604090912083519390910151909116600160601b026001600160601b03909216919091179055600254610d7490610ab6908e906001600160801b03600160801b90910416611ba5565b600280546001600160801b03928316600160801b0292169190911790556000610d9d8487611ba5565b9050808514610dd657610daf816116cd565b600260046101000a8154816001600160601b0302191690836001600160601b031602179055505b8315610f0e5760405163a9059cbb60e01b81526001600160a01b038d81166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015610e4657600080fd5b505af1158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e9190611953565b610eca5760405162461bcd60e51b815260206004820152601c60248201527f524d3a20496e7465726e616c207472616e73666572206661696c65640000000060448201526064016104b0565b8b6001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048685604051610f0591815260200190565b60405180910390a25b8d6001600160a01b03167fc064950777109fc27d3ee46c0e316d1aad25e9b115d36ea363e5623fabf0f4fe8e604051610f4991815260200190565b60405180910390a25050505050505050505050505050565b6001600160a01b0382811660009081526001602090815260408083206001600160e01b03198616845290915290205416610fdd5760405162461bcd60e51b815260206004820152600660248201527f41434d3a4533000000000000000000000000000000000000000000000000000060448201526064016104b0565b6001600160a01b03821660008181526001602090815260408083206001600160e01b03198616808552908352818420805473ffffffffffffffffffffffffffffffffffffffff19169055905192835292917fc3b2e3d4ba2ea7ac7abc74ac870cb893deaa227c6c21322632d97e6a2e2bf92d910160405180910390a35050565b60008060008585600001516001600160601b031661107b9190611ba5565b9150600082156110bb5785600001516001600160601b03168787602001516001600160a01b03166110ac9190611b86565b6110b69190611b66565b6110ca565b85602001516001600160a01b03165b90508086602001516001600160a01b03166110e59190611ba5565b600094509150841561112957633b9aca006111008689611b86565b61110a9190611b66565b93508084101561111a578361111c565b805b6111269085611ba5565b93505b5093509350939050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915160009283928716916111d49190611abe565b6000604051808303816000865af19150503d8060008114611211576040519150601f19603f3d011682016040523d82523d6000602084013e611216565b606091505b50915091508180156112405750805115806112405750808060200190518101906112409190611953565b61128c5760405162461bcd60e51b815260206004820152601b60248201527f636c61696d45726332303a205452414e534645525f4641494c4544000000000060448201526064016104b0565b5050505050565b6001600160a01b038316158015906112b357506001600160a01b03811615155b80156112c857506001600160e01b0319821615155b6113145760405162461bcd60e51b815260206004820152600660248201527f41434d3a4531000000000000000000000000000000000000000000000000000060448201526064016104b0565b6001600160a01b0383811660009081526001602090815260408083206001600160e01b03198716845290915290205416156113915760405162461bcd60e51b815260206004820152600660248201527f41434d3a4532000000000000000000000000000000000000000000000000000060448201526064016104b0565b6001600160a01b0383811660008181526001602090815260408083206001600160e01b0319881680855290835292819020805473ffffffffffffffffffffffffffffffffffffffff191695871695861790555193845290927fc3b2e3d4ba2ea7ac7abc74ac870cb893deaa227c6c21322632d97e6a2e2bf92d910160405180910390a3505050565b6000806000806114276117e1565b6003546002549095506001600160601b0364010000000082041693509091506001600160801b03600160801b8204169063ffffffff808416911610158061146f57506103e881105b1561147f57509293909250829150565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633c43059d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156114dc57600080fd5b505af11580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611aa6565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561157657600080fd5b505afa15801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae9190611aa6565b945060006115bc8286611b4e565b90508086111561161b5760006115d28288611ba5565b90506115de8184611b4e565b92507f0701991c7670454699af0d89a71c6225608163b182136536a3a34395535b5a488160405161161191815260200190565b60405180910390a1505b81156116805782611630633b9aca0084611b86565b61163a9190611b66565b6116449088611b4e565b60038190556040518381529097507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15b6002805463ffffffff191663ffffffff861617905561169e866116cd565b600260046101000a8154816001600160601b0302191690836001600160601b0316021790555050505050909192565b6000600160601b82106117225760405162461bcd60e51b815260206004820152600860248201527f554e53414645393600000000000000000000000000000000000000000000000060448201526064016104b0565b5090565b60007401000000000000000000000000000000000000000082106117225760405162461bcd60e51b815260206004820152600960248201527f554e53414645313630000000000000000000000000000000000000000000000060448201526064016104b0565b6000600160801b82106117225760405162461bcd60e51b815260206004820152600960248201527f554e53414645313238000000000000000000000000000000000000000000000060448201526064016104b0565b60006117ec436117f1565b905090565b600064010000000082106117225760405162461bcd60e51b815260206004820152600860248201527f554e53414645333200000000000000000000000000000000000000000000000060448201526064016104b0565b80356001600160e01b03198116811461185f57600080fd5b919050565b80516001600160601b038116811461185f57600080fd5b60006020828403121561188c578081fd5b813561089d81611c14565b6000806000606084860312156118ab578182fd5b83356118b681611c14565b925060208401356118c681611c14565b929592945050506040919091013590565b600080604083850312156118e9578182fd5b82356118f481611c14565b915061190260208401611847565b90509250929050565b60008060006060848603121561191f578283fd5b833561192a81611c14565b925061193860208501611847565b9150604084013561194881611c14565b809150509250925092565b600060208284031215611964578081fd5b8151801515811461089d578182fd5b60008060408385031215611985578182fd5b61198e83611847565b915060208084013567ffffffffffffffff808211156119ab578384fd5b818601915086601f8301126119be578384fd5b8135818111156119d0576119d0611bfe565b6119e2601f8201601f19168501611b1d565b915080825287848285010111156119f7578485fd5b8084840185840137810190920192909252919491935090915050565b600060a08284031215611a24578081fd5b60405160a0810181811067ffffffffffffffff82111715611a4757611a47611bfe565b6040528251611a5581611c14565b8152611a6360208401611864565b60208201526040830151611a7681611c14565b6040820152611a8760608401611864565b60608201526080830151611a9a81611c14565b60808201529392505050565b600060208284031215611ab7578081fd5b5051919050565b60008251611ad0818460208701611bbc565b9190910192915050565b63ffffffff60e01b831681526040602082015260008251806040840152611b08816060850160208701611bbc565b601f01601f1916919091016060019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4657611b46611bfe565b604052919050565b60008219821115611b6157611b61611be8565b500190565b600082611b8157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ba057611ba0611be8565b500290565b600082821015611bb757611bb7611be8565b500390565b60005b83811015611bd7578181015183820152602001611bbf565b8381111561043f5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c2957600080fd5b5056fea164736f6c6343000804000a",
  "devdoc": {
    "events": {
      "BalanceAdjusted(uint256)": {
        "details": "Emitted when the Treasury counts for \"extra\" reward tokens. \"Extra\" tokens are ones sent to this contract directly (rather than vested via the REWARD_POOL)."
      },
      "RewardAdded(uint256)": {
        "details": "Emitted when new reward token amount vested to this contract"
      },
      "RewardPaid(address,uint256)": {
        "details": "Emitted when reward token amount paid to/for a user"
      },
      "SharesGranted(address,uint256)": {
        "details": "Emitted when new shares granted to a user"
      },
      "SharesRedeemed(address,uint256)": {
        "details": "Emitted when shares of a user redeemed"
      }
    },
    "kind": "dev",
    "methods": {
      "addRewardAdviser(address,bytes4,address)": {
        "details": "May be only called by the {OWNER} !!!!! Before adding a new \"adviser\", ensure \"shares\" it \"advices\" can not overflow `UserRecord.shares`, `UserRecord.offset` and `totalShares`."
      },
      "claimErc20(address,address,uint256)": {
        "details": "May be only called by the {OWNER}"
      },
      "removeRewardAdviser(address,bytes4)": {
        "details": "May be only called by the {OWNER}"
      }
    },
    "stateVariables": {
      "MIN_SHARES_REWARDED": {
        "details": "Min number of unredeemed shares being rewarded"
      },
      "START_BLOCK": {
        "details": "Block the contract deployed in"
      },
      "lastBalance": {
        "details": "Reward token balance (aka Treasury) after last vesting (token total supply is supposed to not exceed 2**96)"
      },
      "lastVestedBlock": {
        "details": "Block when reward tokens were last time were vested in"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "REWARD_POOL()": {
        "notice": "RewardPool instance that vests the reward token"
      },
      "REWARD_TOKEN()": {
        "notice": "Token rewards are given in"
      },
      "addRewardAdviser(address,bytes4,address)": {
        "notice": "Adds the \"RewardAdviser\" for given ActionOracle and action type"
      },
      "claimErc20(address,address,uint256)": {
        "notice": "Withdraws accidentally sent token from this contract"
      },
      "entitled(address)": {
        "notice": "Returns reward token amount entitled to the given user/account"
      },
      "removeRewardAdviser(address,bytes4)": {
        "notice": "Remove \"RewardAdviser\" for given ActionOracle and action type"
      },
      "totalShares()": {
        "notice": "Total number of unredeemed shares (it is supposed to not exceed 2**128)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3853,
        "contract": "contracts/RewardMaster.sol:RewardMaster",
        "label": "_reentrancyStatus",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2958,
        "contract": "contracts/RewardMaster.sol:RewardMaster",
        "label": "rewardAdvisers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_address))"
      },
      {
        "astId": 34,
        "contract": "contracts/RewardMaster.sol:RewardMaster",
        "label": "lastVestedBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 37,
        "contract": "contracts/RewardMaster.sol:RewardMaster",
        "label": "lastBalance",
        "offset": 4,
        "slot": "2",
        "type": "t_uint96"
      },
      {
        "astId": 40,
        "contract": "contracts/RewardMaster.sol:RewardMaster",
        "label": "totalShares",
        "offset": 16,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 46,
        "contract": "contracts/RewardMaster.sol:RewardMaster",
        "label": "accumRewardPerShare",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 59,
        "contract": "contracts/RewardMaster.sol:RewardMaster",
        "label": "records",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UserRecord)54_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_address,t_struct(UserRecord)54_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardMaster.UserRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRecord)54_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(UserRecord)54_storage": {
        "encoding": "inplace",
        "label": "struct RewardMaster.UserRecord",
        "members": [
          {
            "astId": 51,
            "contract": "contracts/RewardMaster.sol:RewardMaster",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 53,
            "contract": "contracts/RewardMaster.sol:RewardMaster",
            "label": "offset",
            "offset": 12,
            "slot": "0",
            "type": "t_uint160"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}