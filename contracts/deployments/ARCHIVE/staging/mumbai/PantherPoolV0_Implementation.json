{
  "address": "0x0255d2dEE3ab04cd0c611a850022d0738D34164D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prpGrantor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "AnchoredRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "CachedRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        }
      ],
      "name": "Change",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExitTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExitDelay",
          "type": "uint256"
        }
      ],
      "name": "ExitTimesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "leftLeafId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creationTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32[3]",
          "name": "commitments",
          "type": "bytes32[3]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "utxoData",
          "type": "bytes"
        }
      ],
      "name": "NewCommitments",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "Nullifier",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ASSET_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRP_GRANTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimEthOrErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "exitCommitment",
          "type": "bytes32"
        }
      ],
      "name": "commitToExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cacheIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curTree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "scaledAmount",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "creationTime",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "privSpendingKey",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leafId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[16]",
          "name": "pathElements",
          "type": "bytes32[16]"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cacheIndexHint",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "exitCommitments",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitDelay",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "finalRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[3]",
          "name": "tokens",
          "type": "address[3]"
        },
        {
          "internalType": "uint256[3]",
          "name": "tokenIds",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct G1Point[3]",
          "name": "pubSpendingKeys",
          "type": "tuple[3]"
        },
        {
          "internalType": "uint256[3][3]",
          "name": "secrets",
          "type": "uint256[3][3]"
        },
        {
          "internalType": "uint32",
          "name": "createdAt",
          "type": "uint32"
        }
      ],
      "name": "generateDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "leftLeafId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "leafId",
          "type": "uint256"
        }
      ],
      "name": "getLeafIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "leafId",
          "type": "uint256"
        }
      ],
      "name": "getTreeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cacheIndexHint",
          "type": "uint256"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leavesNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newExitTime",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "newExitDelay",
          "type": "uint24"
        }
      ],
      "name": "updateExitTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "triadIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "triadNodeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[16]",
          "name": "pathElements",
          "type": "bytes32[16]"
        }
      ],
      "name": "verifyMerkleProof",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x876215df59cc8653880f589b0d0a4f1661dff735d1fd977320876157dd2ff7b4",
  "receipt": {
    "to": null,
    "from": "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "contractAddress": "0x0255d2dEE3ab04cd0c611a850022d0738D34164D",
    "transactionIndex": 24,
    "gasUsed": "3050843",
    "logsBloom": "0x
    "blockHash": "0x4633a5e75df87fae3feb56269da02a6fb1c861d571ace216087384f18b71ff56",
    "transactionHash": "0x876215df59cc8653880f589b0d0a4f1661dff735d1fd977320876157dd2ff7b4",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 28132669,
        "transactionHash": "0x876215df59cc8653880f589b0d0a4f1661dff735d1fd977320876157dd2ff7b4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fffdd1de35ffc2f66bfd78e064c280fed9e68de",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001b18d0593383000000000000000000000000000000000000000000000000004286ca9cb4b0127a00000000000000000000000000000000000000000000091c1abb68313ae84f7b000000000000000000000000000000000000000000000000426bb1cc5b7c8f7a00000000000000000000000000000000000000000000091c1ad68101941bd27b",
        "logIndex": 117,
        "blockHash": "0x4633a5e75df87fae3feb56269da02a6fb1c861d571ace216087384f18b71ff56"
      }
    ],
    "blockNumber": 28132669,
    "cumulativeGasUsed": "7532508",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "0x1f58EFcE1d59Bd533B2a403e68B68d2075883015",
    "0xa0C98dCC8cC82Cf8f04857187994b98712D19afd",
    "0x91Ffa5F1aCF9D2b78Fc5B2367b0F34f60927A022"
  ],
  "numDeployments": 1,
  "solcInputHash": "fcf227c34e662724301bcc844e2ed469",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prpGrantor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"AnchoredRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"CachedRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"}],\"name\":\"Change\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExitCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExitTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExitDelay\",\"type\":\"uint256\"}],\"name\":\"ExitTimesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"leftLeafId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[3]\",\"name\":\"commitments\",\"type\":\"bytes32[3]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"utxoData\",\"type\":\"bytes\"}],\"name\":\"NewCommitments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"Nullifier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ASSET_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRP_GRANTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimEthOrErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"exitCommitment\",\"type\":\"bytes32\"}],\"name\":\"commitToExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cacheIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"scaledAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"creationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"privSpendingKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leafId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[16]\",\"name\":\"pathElements\",\"type\":\"bytes32[16]\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cacheIndexHint\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"exitCommitments\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitDelay\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finalRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"tokens\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"tokenIds\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point[3]\",\"name\":\"pubSpendingKeys\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256[3][3]\",\"name\":\"secrets\",\"type\":\"uint256[3][3]\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"}],\"name\":\"generateDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leftLeafId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leafId\",\"type\":\"uint256\"}],\"name\":\"getLeafIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leafId\",\"type\":\"uint256\"}],\"name\":\"getTreeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cacheIndexHint\",\"type\":\"uint256\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leavesNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newExitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"newExitDelay\",\"type\":\"uint24\"}],\"name\":\"updateExitTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"triadIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triadNodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[16]\",\"name\":\"pathElements\",\"type\":\"bytes32[16]\"}],\"name\":\"verifyMerkleProof\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pantherprotocol Contributors\",\"details\":\"It is the \\\"version 0\\\" of the Panther Protocol Multi-Asset Shielded Pool (\\\"MASP\\\"). It locks assets (ERC-20, ERC-721 or ERC-1155 tokens) of a user with the `Vault` smart contract and generates UTXO's in the MASP for the user (i.e. builds merkle trees of UTXO's commitments). It can also generate UTX0's with \\\"Panther Reward Points\\\" (aka \\\"PRP\\\", a special unit). To get a PRP UTXO, a user must be given a \\\"grant\\\" booked in the `PrpGrantor` contract. The present contract is assumed to have the \\\"grant processor\\\" role with the latest. This contract does not implement the functionality for spending UTXO's (other than the `exit` described further) and is supposed to be upgraded with the new one. The new contract, the \\\"v.1\\\" of the MASP, is planned to implement spending of UTXO's using zero-knowledge proves. To be upgradable, this contract is assumed to run as an \\\"implementation\\\" for a proxy that DELEGATECALL's the implementation. To protect holders against lost of assets in case this contract is not upgraded, it exposes the `exit` function, through which users may withdraw their locked assets via revealing preimages of commitments.\",\"events\":{\"Change(address,uint256)\":{\"details\":\"A tiny disowned token amount gets locked in the Vault (as a result of imprecise scaling of deposited amounts)\"},\"ExitCommitment(uint256)\":{\"details\":\"New exit commitment registered\"},\"ExitTimesUpdated(uint256,uint256)\":{\"details\":\"Emitted when exit time and/or exit delay updated\"},\"Nullifier(bytes32)\":{\"details\":\"New nullifier has been seen\"}},\"kind\":\"dev\",\"methods\":{\"claimEthOrErc20(address,address,uint256)\":{\"details\":\"The \\\"owner\\\" may call only\"},\"commitToExit(bytes32)\":{\"params\":{\"exitCommitment\":\"Commitment to the UTXO spending key and the recipient address. MUST be equal to keccak256(abi.encode(uint256(privSpendingKey), address(recipient)).\"}},\"constructor\":{\"params\":{\"_owner\":\"Address of the `OWNER` who may call `onlyOwner` methods\",\"assetRegistry\":\"Address of the ZAssetRegistry contract\",\"prpGrantor\":\"Address of the PrpGrantor contract\",\"vault\":\"Address of the Vault contract\"}},\"exit(address,uint256,uint64,uint32,uint256,uint256,bytes32[16],bytes32,uint256)\":{\"details\":\"`cacheIndexHint` needed for the \\\"current\\\" (partially populated) tree only\",\"params\":{\"cacheIndexHint\":\"Index of the `merkleRoot` in the cache of roots, 0 by default\",\"leafId\":\"Id of the leaf with the UTXO commitments in the Merkle Trees\",\"merkleRoot\":\"The root of the Merkle Tree the leaf is a part of\",\"pathElements\":\"Elements of the Merkle proof of inclusion\",\"privSpendingKey\":\"UTXO's Private Spending Key\",\"scaledAmount\":\"Token scaled amount\"}},\"generateDeposits(address[3],uint256[3],uint256[3],(uint256,uint256)[3],uint256[3][3],uint32)\":{\"details\":\"For PRP granted the address ot this contract (proxy) is supposed to be usedcreatedAt must be less (or equal) the network time\",\"params\":{\"amounts\":\"Token amounts (unscaled) to be deposited\",\"createdAt\":\"Optional, if 0 the network time used\",\"pubSpendingKeys\":\"Public Spending Key for every UTXO\",\"secrets\":\"Encrypted opening values for every UTXO\",\"tokenIds\":\"For ERC-721 and ERC-1155 - token ID or subId of the token, 0 for ERC-20\",\"tokens\":\"Address of the token contract for every UTXO\"},\"returns\":{\"leftLeafId\":\"The `leafId` of the first UTXO (leaf) in the batch\"}},\"isKnownRoot(uint256,bytes32,uint256)\":{\"params\":{\"cacheIndexHint\":\"Index of the root in the cache, ignored if 0\"}},\"updateExitTimes(uint32,uint24)\":{\"details\":\"Owner only may calls\"},\"verifyMerkleProof(bytes32,uint256,uint256,bytes32,bytes32[16])\":{\"details\":\"Returns true if a `leaf` can be proved to be a part of a Merkle treedefined by `root`. For this, a `proof` must be provided, containingsibling hashes on the branch from the leaf to the root of the tree.\",\"params\":{\"leaf\":\"- commitment leaf value\",\"merkleRoot\":\"- verify checked to this hash\",\"pathElements\":\"- TREE_DEPTH + 1 elements - c1,c2 & path-elements\",\"triadIndex\":\"- index inside triad = { 0, 1, 2 }\",\"triadNodeIndex\":\"- index of triad hash ( c0,c1,c2 ) in the tree - Triad contract insures its is in range\"}}},\"title\":\"PantherPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ASSET_REGISTRY()\":{\"notice\":\"Address of the ZAssetRegistry contract\"},\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"PRP_GRANTOR()\":{\"notice\":\"Address of the PrpGrantor contract\"},\"VAULT()\":{\"notice\":\"Address of the Vault contract\"},\"claimEthOrErc20(address,address,uint256)\":{\"notice\":\"Withdraw accidentally sent tokens or ETH from this contract\"},\"commitToExit(bytes32)\":{\"notice\":\"Register future `exit` to protect against front-run and DoS. The `exit` is possible only after `exitDelay` since this function call.\"},\"curRoot()\":{\"notice\":\"Returns the root of the current tree and its index in cache\"},\"curTree()\":{\"notice\":\"Returns `treeId` of the current tree\"},\"exitCommitments(bytes32)\":{\"notice\":\"Unused registered commitments to exit\"},\"exitDelay()\":{\"notice\":\"Period (seconds) since `commitToExit` when `exit` opens\"},\"exitTime()\":{\"notice\":\"(UNIX) Time since when the `exit` calls get enabled\"},\"finalRoots(uint256)\":{\"notice\":\"Roots of fully populated trees\"},\"generateDeposits(address[3],uint256[3],uint256[3],(uint256,uint256)[3],uint256[3][3],uint32)\":{\"notice\":\"Transfer assets from the msg.sender to the VAULT and generate UTXOs in the MASP\"},\"getLeafIndex(uint256)\":{\"notice\":\"Returns `leafIndex` (index in the tree) of the given leaf\"},\"getTreeId(uint256)\":{\"notice\":\"Returns `treeId` of the given leaf's tree\"},\"isKnownRoot(uint256,bytes32,uint256)\":{\"notice\":\"Returns `true` if the given root of the given tree is known\"},\"leavesNum()\":{\"notice\":\"Returns the number of leaves inserted in all trees so far\"},\"updateExitTimes(uint32,uint24)\":{\"notice\":\"Update the exit time and the exit delay\"}},\"notice\":\"Multi-Asset Shielded Pool main contract v0\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/PantherPoolV0.sol\":\"PantherPoolV0\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/protocol/PantherPoolV0.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport \\\"./common/Constants.sol\\\";\\nimport \\\"./errMsgs/PantherPoolErrMsgs.sol\\\";\\nimport \\\"./common/ImmutableOwnable.sol\\\";\\nimport \\\"./common/NonReentrant.sol\\\";\\nimport \\\"./common/Types.sol\\\";\\nimport \\\"./common/Utils.sol\\\";\\nimport \\\"./interfaces/IPrpGrantor.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IZAssetsRegistry.sol\\\";\\nimport \\\"./common/Claimable.sol\\\";\\nimport \\\"./pantherPool/AmountConvertor.sol\\\";\\nimport \\\"./pantherPool/CommitmentGenerator.sol\\\";\\nimport \\\"./pantherPool/CommitmentsTrees.sol\\\";\\nimport \\\"./pantherPool/MerkleProofVerifier.sol\\\";\\nimport \\\"./pantherPool/NullifierGenerator.sol\\\";\\nimport \\\"./pantherPool/PubKeyGenerator.sol\\\";\\n\\n/**\\n * @title PantherPool\\n * @author Pantherprotocol Contributors\\n * @notice Multi-Asset Shielded Pool main contract v0\\n * @dev It is the \\\"version 0\\\" of the Panther Protocol Multi-Asset Shielded Pool (\\\"MASP\\\").\\n * It locks assets (ERC-20, ERC-721 or ERC-1155 tokens) of a user with the `Vault` smart\\n * contract and generates UTXO's in the MASP for the user (i.e. builds merkle trees of\\n * UTXO's commitments).\\n * It can also generate UTX0's with \\\"Panther Reward Points\\\" (aka \\\"PRP\\\", a special unit).\\n * To get a PRP UTXO, a user must be given a \\\"grant\\\" booked in the `PrpGrantor` contract.\\n * The present contract is assumed to have the \\\"grant processor\\\" role with the latest.\\n * This contract does not implement the functionality for spending UTXO's (other than the\\n * `exit` described further) and is supposed to be upgraded with the new one.\\n * The new contract, the \\\"v.1\\\" of the MASP, is planned to implement spending of UTXO's\\n * using zero-knowledge proves.\\n * To be upgradable, this contract is assumed to run as an \\\"implementation\\\" for a proxy\\n * that DELEGATECALL's the implementation.\\n * To protect holders against lost of assets in case this contract is not upgraded, it\\n * exposes the `exit` function, through which users may withdraw their locked assets via\\n * revealing preimages of commitments.\\n */\\ncontract PantherPoolV0 is\\n    ImmutableOwnable,\\n    NonReentrant,\\n    Claimable,\\n    CommitmentsTrees,\\n    AmountConvertor,\\n    CommitmentGenerator,\\n    MerkleProofVerifier,\\n    NullifierGenerator,\\n    PubKeyGenerator,\\n    Utils\\n{\\n    // The contract is supposed to run behind a proxy DELEGATECALLing it.\\n    // On upgrades, adjust `__gap` to match changes of the storage layout.\\n    uint256[50] private __gap;\\n\\n    // solhint-disable var-name-mixedcase\\n\\n    /// @notice Address of the ZAssetRegistry contract\\n    address public immutable ASSET_REGISTRY;\\n\\n    /// @notice Address of the Vault contract\\n    address public immutable VAULT;\\n\\n    /// @notice Address of the PrpGrantor contract\\n    address public immutable PRP_GRANTOR;\\n\\n    /// @notice (UNIX) Time since when the `exit` calls get enabled\\n    uint32 public exitTime;\\n\\n    /// @notice Period (seconds) since `commitToExit` when `exit` opens\\n    // Needed to mitigate front-run attacks on `exit`\\n    uint24 public exitDelay;\\n\\n    // (rest of the storage slot) reserved for upgrades\\n    uint200 private _reserved;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    // @notice Seen (i.e. spent) commitment nullifiers\\n    // nullifier hash => spent\\n    mapping(bytes32 => bool) public isSpent;\\n\\n    /// @notice Unused registered commitments to exit\\n    // hash(privSpendKey, recipient) => commitment timestamp\\n    mapping(bytes32 => uint32) public exitCommitments;\\n\\n    /// @dev Emitted when exit time and/or exit delay updated\\n    event ExitTimesUpdated(uint256 newExitTime, uint256 newExitDelay);\\n\\n    /// @dev New nullifier has been seen\\n    event Nullifier(bytes32 nullifier);\\n\\n    /// @dev A tiny disowned token amount gets locked in the Vault\\n    /// (as a result of imprecise scaling of deposited amounts)\\n    event Change(address indexed token, uint256 change);\\n\\n    /// @dev New exit commitment registered\\n    event ExitCommitment(uint256 timestamp);\\n\\n    /// @param _owner Address of the `OWNER` who may call `onlyOwner` methods\\n    /// @param assetRegistry Address of the ZAssetRegistry contract\\n    /// @param vault Address of the Vault contract\\n    /// @param prpGrantor Address of the PrpGrantor contract\\n    constructor(\\n        address _owner,\\n        address assetRegistry,\\n        address vault,\\n        address prpGrantor\\n    ) ImmutableOwnable(_owner) {\\n        require(TRIAD_SIZE == OUT_UTXOs, \\\"E0\\\");\\n\\n        revertZeroAddress(assetRegistry);\\n        revertZeroAddress(vault);\\n        revertZeroAddress(prpGrantor);\\n\\n        // As it runs behind the DELEGATECALL'ing proxy, initialization of\\n        // immutable \\\"vars\\\" only is allowed in the constructor\\n\\n        ASSET_REGISTRY = assetRegistry;\\n        VAULT = vault;\\n        PRP_GRANTOR = prpGrantor;\\n    }\\n\\n    /// @notice Update the exit time and the exit delay\\n    /// @dev Owner only may calls\\n    function updateExitTimes(uint32 newExitTime, uint24 newExitDelay)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            newExitTime >= exitTime &&\\n                newExitTime < MAX_TIMESTAMP &&\\n                newExitDelay != 0,\\n            \\\"E1\\\"\\n        );\\n\\n        exitTime = newExitTime;\\n        exitDelay = newExitDelay;\\n\\n        emit ExitTimesUpdated(uint256(newExitTime), uint256(newExitDelay));\\n    }\\n\\n    /// @notice Transfer assets from the msg.sender to the VAULT and generate UTXOs in the MASP\\n    /// @param tokens Address of the token contract for every UTXO\\n    /// @dev For PRP granted the address ot this contract (proxy) is supposed to be used\\n    /// @param tokenIds For ERC-721 and ERC-1155 - token ID or subId of the token, 0 for ERC-20\\n    /// @param amounts Token amounts (unscaled) to be deposited\\n    /// @param pubSpendingKeys Public Spending Key for every UTXO\\n    /// @param secrets Encrypted opening values for every UTXO\\n    /// @param createdAt Optional, if 0 the network time used\\n    /// @dev createdAt must be less (or equal) the network time\\n    /// @return leftLeafId The `leafId` of the first UTXO (leaf) in the batch\\n    function generateDeposits(\\n        address[OUT_UTXOs] calldata tokens,\\n        uint256[OUT_UTXOs] calldata tokenIds,\\n        uint256[OUT_UTXOs] calldata amounts,\\n        G1Point[OUT_UTXOs] calldata pubSpendingKeys,\\n        uint256[CIPHERTEXT1_WORDS][OUT_UTXOs] calldata secrets,\\n        uint32 createdAt\\n    ) external nonReentrant returns (uint256 leftLeafId) {\\n        require(exitTime > 0, ERR_UNCONFIGURED_EXIT_TIME);\\n\\n        uint32 timestamp = safe32TimeNow();\\n        if (createdAt != 0) {\\n            require(createdAt <= timestamp, ERR_TOO_EARLY_CREATED_AT);\\n            timestamp = createdAt;\\n        }\\n\\n        bytes32[OUT_UTXOs] memory commitments;\\n        bytes[OUT_UTXOs] memory perUtxoData;\\n\\n        for (uint256 utxoIndex = 0; utxoIndex < OUT_UTXOs; utxoIndex++) {\\n            (uint160 zAssetId, uint64 scaledAmount) = _processDepositedAsset(\\n                tokens[utxoIndex],\\n                tokenIds[utxoIndex],\\n                amounts[utxoIndex]\\n            );\\n\\n            if (scaledAmount == 0) {\\n                // At least the 1st deposited amount shall be non-zero\\n                require(utxoIndex != 0, ERR_ZERO_DEPOSIT);\\n\\n                // the zero UTXO\\n                commitments[utxoIndex] = ZERO_VALUE;\\n                perUtxoData[utxoIndex] = abi.encodePacked(UTXO_DATA_TYPE_ZERO);\\n            } else {\\n                // non-zero UTXO\\n                commitments[utxoIndex] = generateCommitment(\\n                    pubSpendingKeys[utxoIndex].x,\\n                    pubSpendingKeys[utxoIndex].y,\\n                    scaledAmount,\\n                    zAssetId,\\n                    timestamp\\n                );\\n\\n                uint256 tokenAndAmount = (uint256(uint160(tokens[utxoIndex])) <<\\n                    96) | uint256(scaledAmount);\\n                perUtxoData[utxoIndex] = abi.encodePacked(\\n                    uint8(UTXO_DATA_TYPE1),\\n                    secrets[utxoIndex],\\n                    tokenAndAmount,\\n                    tokenIds[utxoIndex]\\n                );\\n            }\\n        }\\n\\n        leftLeafId = addAndEmitCommitments(commitments, perUtxoData, timestamp);\\n    }\\n\\n    /// @notice Register future `exit` to protect against front-run and DoS.\\n    /// The `exit` is possible only after `exitDelay` since this function call.\\n    /// @param exitCommitment Commitment to the UTXO spending key and the recipient address.\\n    /// MUST be equal to keccak256(abi.encode(uint256(privSpendingKey), address(recipient)).\\n    function commitToExit(bytes32 exitCommitment) external {\\n        require(\\n            exitCommitments[exitCommitment] == uint32(0),\\n            ERR_EXITCOMMIT_EXISTS\\n        );\\n        uint32 timestamp = safe32TimeNow();\\n        exitCommitments[exitCommitment] = timestamp;\\n        emit ExitCommitment(timestamp);\\n    }\\n\\n    /// @notice Spend an UTXO in the MASP and withdraw the asset from the Vault to the msg.sender.\\n    /// This function call must be registered in advance with `commitToExit`.\\n    /// @param token Address of the token contract\\n    /// @param subId '_tokenId'/'_id' for ERC-721/1155, 0 for the \\\"default\\\" zAsset of an ERC-20 token,\\n    // or `subId` for an \\\"alternative\\\" zAsset of an ERC-20 (see ZAssetRegistry.sol for details)\\n    /// @param scaledAmount Token scaled amount\\n    /// @param privSpendingKey UTXO's Private Spending Key\\n    /// @param leafId Id of the leaf with the UTXO commitments in the Merkle Trees\\n    /// @param pathElements Elements of the Merkle proof of inclusion\\n    /// @param merkleRoot The root of the Merkle Tree the leaf is a part of\\n    /// @param cacheIndexHint Index of the `merkleRoot` in the cache of roots, 0 by default\\n    /// @dev `cacheIndexHint` needed for the \\\"current\\\" (partially populated) tree only\\n    function exit(\\n        address token,\\n        uint256 subId,\\n        uint64 scaledAmount,\\n        uint32 creationTime,\\n        uint256 privSpendingKey,\\n        uint256 leafId,\\n        bytes32[TREE_DEPTH + 1] calldata pathElements,\\n        bytes32 merkleRoot,\\n        uint256 cacheIndexHint\\n    ) external nonReentrant {\\n        require(safe32TimeNow() >= exitTime, ERR_TOO_EARLY_EXIT);\\n        _verifyExitCommitment(privSpendingKey, msg.sender);\\n\\n        {\\n            bytes32 nullifier = generateNullifier(privSpendingKey, leafId);\\n            require(!isSpent[nullifier], ERR_SPENT_NULLIFIER);\\n            isSpent[nullifier] = true;\\n            emit Nullifier(nullifier);\\n        }\\n        require(\\n            isKnownRoot(getTreeId(leafId), merkleRoot, cacheIndexHint),\\n            ERR_UNKNOWN_MERKLE_ROOT\\n        );\\n\\n        ZAsset memory asset;\\n        uint256 _tokenId;\\n        {\\n            bytes32 commitment;\\n            {\\n                uint160 zAssetId;\\n                {\\n                    (zAssetId, _tokenId, , asset) = IZAssetsRegistry(\\n                        ASSET_REGISTRY\\n                    ).getZAssetAndIds(token, subId);\\n                    require(asset.status == zASSET_ENABLED, ERR_WRONG_ASSET);\\n                }\\n                G1Point memory pubSpendingKey = generatePubSpendingKey(\\n                    privSpendingKey\\n                );\\n                commitment = generateCommitment(\\n                    pubSpendingKey.x,\\n                    pubSpendingKey.y,\\n                    scaledAmount,\\n                    zAssetId,\\n                    creationTime\\n                );\\n            }\\n            verifyMerkleProof(\\n                merkleRoot,\\n                _getTriadIndex(leafId),\\n                _getTriadNodeIndex(leafId),\\n                commitment,\\n                pathElements\\n            );\\n        }\\n\\n        uint96 amount = _unscaleAmount(scaledAmount, asset.scale);\\n        IVault(VAULT).unlockAsset(\\n            LockData(asset.tokenType, token, _tokenId, msg.sender, amount)\\n        );\\n    }\\n\\n    /// @notice Withdraw accidentally sent tokens or ETH from this contract\\n    /// @dev The \\\"owner\\\" may call only\\n    function claimEthOrErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner nonReentrant {\\n        _claimEthOrErc20(token, to, amount);\\n    }\\n\\n    /// Internal and private functions follow\\n\\n    // Declared `internal` rather than `private` to ease testing\\n    function _processDepositedAsset(\\n        address token,\\n        uint256 subId,\\n        uint256 amount\\n    ) internal returns (uint160 zAssetId, uint64 scaledAmount) {\\n        // Do nothing if it's the \\\"zero\\\" (or \\\"dummy\\\") deposit\\n        if (amount == 0) {\\n            // Both token and subId must be zeros for the \\\"zero\\\" deposit\\n            require(token == address(0) && subId == 0, ERR_WRONG_DEPOSIT);\\n            return (0, 0);\\n        }\\n        // amount can't be zero here and further\\n\\n        // Use a PRP grant, if it's a \\\"deposit\\\" in PRPs\\n        if (token == PRP_VIRTUAL_CONTRACT) {\\n            require(subId == 0, ERR_WRONG_PRP_SUBID);\\n            // Check amount is within the limit (no amount scaling for PRPs)\\n            uint64 _sanitizedAmount = _sanitizeScaledAmount(amount);\\n            // No reentrancy guard needed for the trusted contract call\\n            IPrpGrantor(PRP_GRANTOR).redeemGrant(msg.sender, amount);\\n            return (PRP_ZASSET_ID, _sanitizedAmount);\\n        }\\n\\n        // At this point, a non-zero deposit of a real asset (token) expected\\n        uint256 _tokenId;\\n        ZAsset memory asset;\\n        (zAssetId, _tokenId, , asset) = IZAssetsRegistry(ASSET_REGISTRY)\\n            .getZAssetAndIds(token, subId);\\n        require(asset.status == zASSET_ENABLED, ERR_WRONG_ASSET);\\n\\n        // Scale amount, if asset.scale provides for it (ERC-20 only)\\n        uint256 change;\\n        (scaledAmount, change) = _scaleAmount(amount, asset.scale);\\n\\n        // The `change` will remain locked in the Vault until it's claimed\\n        // (when and if future upgrades implement change claiming)\\n        if (change > 0) emit Change(token, change);\\n\\n        IVault(VAULT).lockAsset(\\n            LockData(\\n                asset.tokenType,\\n                asset.token,\\n                _tokenId,\\n                msg.sender,\\n                uint96(amount)\\n            )\\n        );\\n\\n        return (zAssetId, scaledAmount);\\n    }\\n\\n    function _verifyExitCommitment(uint256 privSpendingKey, address recipient)\\n        internal\\n    {\\n        bytes32 commitment = keccak256(abi.encode(privSpendingKey, recipient));\\n\\n        uint32 commitmentTime = exitCommitments[commitment];\\n        require(commitmentTime != uint32(0), ERR_EXITCOMMIT_MISSING);\\n\\n        uint256 allowedTime = uint256(commitmentTime) + uint256(exitDelay);\\n        require(timeNow() > allowedTime, ERR_EXITCOMMIT_LOCKED);\\n\\n        // Let's gain some gas back\\n        exitCommitments[commitment] = uint32(0);\\n        // No extra event emitted as spent UTXO and withdrawal events will fire\\n    }\\n}\\n\",\"keccak256\":\"0x4d63fe7691351118f27b1f179f5343f398885fafa6df153273469227845b0f6e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/common/Claimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransferHelper.sol\\\";\\n\\n/**\\n * @title Claimable\\n * @notice It withdraws accidentally sent tokens or ETH from this contract.\\n */\\nabstract contract Claimable {\\n    /// @dev Withdraws ERC20 tokens from this contract\\n    /// (take care of reentrancy attack risk mitigation)\\n    function _claimEthOrErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (token == address(0)) {\\n            // withdraw ETH\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else {\\n            // withdraw ERC20\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x10c4b249e1ce086934d7961badc29f9a609673b69bd9d84e3a5f94870306eca4\",\"license\":\"MIT\"},\"contracts/protocol/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\n// Constants\\n\\nuint256 constant IN_PRP_UTXOs = 1;\\nuint256 constant IN_UTXOs = 2 + IN_PRP_UTXOs;\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\n\\n// Number of 32-bit words in the `secrets` of the `NewCommitment` events\\nuint256 constant UTXO_SECRETS = 4;\\n// Number of 32-bit words in the ciphertext in the \\\"type 0\\\" message\\nuint256 constant CIPERTEXT0_WORDS = 4;\\n// Number of 32-bit words in the ciphertext in the \\\"type 1\\\" message\\nuint256 constant CIPHERTEXT1_WORDS = 3;\\n\\n// For overflow protection and circuits optimization\\n// (must be less than the FIELD_SIZE)\\nuint256 constant MAX_EXT_AMOUNT = 2**96;\\nuint256 constant MAX_IN_CIRCUIT_AMOUNT = 2**64;\\nuint256 constant MAX_TIMESTAMP = 2**32;\\nuint256 constant MAX_ZASSET_ID = 2**160;\\n\\n// Token types\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant ERC20_TOKEN_TYPE = 0x00;\\nuint8 constant ERC721_TOKEN_TYPE = 0x10;\\nuint8 constant ERC1155_TOKEN_TYPE = 0x11;\\n// defined for every tokenId rather than for all tokens on the contract\\n// (unsupported in the V0 and V1 of the MASP)\\nuint8 constant BY_TOKENID_TOKEN_TYPE = 0xFF;\\n\\n// ZAsset statuses\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant zASSET_ENABLED = 0x01;\\nuint8 constant zASSET_DISABLED = 0x02;\\nuint8 constant zASSET_UNKNOWN = 0x00;\\n\\n// UTXO data (opening values - encrypted and public) formats\\nuint8 constant UTXO_DATA_TYPE_ZERO = 0xA0; // no data (for zero UTXO)\\nuint8 constant UTXO_DATA_TYPE0 = 0xAA;\\nuint8 constant UTXO_DATA_TYPE1 = 0xAB;\\n\\n// Address of the \\\"virtual token contract\\\" for PRPs.\\n// \\\"Virtual\\\" since PRP is NOT a token, and it does not have a token contract.\\n// Other contracts must use it to identify PRPs, whenever needed.\\n// Calculated as: keccak256('Privacy Reward Point') >> 96.\\naddress constant PRP_VIRTUAL_CONTRACT = 0x1afa2212970b809aE15D51AF00C502D5c8eB3bAf;\\n// zAssetId (i.e. \\\"token\\\" in the UTXO preimage) of PRPs\\n// Other contracts must use it to encode/decode PRPs in UTXOs.\\n// Calculated as:\\n// uint160(\\n//   uint256(keccak256(abi.encode(uint256(PRP_VIRTUAL_CONTRACT), uint256(0)))) >> 96\\n// )`\\nuint160 constant PRP_ZASSET_ID = 0x000a1ebe17885f8603834b4c02054ce84cedf8756e;\\n\",\"keccak256\":\"0x117c3e0f0ae2314595c8fd1f721a95dc857fbbf6a8839307816f2d515f33bc0f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x55b8857a357a030e7c065e9f34672df5ea8731fd23b825ddacc0f558c6ec9c90\",\"license\":\"MIT\"},\"contracts/protocol/common/NonReentrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title NonReentrant\\n * @notice It provides reentrancy guard.\\n * The code borrowed from openzeppelin-contracts.\\n * Unlike original, this version requires neither `constructor` no `init` call.\\n */\\nabstract contract NonReentrant {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _reentrancyStatus;\\n\\n    modifier nonReentrant() {\\n        // Being called right after deployment, when _reentrancyStatus is 0 ,\\n        // it does not revert (which is expected behaviour)\\n        require(_reentrancyStatus != _ENTERED, \\\"claimErc20: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _reentrancyStatus = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _reentrancyStatus = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x09d0bfb26d15789a68f4a880a582d6af2de0d993bc2e9c85102e0b241a635ad3\",\"license\":\"MIT\"},\"contracts/protocol/common/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable compiler-version\\npragma solidity >=0.6.0;\\n\\n/// @title TransferHelper library\\n/// @dev Helper methods for interacting with ERC20, ERC721, ERC1155 tokens and sending ETH\\n/// Based on the Uniswap/solidity-lib/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n    /// @dev Approve the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256('approve(address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens from caller to `to`.\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256('transfer(address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens on behalf of `from` to `to`.\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256('transferFrom(address,address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        _requireTransferSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer an ERC721 token with id of `tokenId` on behalf of `from` to `to`.\\n    function erc721SafeTransferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal {\\n        // bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x42842e0e, from, to, tokenId)\\n        );\\n        _requireTransferSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `amount` ERC1155 token with id of `tokenId` on behalf of `from` to `to`.\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal {\\n        // bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xf242432a, from, to, tokenId, amount, _data)\\n        );\\n        _requireTransferSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` Ether from caller to `to`.\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\"\\n        );\\n    }\\n\\n    function _requireTransferSuccess(bool success, bytes memory res)\\n        private\\n        pure\\n    {\\n        require(\\n            success && (res.length == 0 || abi.decode(res, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfb5b6ab3868af5c3b9c1e44ff5d41b7e81fb1adb1dbf73c57621d9db7c0f48c0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/protocol/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\n// Encoding of field elements is: X[0] * z + X[1]\\nstruct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n}\\n\\n// Verification key for SNARK\\nstruct VerifyingKey {\\n    G1Point alpha1;\\n    G2Point beta2;\\n    G2Point gamma2;\\n    G2Point delta2;\\n    G1Point[2] ic;\\n}\\n\\nstruct SnarkProof {\\n    G1Point a;\\n    G2Point b;\\n    G1Point c;\\n}\\n\\nstruct PluginData {\\n    address contractAddress;\\n    bytes callData;\\n}\\n\\nstruct ElGamalCiphertext {\\n    G1Point c1;\\n    G1Point c2;\\n}\\n\\n// For MASP V0 and V1\\nstruct ZAsset {\\n    // reserved (for networkId, tokenIdPolicy. etc..)\\n    uint64 _unused;\\n    // 0x00 by default\\n    uint8 version;\\n    // Refer to Constants.sol\\n    uint8 status;\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // 0x00 - no scaling\\n    uint8 scale;\\n    // token contract address\\n    address token;\\n}\\n\\nstruct LockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint96 extAmount;\\n}\\n\",\"keccak256\":\"0x1bff3f08bf97b849cff902cc0883e3436b30b87415d90a1542694534418a4d39\",\"license\":\"MIT\"},\"contracts/protocol/common/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nabstract contract Utils {\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    function revertZeroAddress(address account) internal pure {\\n        require(account != address(0), \\\"UNEXPECTED_ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x29c03670b1b50730f502cb5275431fcc3b42356bdfff4fdd478a20360e688533\",\"license\":\"MIT\"},\"contracts/protocol/crypto/BabyJubJub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"../common/Types.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n\\nlibrary BabyJubJub {\\n    // Curve parameters\\n    // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\\n    // A = 168700\\n    uint256 public constant A = 0x292FC;\\n    // D = 168696\\n    uint256 public constant D = 0x292F8;\\n    // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n    uint256 public constant Q =\\n        0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\\n\\n    // @dev Base point generates the subgroup of points P of Baby Jubjub satisfying l * P = O.\\n    // That is, it generates the set of points of order l and origin O.\\n    uint256 public constant BASE8_X =\\n        5299619240641551281634865583518297030282874472190772894086521144482721001553;\\n    uint256 public constant BASE8_Y =\\n        16950150798460657717958625567821834550301663161624707787222815936182638968203;\\n\\n    /**\\n     * @dev Add 2 points on baby jubjub curve\\n     * Formulae for adding 2 points on a twisted Edwards curve:\\n     * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\\n     * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\\n     */\\n    function pointAdd(G1Point memory g1, G1Point memory g2)\\n        internal\\n        view\\n        returns (G1Point memory)\\n    {\\n        uint256 x3;\\n        uint256 y3;\\n        if (g1.x == 0 && g1.y == 0) {\\n            return G1Point(x3, y3);\\n        }\\n\\n        if (g2.x == 0 && g1.y == 0) {\\n            return G1Point(x3, y3);\\n        }\\n\\n        uint256 x1x2 = mulmod(g1.x, g2.x, Q);\\n        uint256 y1y2 = mulmod(g1.y, g2.y, Q);\\n        uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\\n        uint256 x3Num = addmod(mulmod(g1.x, g2.y, Q), mulmod(g1.y, g2.x, Q), Q);\\n        uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\\n\\n        x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\\n        y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\\n        return G1Point(x3, y3);\\n    }\\n\\n    /**\\n     * @dev Perform modular subtraction\\n     */\\n    function submod(\\n        uint256 _a,\\n        uint256 _b,\\n        uint256 _mod\\n    ) internal pure returns (uint256) {\\n        uint256 aNN = _a;\\n\\n        if (_a <= _b) {\\n            aNN += _mod;\\n        }\\n\\n        return addmod(aNN - _b, 0, _mod);\\n    }\\n\\n    /**\\n     * @dev Compute modular inverse of a number\\n     */\\n    function inverse(uint256 _a) internal view returns (uint256) {\\n        // We can use Euler's theorem instead of the extended Euclidean algorithm\\n        // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\\n        return expmod(_a, Q - 2, Q);\\n    }\\n\\n    /**\\n     * @dev Helper function to call the bigModExp precompile\\n     */\\n    function expmod(\\n        uint256 _b,\\n        uint256 _e,\\n        uint256 _m\\n    ) internal view returns (uint256 o) {\\n        assembly {\\n            let memPtr := mload(0x40)\\n            mstore(memPtr, 0x20) // Length of base _b\\n            mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\\n            mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\\n            mstore(add(memPtr, 0x60), _b) // Base _b\\n            mstore(add(memPtr, 0x80), _e) // Exponent _e\\n            mstore(add(memPtr, 0xa0), _m) // Modulus _m\\n\\n            // The bigModExp precompile is at 0x05\\n            let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                o := mload(memPtr)\\n            }\\n        }\\n    }\\n\\n    function mulPointEscalar(G1Point memory point, uint256 scalar)\\n        internal\\n        view\\n        returns (G1Point memory r)\\n    {\\n        r.x = 0;\\n        r.y = 1;\\n\\n        uint256 rem = scalar;\\n        G1Point memory exp = point;\\n\\n        while (rem != uint256(0)) {\\n            if ((rem & 1) == 1) {\\n                r = pointAdd(r, exp);\\n            }\\n            exp = pointAdd(exp, exp);\\n            rem = rem >> 1;\\n        }\\n        r.x = r.x % Q;\\n        r.y = r.y % Q;\\n\\n        return r;\\n    }\\n}\\n\",\"keccak256\":\"0xa232f90168e79229f858dcd2dbb6cbda80f291857d551c9dc031d9f554b799a1\",\"license\":\"MIT\"},\"contracts/protocol/crypto/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// This is a stub to keep solc happy; the actual code is generated\\n// using poseidon_gencontract.js from circomlibjs.\\n\\nlibrary PoseidonT3 {\\n    function poseidon(bytes32[2] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT4 {\\n    function poseidon(bytes32[3] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(bytes32[5] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a5ca613abce026bab567bedd977e7b3bec23a05f5bb9d03716cfd8679bb864\",\"license\":\"MIT\"},\"contracts/protocol/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable var-name-mixedcase\\npragma solidity ^0.8.4;\\n\\n// @dev Order of alt_bn128 and the field prime of Baby Jubjub and Poseidon hash\\nuint256 constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n// @dev Field prime of alt_bn128\\nuint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\",\"keccak256\":\"0xca9f6b279dc45071437b3d122fd1e99a2945ad0e5ef210d5c8099ad6c960e0db\",\"license\":\"MIT\"},\"contracts/protocol/errMsgs/PantherPoolErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\n// CommitmentGenerator contract\\nstring constant ERR_TOO_LARGE_PUBKEY = \\\"CG:E1\\\";\\n\\n// CommitmentsTrees contract\\nstring constant ERR_TOO_LARGE_COMMITMENTS = \\\"CT:E1\\\"; // commitment exceeds maximum scalar field size\\n\\n// MerkleProofVerifier\\nstring constant ERR_MERKLE_PROOF_VERIFICATION_FAILED = \\\"MP:E1\\\";\\nstring constant ERR_TRIAD_INDEX_MIN_VALUE = \\\"MP:E2\\\";\\nstring constant ERR_TRIAD_INDEX_MAX_VALUE = \\\"MP:E3\\\";\\n\\n// TriadIncrementalMerkleTrees contract\\nstring constant ERR_ZERO_ROOT = \\\"TT:E1\\\"; // merkle tree root can not be zero\\n\\n// PantherPool contract\\nstring constant ERR_DEPOSIT_OVER_LIMIT = \\\"PP:E1\\\";\\nstring constant ERR_DEPOSIT_FROM_ZERO_ADDRESS = \\\"PP:E2\\\";\\nstring constant ERR_EXITCOMMIT_EXISTS = \\\"PP:E32\\\";\\nstring constant ERR_EXITCOMMIT_LOCKED = \\\"PP:E33\\\";\\nstring constant ERR_EXITCOMMIT_MISSING = \\\"PP:E34\\\";\\nstring constant ERR_EXPIRED_TX_TIME = \\\"PP:E3\\\";\\nstring constant ERR_INVALID_JOIN_INPUT = \\\"PP:E4\\\";\\nstring constant ERR_INVALID_PROOF = \\\"PP:E5\\\";\\nstring constant ERR_MISMATCHED_ARR_LENGTH = \\\"PP:E6\\\";\\nstring constant ERR_PLUGIN_FAILURE = \\\"PP:E7\\\";\\nstring constant ERR_SPENT_NULLIFIER = \\\"PP:E8\\\";\\nstring constant ERR_TOO_EARLY_CREATED_AT = \\\"PP:E9\\\";\\nstring constant ERR_TOO_EARLY_EXIT = \\\"PP:E30\\\";\\nstring constant ERR_TOO_LARGE_AMOUNT = \\\"PP:E10\\\";\\nstring constant ERR_TOO_LARGE_COMMITMENT = \\\"PP:E11\\\";\\nstring constant ERR_TOO_LARGE_NULLIFIER = \\\"PP:E12\\\";\\nstring constant ERR_TOO_LARGE_LEAFID = \\\"PP:E27\\\";\\nstring constant ERR_TOO_LARGE_PRIVKEY = \\\"PP:E28\\\";\\nstring constant ERR_TOO_LARGE_ROOT = \\\"PP:E13\\\";\\nstring constant ERR_TOO_LARGE_SCALED_AMOUNT = \\\"PP:E26\\\";\\nstring constant ERR_TOO_LARGE_TIME = \\\"PP:E14\\\";\\nstring constant ERR_UNCONFIGURED_EXIT_TIME = \\\"PP:E31\\\";\\nstring constant ERR_UNKNOWN_MERKLE_ROOT = \\\"PP:E16\\\";\\nstring constant ERR_WITHDRAW_OVER_LIMIT = \\\"PP:E17\\\";\\nstring constant ERR_WITHDRAW_TO_ZERO_ADDRESS = \\\"PP:E18\\\";\\nstring constant ERR_WRONG_ASSET = \\\"PP:E19\\\";\\nstring constant ERR_WRONG_DEPOSIT = \\\"PP:E29\\\";\\nstring constant ERR_WRONG_PRP_SUBID = \\\"PP:E25\\\";\\nstring constant ERR_ZERO_DEPOSIT = \\\"PP:E21\\\";\\nstring constant ERR_ZERO_FEE_PAYER = \\\"PP:E22\\\";\\nstring constant ERR_ZERO_TOKEN_EXPECTED = \\\"PP:E23\\\";\\nstring constant ERR_ZERO_TOKEN_UNEXPECTED = \\\"PP:E24\\\";\\n\",\"keccak256\":\"0x5625f4eb3f841311156aa37449104740fa0c6913565f91b88e81db53de2a9fdf\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IPrpGrantor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IPrpGrantor\\n * @notice Interface for the `PrpGrantor` contract\\n * @dev Excluding `onlyOwner` functions\\n */\\ninterface IPrpGrantor {\\n    /// @notice Return the address of the \\\"grant processor\\\"\\n    /// @dev This account only is authorized to call `redeemGrant`\\n    function grantProcessor() external view returns (address);\\n\\n    /// @notice Returns the total amount (in PRPs) of grants issued so far\\n    /// (excluding burnt grants)\\n    function totalGrantsIssued() external returns (uint256);\\n\\n    /// @notice Returns the total amount (in PRPs) of grants redeemed so far\\n    function totalGrantsRedeemed() external returns (uint256);\\n\\n    /// @notice Returns the total amount (in PRPs) of unused grants for the given grantee\\n    function getUnusedGrantAmount(address grantee)\\n        external\\n        view\\n        returns (uint256 prpAmount);\\n\\n    /// @notice Returns the PRP amount of the grant specified by a given curator and type\\n    function getGrantAmount(address curator, bytes4 grantType)\\n        external\\n        view\\n        returns (uint256 prpAmount);\\n\\n    /// @notice Increase the amount of \\\"unused\\\" grants for the given grantee, by the amount\\n    /// defined for the given \\\"grant type\\\"\\n    /// @return prpAmount The amount (in PRPs) of the grant\\n    /// @dev An authorized \\\"curator\\\" may call with the enabled (added) \\\"grant type\\\" only\\n    function issueGrant(address grantee, bytes4 grantType)\\n        external\\n        returns (uint256 prpAmount);\\n\\n    /// @notice Increase the amount of \\\"unused\\\" grants for the given grantee, by the amount\\n    /// specified.\\n    /// @dev Only the owner may call.\\n    function issueOwnerGrant(address grantee, uint256 prpAmount) external;\\n\\n    /// @notice Burn unused grants for the msg.sender in the specified PRP amount\\n    function burnGrant(uint256 prpAmount) external;\\n\\n    /// @notice Account for redemption of grants in the given amount for the given grantee\\n    /// @dev Only the account returned by `grantProcessor()` may call\\n    function redeemGrant(address grantee, uint256 prpAmount) external;\\n\\n    /// @notice PRP grant issued\\n    event PrpGrantIssued(\\n        bytes4 indexed grantType,\\n        address grantee,\\n        uint256 prpAmount\\n    );\\n\\n    /// @notice PRP grant redeemed (used)\\n    event PrpGrantRedeemed(address grantee, uint256 prpAmount);\\n\\n    /// @notice PRP grant burnt\\n    event PrpGrantBurnt(address grantee, uint256 prpAmount);\\n\\n    /// @notice New grant type added\\n    event PrpGrantEnabled(address curator, bytes4 grantType, uint256 prpAmount);\\n\\n    /// @notice Existing grant type disabled\\n    event PrpGrantDisabled(address curator, bytes4 grantType);\\n}\\n\",\"keccak256\":\"0x03ef1674fe646b0ab056ce41d409e163147d245b66464878ca0dc593a11c0132\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IRootsHistory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\ninterface IRootsHistory {\\n    /// @notice Returns `true` if the given root of the given tree is known\\n    /// @param cacheIndexHint Index of the root in the cache, ignored if 0\\n    function isKnownRoot(\\n        uint256 treeId,\\n        bytes32 root,\\n        uint256 cacheIndexHint\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xef5da9053c9292be7a4ff2932e2d69c020408ee3389592f8ec7ec547edee91cf\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport { LockData } from \\\"../common/Types.sol\\\";\\n\\ninterface IVault {\\n    function lockAsset(LockData calldata data) external;\\n\\n    function unlockAsset(LockData memory data) external;\\n\\n    event Locked(LockData data);\\n    event Unlocked(LockData data);\\n}\\n\",\"keccak256\":\"0xaf0ef1be54057eaeb6aa53f20fe4fdee591f29a660c78d87c45222909bba59ed\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IZAssetsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport { ZAsset } from \\\"../common/Types.sol\\\";\\n\\ninterface IZAssetsRegistry {\\n    /// @dev declared as view rather than pure to allow for protocol changes\\n    function getZAssetId(address token, uint256 subId)\\n        external\\n        view\\n        returns (uint160);\\n\\n    function getZAssetAndIds(address token, uint256 subId)\\n        external\\n        view\\n        returns (\\n            uint160 zAssetId,\\n            uint256 _tokenId,\\n            uint160 zAssetRecId,\\n            ZAsset memory asset\\n        );\\n\\n    function getZAsset(uint160 zAssetRecId)\\n        external\\n        view\\n        returns (ZAsset memory asset);\\n\\n    function isZAssetWhitelisted(uint160 zAssetRecId)\\n        external\\n        view\\n        returns (bool);\\n\\n    event AssetAdded(uint160 indexed zAssetRecId, ZAsset asset);\\n    event AssetStatusChanged(\\n        uint160 indexed zAssetRecId,\\n        uint8 newStatus,\\n        uint8 oldStatus\\n    );\\n}\\n\",\"keccak256\":\"0x8cb74e5b2c49117d5ff333d794c7d1a424fb2b5c0b9e241fe846c114c51b70ab\",\"license\":\"MIT\"},\"contracts/protocol/pantherPool/AmountConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport { MAX_EXT_AMOUNT, MAX_IN_CIRCUIT_AMOUNT } from \\\"../common/Constants.sol\\\";\\nimport { ERR_TOO_LARGE_AMOUNT, ERR_TOO_LARGE_SCALED_AMOUNT } from \\\"../errMsgs/PantherPoolErrMsgs.sol\\\";\\n\\n/**\\n * @title AmountConvertor\\n * @author Pantherprotocol Contributors\\n * @notice Methods for scaling amounts for computations within/outside the\\n * Panther Protocol Multi-Asset Shielded Pool (aka \\\"MASP\\\")\\n */\\nabstract contract AmountConvertor {\\n    // \\\"Scaled amounts\\\" - amounts ZK-circuits of the MASP operate with\\n    // \\\"Unscaled amounts\\\" - amounts token contracts operate with\\n    // Scaling is relevant for fungible tokens only - for ERC-721/ERC-1155\\n    // tokens, scaled and unscaled amounts MUST be equal. For some ERC-20\\n    // tokens, the \\\"scaling factor\\\" MAY be 1:1, i.e. scaled and unscaled\\n    // amounts are equal.\\n\\n    // Conversion from the unscaled amount (aka amount) to the scaled one.\\n    // Returns the scaled amount and the reminder.\\n    function _scaleAmount(uint256 amount, uint8 scale)\\n        internal\\n        pure\\n        returns (uint64 scaledAmount, uint256 change)\\n    {\\n        uint256 _scaledAmount;\\n        if (scale == 0) {\\n            // No scaling and no change for zero `scale`\\n            _scaledAmount = amount;\\n            change = 0;\\n        } else {\\n            unchecked {\\n                uint256 factor = _getScalingFactor(scale);\\n                // divider can't be zero\\n                _scaledAmount = amount / factor;\\n                // `restoredAmount` can not exceed the `amount`\\n                uint256 restoredAmount = _scaledAmount * factor;\\n                change = amount - restoredAmount;\\n            }\\n        }\\n        scaledAmount = _sanitizeScaledAmount(_scaledAmount);\\n    }\\n\\n    // Conversion from the scaled amount to unscaled one.\\n    // Returns the unscaled amount.\\n    function _unscaleAmount(uint64 scaledAmount, uint8 scale)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        uint256 amount = scale == 0\\n            ? scaledAmount // no scaling\\n            : uint256(scaledAmount) * _getScalingFactor(scale);\\n        return _sanitizeAmount(amount);\\n    }\\n\\n    function _sanitizeAmount(uint256 amount) internal pure returns (uint96) {\\n        require(amount < MAX_EXT_AMOUNT, ERR_TOO_LARGE_AMOUNT);\\n        return uint96(amount);\\n    }\\n\\n    function _sanitizeScaledAmount(uint256 scaledAmount)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        require(\\n            scaledAmount < MAX_IN_CIRCUIT_AMOUNT,\\n            ERR_TOO_LARGE_SCALED_AMOUNT\\n        );\\n        return uint64(scaledAmount);\\n    }\\n\\n    /// Private functions follow\\n\\n    // Note: implementation accepts 0..255 values for nonZeroScale\\n    // It is responsibility of the caller check it is indeed less than 255 since 10^255 overflows uint256\\n    // This overflow check not implemented here since caller will implement it in upper level\\n    function _getScalingFactor(uint8 nonZeroScale)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return 10**nonZeroScale;\\n    }\\n}\\n\",\"keccak256\":\"0x3a0f49fc8f38e8ad86270fbe9ba345abd2356d8cdf618a412cce0663edc0c2ac\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherPool/CommitmentGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport { PoseidonT4 } from \\\"../crypto/Poseidon.sol\\\";\\n\\nimport { ERR_TOO_LARGE_PUBKEY } from \\\"../errMsgs/PantherPoolErrMsgs.sol\\\";\\nimport { FIELD_SIZE } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\nabstract contract CommitmentGenerator {\\n    /// Generate UTXOs, these UTXOs will be used later\\n    /// @param pubSpendingKeyX Public Spending Key for every UTXO - 256 bit - used in circom\\n    /// @param pubSpendingKeyY Public Spending Key for every UTXO - 256 bit - used in circom\\n    /// @param scaledAmount 64 bit size - used in circom\\n    /// @param zAssetId 160 bit size - used in circom\\n    /// @param creationTime 32 bit size - used in circom\\n    function generateCommitment(\\n        uint256 pubSpendingKeyX,\\n        uint256 pubSpendingKeyY,\\n        uint64 scaledAmount,\\n        uint160 zAssetId,\\n        uint32 creationTime\\n    ) internal pure returns (bytes32 commitment) {\\n        require(\\n            pubSpendingKeyX <= FIELD_SIZE && pubSpendingKeyY <= FIELD_SIZE,\\n            ERR_TOO_LARGE_PUBKEY\\n        );\\n        // Being 160 bits and less, other input params can't exceed FIELD_SIZE\\n        commitment = PoseidonT4.poseidon(\\n            [\\n                bytes32(pubSpendingKeyX),\\n                bytes32(pubSpendingKeyY),\\n                bytes32(\\n                    (uint256(scaledAmount) << 192) |\\n                        (uint256(zAssetId) << 32) |\\n                        uint256(creationTime)\\n                )\\n                //bytes32(uint256(scaledAmount)),\\n                //bytes32(uint256(zAssetId)),\\n                //bytes32(uint256(creationTime))\\n            ]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x18a3e73d7804cda5da5d4cb3636cc181bcad5186a7719c97eea80704f6f84932\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherPool/CommitmentsTrees.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport \\\"../triadTree/TriadIncrementalMerkleTrees.sol\\\";\\nimport { OUT_UTXOs, UTXO_SECRETS } from \\\"../common/Constants.sol\\\";\\nimport { ERR_TOO_LARGE_COMMITMENTS } from \\\"../errMsgs/PantherPoolErrMsgs.sol\\\";\\n\\n/**\\n * @title CommitmentsTrees\\n * @author Pantherprotocol Contributors\\n * @notice Incremental Merkle trees of commitments for the `PantherPool` contract\\n */\\nabstract contract CommitmentsTrees is TriadIncrementalMerkleTrees {\\n    /**\\n     * @dev Emitted on a new batch of Commitments\\n     * @param leftLeafId The `leafId` of the first leaf in the batch\\n     * @dev `leafId = leftLeafId + 1` for the 2nd leaf (`leftLeafId + 2` for the 3rd leaf)\\n     * @param commitments Commitments hashes\\n     * @param utxoData opening values (encrypted and public) for UTXOs\\n     */\\n    event NewCommitments(\\n        uint256 indexed leftLeafId,\\n        uint256 creationTime,\\n        bytes32[OUT_UTXOs] commitments,\\n        bytes utxoData\\n    );\\n\\n    /**\\n     * @notice Adds commitments to merkle tree(s) and emits events\\n     * @param commitments Commitments (leaves hashes) to be inserted into merkle tree(s)\\n     * @param perUtxoData opening values (encrypted and public) for every UTXO\\n     * @return leftLeafId The `leafId` of the first leaf in the batch\\n     */\\n    function addAndEmitCommitments(\\n        bytes32[OUT_UTXOs] memory commitments,\\n        bytes[OUT_UTXOs] memory perUtxoData,\\n        uint256 timestamp\\n    ) internal returns (uint256 leftLeafId) {\\n        bytes memory utxoData = \\\"\\\";\\n        for (uint256 i = 0; i < OUT_UTXOs; i++) {\\n            require(\\n                uint256(commitments[i]) < FIELD_SIZE,\\n                ERR_TOO_LARGE_COMMITMENTS\\n            );\\n            utxoData = bytes.concat(utxoData, perUtxoData[i]);\\n        }\\n\\n        // Insert hashes into Merkle tree(s)\\n        leftLeafId = insertBatch(commitments);\\n\\n        emit NewCommitments(leftLeafId, timestamp, commitments, utxoData);\\n    }\\n\\n    // NOTE: The contract is supposed to run behind a proxy DELEGATECALLing it.\\n    // For compatibility on upgrades, decrease `__gap` if new variables added.\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x082b1d9f3db3045679b9f9e710984c93fed1876a782516dd9ab5893a818ffb05\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherPool/MerkleProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport { PoseidonT3, PoseidonT4 } from \\\"../crypto/Poseidon.sol\\\";\\nimport \\\"../errMsgs/PantherPoolErrMsgs.sol\\\";\\nimport \\\"../triadTree/TriadIncrementalMerkleTrees.sol\\\";\\n\\nabstract contract MerkleProofVerifier {\\n    // @dev Number of levels in a tree excluding the root level\\n    // (also defined in scripts/generateTriadMerkleZeroesContracts.sh)\\n    uint256 private constant TREE_DEPTH = 15;\\n\\n    //t |bH  bL| Subtree\\n    //--|------|------------\\n    //0 | 0  0 | hash(C,L,R)\\n    //1 | 0  1 | hash(L,C,R)\\n    //2 | 1  0 | hash(L,R,C)\\n    //3 | 1  1 | Not allowed\\n    //--|------|------------\\n    // Current leaf index in triad is (C,L,R)\\n    uint256 private constant iTRIAD_INDEX_LEFT = 0x0;\\n    // Current leaf index in triad is (L,C,R)\\n    uint256 private constant iTRIAD_INDEX_MIDDLE = 0x1;\\n    // Current leaf index in triad is (L,R,C)\\n    uint256 private constant iTRIAD_INDEX_RIGHT = 0x2;\\n    // Forbidden triad value in tria is `11`\\n    uint256 private constant iTRIAD_INDEX_FORBIDDEN = 0x3;\\n\\n    /// @param merkleRoot - verify checked to this hash\\n    /// @param triadIndex - index inside triad = { 0, 1, 2 }\\n    /// @param triadNodeIndex - index of triad hash ( c0,c1,c2 ) in the tree - Triad contract insures its is in range\\n    /// @param leaf - commitment leaf value\\n    /// @param pathElements - TREE_DEPTH + 1 elements - c1,c2 & path-elements\\n    /// @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n    /// @dev defined by `root`. For this, a `proof` must be provided, containing\\n    /// @dev sibling hashes on the branch from the leaf to the root of the tree.\\n    function verifyMerkleProof(\\n        bytes32 merkleRoot,\\n        uint256 triadIndex,\\n        uint256 triadNodeIndex,\\n        bytes32 leaf,\\n        bytes32[TREE_DEPTH + 1] calldata pathElements\\n    ) public pure {\\n        // [0] - Assumed it is computed by the TriadIncrementalMerkleTrees\\n        //       using modulo operation, so no need to check lower range\\n        //require(iTRIAD_INDEX_LEFT <= triadIndex, ERR_TRIAD_INDEX_MIN_VALUE);\\n        require(triadIndex < iTRIAD_INDEX_FORBIDDEN, ERR_TRIAD_INDEX_MAX_VALUE);\\n\\n        // [1] - Compute zero level hash\\n        bytes32 nodeHash;\\n        // NOTE: no else-case needed since this code executed after require at step [0]\\n        if (triadIndex == iTRIAD_INDEX_LEFT) {\\n            nodeHash = PoseidonT4.poseidon(\\n                [leaf, pathElements[0], pathElements[1]]\\n            );\\n        } else if (triadIndex == iTRIAD_INDEX_MIDDLE) {\\n            nodeHash = PoseidonT4.poseidon(\\n                [pathElements[0], leaf, pathElements[1]]\\n            );\\n        } else if (triadIndex == iTRIAD_INDEX_RIGHT) {\\n            nodeHash = PoseidonT4.poseidon(\\n                [pathElements[0], pathElements[1], leaf]\\n            );\\n        }\\n\\n        // [2] - Compute root\\n        for (uint256 level = 2; level < pathElements.length; level++) {\\n            bool isLeftNode;\\n            unchecked {\\n                // triadNodeIndex is actually a path to triad-node in merkle-tree\\n                // each LSB bit of this number is left or right path\\n                // it means for example: path = b111 , zero leaf will be from right size of hash\\n                // and path element[2] will be from right side of hash, all other path elements [3,4] will be from\\n                // left side of the next hashes till root.\\n                isLeftNode = ((triadNodeIndex & (0x1 << (level - 2))) == 0);\\n            }\\n            if (isLeftNode) {\\n                // computed node from left side\\n                // Hash(left = nodeHash, right = pathElement)\\n                nodeHash = PoseidonT3.poseidon([nodeHash, pathElements[level]]);\\n            } else {\\n                // computed node from right side\\n                // Hash(left = pathElement, right = nodeHash)\\n                nodeHash = PoseidonT3.poseidon([pathElements[level], nodeHash]);\\n            }\\n        }\\n        // [3] - revert if verification fails\\n        require(merkleRoot == nodeHash, ERR_MERKLE_PROOF_VERIFICATION_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x77f085553e24b876e76046fdf30e7594c0f06c03644901224e58332e83e3a911\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherPool/NullifierGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport { PoseidonT3 } from \\\"../crypto/Poseidon.sol\\\";\\nimport { FIELD_SIZE } from \\\"../crypto/SnarkConstants.sol\\\";\\nimport { ERR_TOO_LARGE_LEAFID, ERR_TOO_LARGE_PRIVKEY } from \\\"../errMsgs/PantherPoolErrMsgs.sol\\\";\\n\\nabstract contract NullifierGenerator {\\n    function generateNullifier(uint256 privSpendingKey, uint256 leafId)\\n        internal\\n        pure\\n        returns (bytes32 nullifier)\\n    {\\n        require(privSpendingKey < FIELD_SIZE, ERR_TOO_LARGE_PRIVKEY);\\n        require(leafId < FIELD_SIZE, ERR_TOO_LARGE_LEAFID);\\n        nullifier = PoseidonT3.poseidon(\\n            [bytes32(privSpendingKey), bytes32(leafId)]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcb5162d47cd6a63d4b170b112c5512cf4f6d3f0e7d766a27884bc8276bc443fa\",\"license\":\"MIT\"},\"contracts/protocol/pantherPool/PubKeyGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.4;\\n\\nimport { G1Point } from \\\"../common/Types.sol\\\";\\nimport { ERR_TOO_LARGE_PRIVKEY } from \\\"../errMsgs/PantherPoolErrMsgs.sol\\\";\\nimport { FIELD_SIZE } from \\\"../crypto/SnarkConstants.sol\\\";\\nimport \\\"../crypto/BabyJubJub.sol\\\";\\n\\nabstract contract PubKeyGenerator {\\n    function generatePubSpendingKey(uint256 privKey)\\n        internal\\n        view\\n        returns (G1Point memory pubKey)\\n    {\\n        // [0] - Require\\n        require(privKey < FIELD_SIZE, ERR_TOO_LARGE_PRIVKEY);\\n        // [1] - Generate public key\\n        G1Point memory base8 = G1Point({\\n            x: BabyJubJub.BASE8_X,\\n            y: BabyJubJub.BASE8_Y\\n        });\\n        pubKey = BabyJubJub.mulPointEscalar(base8, privKey);\\n    }\\n}\\n\",\"keccak256\":\"0x76e50fd979b9dc7113df11776af4e0443991a4450195554d6a635a8a7821bd6f\",\"license\":\"MIT\"},\"contracts/protocol/triadTree/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { PoseidonT3, PoseidonT4 } from \\\"../crypto/Poseidon.sol\\\";\\n\\n/*\\n * @dev Poseidon hash functions\\n */\\nabstract contract Hasher {\\n    function hash(bytes32 left, bytes32 right) internal pure returns (bytes32) {\\n        bytes32[2] memory input;\\n        input[0] = left;\\n        input[1] = right;\\n        return PoseidonT3.poseidon(input);\\n    }\\n\\n    function hash(\\n        bytes32 left,\\n        bytes32 mid,\\n        bytes32 right\\n    ) internal pure returns (bytes32) {\\n        bytes32[3] memory input;\\n        input[0] = left;\\n        input[1] = mid;\\n        input[2] = right;\\n        return PoseidonT4.poseidon(input);\\n    }\\n}\\n\",\"keccak256\":\"0x5d8e98a70a19b056ec00eb3b757b6638c80de4da2a6e69d8912fd3cf55768621\",\"license\":\"MIT\"},\"contracts/protocol/triadTree/TriadIncrementalMerkleTrees.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable var-name-mixedcase\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Hasher.sol\\\";\\nimport \\\"./TriadMerkleZeros.sol\\\";\\nimport { ERR_ZERO_ROOT } from \\\"../errMsgs/PantherPoolErrMsgs.sol\\\";\\nimport \\\"../interfaces/IRootsHistory.sol\\\";\\n\\n/**\\n * @title TriadIncrementalMerkleTrees\\n * @author Pantherprotocol Contributors\\n * @notice Incremental Merkle trees with batch insertion of 3 leaves at once\\n * @dev Refer to {TriadMerkleZeros} for comments on \\\"triad trees\\\" used\\n * Inspired by MACI project\\n * https://github.com/appliedzkp/maci/blob/master/contracts/sol/IncrementalMerkleTree.sol\\n */\\ncontract TriadIncrementalMerkleTrees is\\n    TriadMerkleZeros,\\n    Hasher,\\n    IRootsHistory\\n{\\n    /**\\n     * @dev {treeId} is a consecutive number of trees, starting from 0.\\n     * @dev {leafId} of a leaf is a \\\"modified\\\" number of leaves inserted in all\\n     * tries before this leaf. It is unique across all trees, starts from 0 for\\n     * the 1st leaf of the 1st tree, and constantly increments like this:\\n     * 0,1,2,  4,5,6,  8,9,10,  12,13,14 ... (i.e. every 4th number is skipped)\\n     * See comments to {TriadMerkleZeros}.\\n     */\\n\\n    // `leafId` of the next leaf to insert\\n    // !!! NEVER access it directly from child contracts: `internal` to ease testing only\\n    uint256 internal _nextLeafId;\\n\\n    // Right-most elements (hashes) in the current tree per level\\n    // level index => hash\\n    mapping(uint256 => bytes32) private _filledSubtrees;\\n\\n    /// @notice Roots of fully populated trees\\n    /// @dev treeId => root\\n    mapping(uint256 => bytes32) public finalRoots;\\n\\n    // Recent roots of trees seen\\n    // cacheIndex => root ^ treeId\\n    mapping(uint256 => uint256) private _cachedRoots;\\n\\n    // @dev Root permanently added to the `finalRoots`\\n    event AnchoredRoot(uint256 indexed treeId, bytes32 root);\\n\\n    // @dev Root temporarily saved in the `_cachedRoots`\\n    event CachedRoot(uint256 indexed treeId, bytes32 root);\\n\\n    // NOTE: No `constructor` (initialization) function needed\\n\\n    // Max number of latest roots to cache (must be a power of 2)\\n    uint256 internal constant CACHED_ROOTS_NUM = 256;\\n\\n    // Number of leaves in a modified triad used for leaf ID calculation\\n    uint256 private constant iTRIAD_SIZE = 4;\\n    // The number of leaves in a tree used for leaf ID calculation\\n    uint256 private constant iLEAVES_NUM = 2**(TREE_DEPTH - 1) * iTRIAD_SIZE;\\n\\n    // Bitmasks and numbers of bits for \\\"cheaper\\\" arithmetics\\n    uint256 private constant iTRIAD_SIZE_MASK = iTRIAD_SIZE - 1;\\n    uint256 private constant iTRIAD_SIZE_BITS = 2;\\n    uint256 private constant iLEAVES_NUM_MASK = iLEAVES_NUM - 1;\\n    uint256 private constant iLEAVES_NUM_BITS =\\n        TREE_DEPTH - 1 + iTRIAD_SIZE_BITS;\\n    uint256 private constant CACHE_SIZE_MASK =\\n        CACHED_ROOTS_NUM * iTRIAD_SIZE - 1;\\n\\n    /**\\n     * @notice Returns the number of leaves inserted in all trees so far\\n     */\\n    function leavesNum() external view returns (uint256) {\\n        return _nextLeafId2LeavesNum(_nextLeafId);\\n    }\\n\\n    /**\\n     * @notice Returns `treeId` of the current tree\\n     */\\n    function curTree() external view returns (uint256) {\\n        return getTreeId(_nextLeafId);\\n    }\\n\\n    /**\\n     * @notice Returns `treeId` of the given leaf's tree\\n     */\\n    function getTreeId(uint256 leafId) public pure returns (uint256) {\\n        // equivalent to `leafId / iLEAVES_NUM`\\n        return leafId >> iLEAVES_NUM_BITS;\\n    }\\n\\n    /**\\n     * @notice Returns `leafIndex` (index in the tree) of the given leaf\\n     */\\n    function getLeafIndex(uint256 leafId) public pure returns (uint256) {\\n        unchecked {\\n            // equiv to `leafId % LEAVES_NUM`\\n            uint256 iIndex = leafId & iLEAVES_NUM_MASK; // throws away tree-id bits\\n            uint256 fullTriadsNum = (iIndex + 1) >> iTRIAD_SIZE_BITS; // computes index of triad node in the tree\\n            return iIndex - fullTriadsNum; // start index of first leaf in the triad\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the root of the current tree and its index in cache\\n     */\\n    function curRoot()\\n        external\\n        view\\n        returns (bytes32 root, uint256 cacheIndex)\\n    {\\n        // Return zero root and index if the current tree is empty\\n        uint256 nextLeafId = _nextLeafId;\\n        if (_isEmptyTree(nextLeafId)) return (ZERO_ROOT, 0);\\n\\n        // Return cached values otherwise\\n        uint256 treeId = getTreeId(nextLeafId);\\n        cacheIndex = _nextLeafId2CacheIndex(nextLeafId);\\n        uint256 v = _cachedRoots[cacheIndex];\\n        root = bytes32(v ^ treeId);\\n    }\\n\\n    /// @inheritdoc IRootsHistory\\n    function isKnownRoot(\\n        uint256 treeId,\\n        bytes32 root,\\n        uint256 cacheIndexHint\\n    ) public view override returns (bool) {\\n        require(root != 0, ERR_ZERO_ROOT);\\n\\n        // if hint provided, use hint\\n        if (cacheIndexHint != 0)\\n            return _isCorrectCachedRoot(treeId, root, cacheIndexHint);\\n\\n        // then, check the history\\n        if (finalRoots[treeId] == root) return true;\\n\\n        // finally, look in cache, starting from the current root\\n        uint256 leafId = _nextLeafId;\\n        unchecked {\\n            uint256 i = CACHED_ROOTS_NUM;\\n            while ((leafId >= iTRIAD_SIZE) && (i != 0)) {\\n                i -= 1;\\n                // Skip the last triad in a tree (i.e. the full tree root)\\n                if (leafId & iLEAVES_NUM_MASK == 0) continue;\\n                uint256 cacheIndex = _nextLeafId2CacheIndex(leafId);\\n                if (_isCorrectCachedRoot(treeId, root, cacheIndex)) return true;\\n                leafId -= iTRIAD_SIZE;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Inserts 3 leaves into the current tree, or a new one, if that's full\\n     * @param leaves The 3 leaves to insert (must be less than SNARK_SCALAR_FIELD)\\n     * @return leftLeafId The `leafId` of the first leaf from 3 inserted\\n     */\\n    function insertBatch(bytes32[TRIAD_SIZE] memory leaves)\\n        internal\\n        returns (uint256 leftLeafId)\\n    {\\n        leftLeafId = _nextLeafId;\\n\\n        bytes32[TREE_DEPTH] memory zeros;\\n        populateZeros(zeros);\\n\\n        // index of a \\\"current\\\" node (0 for the leftmost node/leaf of a level)\\n        uint256 nodeIndex;\\n        // hash (value) of a \\\"current\\\" node\\n        bytes32 nodeHash;\\n        // index of a \\\"current\\\" level (0 for leaves, increments toward root)\\n        uint256 level;\\n\\n        // subtree from 3 leaves being inserted on `level = 0`\\n        nodeHash = hash(leaves[0], leaves[1], leaves[2]);\\n        // ... to be placed under this index on `level = 1`\\n        // (equivalent to `(leftLeafId % iLEAVES_NUM) / iTRIAD_SIZE`)\\n        nodeIndex = (leftLeafId & iLEAVES_NUM_MASK) >> iTRIAD_SIZE_BITS;\\n\\n        bytes32 left;\\n        bytes32 right;\\n        for (level = 1; level < TREE_DEPTH; level++) {\\n            // if `nodeIndex` is, say, 25, over the iterations it will be:\\n            // 25, 12, 6, 3, 1, 0, 0 ...\\n\\n            if (nodeIndex % 2 == 0) {\\n                left = nodeHash;\\n                right = zeros[level];\\n                _filledSubtrees[level] = nodeHash;\\n            } else {\\n                // for a new tree, \\\"than\\\" block always run before \\\"else\\\" block\\n                // so `_filledSubtrees[level]` gets updated before its use\\n                left = _filledSubtrees[level];\\n                right = nodeHash;\\n            }\\n\\n            nodeHash = hash(left, right);\\n\\n            // equivalent to `nodeIndex /= 2`\\n            nodeIndex >>= 1;\\n        }\\n\\n        uint256 nextLeafId = leftLeafId + iTRIAD_SIZE;\\n        _nextLeafId = nextLeafId;\\n\\n        uint256 treeId = getTreeId(leftLeafId);\\n        if (_isFullTree(leftLeafId)) {\\n            // Switch to a new tree\\n            // Ignore `_filledSubtrees` old values as they are never re-used\\n            finalRoots[treeId] = nodeHash;\\n            emit AnchoredRoot(treeId, nodeHash);\\n        } else {\\n            uint256 cacheIndex = _nextLeafId2CacheIndex(nextLeafId);\\n            _cachedRoots[cacheIndex] = uint256(nodeHash) ^ treeId;\\n            emit CachedRoot(treeId, nodeHash);\\n        }\\n    }\\n\\n    /// private functions follow (some of them made `internal` to ease testing)\\n\\n    function _isFullTree(uint256 leftLeafId) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                (iLEAVES_NUM - (leftLeafId & iLEAVES_NUM_MASK)) <= iTRIAD_SIZE;\\n        }\\n    }\\n\\n    function _isEmptyTree(uint256 nextLeafId) internal pure returns (bool) {\\n        return (nextLeafId & iLEAVES_NUM_MASK) == 0;\\n    }\\n\\n    function _nextLeafId2LeavesNum(\\n        uint256 nextLeafId // declared as `internal` to facilitate testing\\n    ) internal pure returns (uint256) {\\n        // equiv to `nextLeafId / iTRIAD_SIZE * TRIAD_SIZE + nextLeafId % iTRIAD_SIZE`\\n        unchecked {\\n            return\\n                (nextLeafId >> iTRIAD_SIZE_BITS) *\\n                TRIAD_SIZE +\\n                (nextLeafId & iTRIAD_SIZE_MASK);\\n        }\\n    }\\n\\n    // Returns `triadIndex` index in the triad-node of the given leaf = { 0, 1, 2 }\\n    function _getTriadIndex(uint256 leafId) internal pure returns (uint256) {\\n        return getLeafIndex(leafId) % TRIAD_SIZE;\\n    }\\n\\n    // Returns `triadNodeIndex` index of the triad-node of the given leaf\\n    // This index is the path to this node - used by anyone who needs the path\\n    function _getTriadNodeIndex(uint256 leafId)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // equiv to `leafId % LEAVES_NUM`\\n            uint256 iIndex = leafId & iLEAVES_NUM_MASK; // throws away tree-id bits\\n            uint256 fullTriadsNum = (iIndex + 1) >> iTRIAD_SIZE_BITS; // computes index of triad node in the tree\\n            return fullTriadsNum;\\n        }\\n    }\\n\\n    // nextLeafId must be even\\n    function _nextLeafId2CacheIndex(uint256 nextLeafId)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        // equiv to `nextLeafId % (CACHED_ROOTS_NUM * iTRIAD_SIZE) + 1`\\n        return (nextLeafId & CACHE_SIZE_MASK) | 1;\\n    }\\n\\n    function _isCorrectCachedRoot(\\n        uint256 treeId,\\n        bytes32 root,\\n        uint256 cacheIndex\\n    ) private view returns (bool) {\\n        uint256 v = _cachedRoots[cacheIndex];\\n        return v == (uint256(root) ^ treeId);\\n    }\\n\\n    // NOTE: The contract is supposed to run behind a proxy DELEGATECALLing it.\\n    // For compatibility on upgrades, decrease `__gap` if new variables added.\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d42b0fcba6057364d4f460c815f75d30e4d6f94bf4e57ab0cc4894a2ad0836d\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/triadTree/TriadMerkleZeros.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable var-name-mixedcase\\npragma solidity ^0.8.4;\\n\\nimport { FIELD_SIZE } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n// Content is autogenerated by `lib/triadMerkleZerosContractGenerator.ts`\\n\\n/**\\n * @dev The \\\"triad binary tree\\\" is a modified Merkle (full) binary tree with:\\n * - every node, from the root upto the level preceding leaves, excluding\\n * that level, has 2 child nodes (i.e. this subtree is a full binary tree);\\n * - every node of the layer preceding leaves has 3 child nodes (3 leaves).\\n * Example:\\n * [4]                                       0\\n *                                           |\\n * [3]                        0--------------------------------1\\n *                            |                                |\\n * [2]                0---------------1                 2--------------3\\n *                    |               |                 |              |\\n * [1]            0-------1       2-------3        4-------5       6-------7\\n *               /|\\\\     /|\\\\     /|\\\\     /|\\\\      /|\\\\     /|\\\\     /|\\\\     /|\\\\\\n * [0] index:   0..2    3..5    6..8    9...11  12..14  15..17  18..20  21..24\\n *\\n *   leaf ID:   0..2    4..6    8..10   12..14  16..18  20..23  24..27  28..30\\n *\\n * - Number in [] is the \\\"level index\\\" that starts from 0 for the leaves level.\\n * - Numbers in node/leaf positions are \\\"node/leaf indices\\\" which starts from 0\\n *   for the leftmost node/leaf of every level.\\n * - Numbers bellow leaves are IDs of leaves.\\n *\\n * Arithmetic operations with multiples of 2 (i.e. shifting) is \\\"cheaper\\\" than\\n * operations with multiples of 3 (both on-chain and in zk-circuits).\\n * Therefore, IDs of leaves (but NOT hashes of nodes) are calculated as if the\\n * tree would have 4 (not 3) leaves in branches, with every 4th leaf skipped.\\n * In other words, there are no leaves with IDs 3, 7, 11, 15, 19...\\n */\\n\\n// @notice The \\\"triad binary tree\\\" populated with zero leaf values\\nabstract contract TriadMerkleZeros {\\n    // @dev Number of levels in a tree excluding the root level\\n    // (also defined in scripts/generateTriadMerkleZeroesContracts.sh)\\n    uint256 internal constant TREE_DEPTH = 15;\\n\\n    // Number of levels in a tree including both leaf and root levels\\n    uint256 internal constant TREE_LEVELS = TREE_DEPTH + 1;\\n\\n    // Number of leaves in a branch with the root on the level 1\\n    uint256 internal constant TRIAD_SIZE = 3;\\n\\n    // Number of leaves in the fully populated tree\\n    uint256 internal constant LEAVES_NUM = (2**(TREE_DEPTH - 1)) * TRIAD_SIZE;\\n\\n    // @dev Leaf zero value (`keccak256(\\\"Pantherprotocol\\\")%FIELD_SIZE`)\\n    bytes32 internal constant ZERO_VALUE =\\n        bytes32(\\n            uint256(\\n                0x667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d\\n            )\\n        );\\n\\n    // Merkle root of a tree that contains zeros only\\n    bytes32 internal constant ZERO_ROOT =\\n        bytes32(\\n            uint256(\\n                0x20fc043586a9fcb416cdf2a3bc8a995f8f815d43f1046a20d1c588cf20482a55\\n            )\\n        );\\n\\n    function populateZeros(bytes32[TREE_DEPTH] memory zeros) internal pure {\\n        zeros[0] = bytes32(\\n            uint256(\\n                0x667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d\\n            )\\n        );\\n        zeros[1] = bytes32(\\n            uint256(\\n                0x1be18cd72ac1586de27dd60eba90654bd54383004991951bccb0f6bad02c67f6\\n            )\\n        );\\n        zeros[2] = bytes32(\\n            uint256(\\n                0x7677e6102f0acf343edde864f79ef7652faa5a66d575b8b60bb826a4aa517e6\\n            )\\n        );\\n        zeros[3] = bytes32(\\n            uint256(\\n                0x28a85866ab97bd65cc94b0d1f5c5986481f8a0d65bdd5c1e562659eebb13cf63\\n            )\\n        );\\n        zeros[4] = bytes32(\\n            uint256(\\n                0x87321a66ea3af7780128ea1995d7fc6ec44a96a1b2d85d3021208cede68c15c\\n            )\\n        );\\n        zeros[5] = bytes32(\\n            uint256(\\n                0x233b4e488f0aaf5faef4fc8ea4fefeadb6934eb882bc33b9df782fd1d83b41a0\\n            )\\n        );\\n        zeros[6] = bytes32(\\n            uint256(\\n                0x1a0cefcf0c592da6426717d3718408c61af1d0a9492887f3faecefcba1a0a309\\n            )\\n        );\\n        zeros[7] = bytes32(\\n            uint256(\\n                0x2cdf963150b321923dd07b2b52659aceb529516a537dfebe24106881dd974293\\n            )\\n        );\\n        zeros[8] = bytes32(\\n            uint256(\\n                0x93a186bf9ec2cc874ceab26409d581579e1a431ecb6987d428777ceedfa15c4\\n            )\\n        );\\n        zeros[9] = bytes32(\\n            uint256(\\n                0xcbfc07131ef4197a4b4e60153d43381520ec9ab4c9c3ed34d88883a881a4e07\\n            )\\n        );\\n        zeros[10] = bytes32(\\n            uint256(\\n                0x17b31de43ba4c687cf950ad00dfbe33df40047e79245b50bd1d9f87e622bf2af\\n            )\\n        );\\n        zeros[11] = bytes32(\\n            uint256(\\n                0x2f3328354bceaf5882a8cc88053e0dd0ae594009a4e84e9e75a4fefe8604a602\\n            )\\n        );\\n        zeros[12] = bytes32(\\n            uint256(\\n                0x2b2e8defd4dad2404c6874918925fc1192123f45df0ee3e04b6c16ff22ca1cfd\\n            )\\n        );\\n        zeros[13] = bytes32(\\n            uint256(\\n                0x1cbdc4065aa4137da01d64a090706267d65f425ea5e815673516d29d9aa14d38\\n            )\\n        );\\n        zeros[14] = bytes32(\\n            uint256(\\n                0x13ca69f9fde4ece39e395bb55dd41ed7dd9dfaa26671e26bd9fd6f4f635fc872\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x97974974aae4e03428455d8506475266ce3046a369d28a7391386caaf829d2d2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620038da380380620038da8339810160408190526200003591620001a8565b836001600160a01b038116620000925760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b60601b6001600160601b031916608052620000b06001600262000204565b600314620000e65760405162461bcd60e51b8152602060048201526002602482015261045360f41b604482015260640162000089565b620000f18362000130565b620000fc8262000130565b620001078162000130565b6001600160601b0319606093841b811660a05291831b821660c05290911b1660e0525062000229565b6001600160a01b038116620001885760405162461bcd60e51b815260206004820152601760248201527f554e45585045435445445f5a45524f5f41444452455353000000000000000000604482015260640162000089565b50565b80516001600160a01b0381168114620001a357600080fd5b919050565b60008060008060808587031215620001be578384fd5b620001c9856200018b565b9350620001d9602086016200018b565b9250620001e9604086016200018b565b9150620001f9606086016200018b565b905092959194509250565b600082198211156200022457634e487b7160e01b81526011600452602481fd5b500190565b60805160601c60a05160601c60c05160601c60e05160601c61363a620002a0600039600081816102ef015261180c01526000818161026b01528181610c030152611a9c0152600081816102c801528181610adc01526118e70152600081816101bc01528181610ec801526114f4015261363a6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c8063514ef8dd116100d857806399db86d81161008c578063bbc2af2011610066578063bbc2af2014610395578063c5399266146103bb578063e5285dcc146103ce57600080fd5b806399db86d8146103555780639e2916f71461037a578063adb49c111461038257600080fd5b80637dd0a338116100bd5780637dd0a3381461031157806383e24c8814610324578063867a9abd1461034257600080fd5b8063514ef8dd146102c357806359752d2d146102ea57600080fd5b8063283886301161012f578063411557d111610114578063411557d1146102665780634e7f4fad1461028d57806350dc0f5c146102b057600080fd5b8063283886301461021b578063407860f81461024657600080fd5b8063117803e311610160578063117803e3146101b75780631e6569fc146101f65780631f9eae6d1461021357600080fd5b806302e9b8eb1461017c57806307447f8e146101a2575b600080fd5b61018f61018a366004613032565b6103f1565b6040519081526020015b60405180910390f35b6101b56101b0366004612fa8565b61087a565b005b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610199565b6101fe610d34565b60408051928352602083019190915201610199565b61018f610da7565b609b5461023290640100000000900462ffffff1681565b60405162ffffff9091168152602001610199565b61018f6102543660046130d8565b60036020526000908152604090205481565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b6102a061029b366004613241565b610db9565b6040519015158152602001610199565b6101b56102be36600461326c565b610ec6565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b6101b561031f366004613108565b611016565b61018f6103323660046130d8565b61ffff166001810160021c900390565b6101b5610350366004612f68565b6114f2565b609b546103659063ffffffff1681565b60405163ffffffff9091168152602001610199565b61018f6115d7565b6101b56103903660046130d8565b6115ef565b6103656103a33660046130d8565b609d6020526000908152604090205463ffffffff1681565b61018f6103c93660046130d8565b6116bd565b6102a06103dc3660046130d8565b609c6020526000908152604090205460ff1681565b60006002600054141561044b5760405162461bcd60e51b815260206004820152601a60248201527f636c61696d45726332303a207265656e7472616e742063616c6c00000000000060448201526064015b60405180910390fd5b6002600055609b5460408051808201909152600681527f50503a453331000000000000000000000000000000000000000000000000000060208201529063ffffffff166104ab5760405162461bcd60e51b815260040161044291906133c0565b5060006104b66116e0565b905063ffffffff83161561052d578063ffffffff168363ffffffff1611156040518060400160405280600581526020017f50503a4539000000000000000000000000000000000000000000000000000000815250906105285760405162461bcd60e51b815260040161044291906133c0565b508290505b610535612e67565b61053d612e85565b60005b61054c60016002613415565b811015610855576000806105db8d846003811061057957634e487b7160e01b600052603260045260246000fd5b60200201602081019061058c9190612f4c565b8d85600381106105ac57634e487b7160e01b600052603260045260246000fd5b60200201358d86600381106105d157634e487b7160e01b600052603260045260246000fd5b60200201356116eb565b915091508067ffffffffffffffff16600014156106de5760408051808201909152600681527f50503a45323100000000000000000000000000000000000000000000000000006020820152836106445760405162461bcd60e51b815260040161044291906133c0565b507f0667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d85846003811061068657634e487b7160e01b600052603260045260246000fd5b60209081029190910191909152604051600560fd1b918101919091526021016040516020818303038152906040528484600381106106d457634e487b7160e01b600052603260045260246000fd5b6020020152610840565b6107368a846003811061070157634e487b7160e01b600052603260045260246000fd5b60400201358b856003811061072657634e487b7160e01b600052603260045260246000fd5b604002016020013583858a611b06565b85846003811061075657634e487b7160e01b600052603260045260246000fd5b6020020152600067ffffffffffffffff821660608f866003811061078a57634e487b7160e01b600052603260045260246000fd5b60200201602081019061079d9190612f4c565b6001600160a01b0316901b17905060ab8a85600381106107cd57634e487b7160e01b600052603260045260246000fd5b60600201828f87600381106107f257634e487b7160e01b600052603260045260246000fd5b602002013560405160200161080a9493929190613320565b60405160208183030381529060405285856003811061083957634e487b7160e01b600052603260045260246000fd5b6020020152505b5050808061084d9061358e565b915050610540565b5061086782828563ffffffff16611c7f565b60016000559a9950505050505050505050565b600260005414156108cd5760405162461bcd60e51b815260206004820152601a60248201527f636c61696d45726332303a207265656e7472616e742063616c6c0000000000006044820152606401610442565b6002600055609b5463ffffffff166108e36116e0565b63ffffffff1610156040518060400160405280600681526020017f50503a45333000000000000000000000000000000000000000000000000000008152509061093f5760405162461bcd60e51b815260040161044291906133c0565b5061094a8533611ddd565b60006109568686611f1f565b6000818152609c6020908152604091829020548251808401909352600583527f50503a4538000000000000000000000000000000000000000000000000000000918301919091529192509060ff16156109c25760405162461bcd60e51b815260040161044291906133c0565b506000818152609c602052604090819020805460ff19166001179055517fc474ce3f98e456e64643fb51ee2ed4453604400905cfe41e828c72d2e7f5296590610a0e9083815260200190565b60405180910390a150610a2a610a23856116bd565b8383610db9565b6040518060400160405280600681526020017f50503a453136000000000000000000000000000000000000000000000000000081525090610a7e5760405162461bcd60e51b815260040161044291906133c0565b506040805160c081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905291516331293c6360e01b81526001600160a01b038c81166004830152602482018c9052919291829182917f000000000000000000000000000000000000000000000000000000000000000016906331293c63906044016101206040518083038186803b158015610b1f57600080fd5b505afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b579190613152565b6040808201518151808301909252600682526550503a45313960d01b6020830152919850929650929350909160ff166001149050610ba85760405162461bcd60e51b815260040161044291906133c0565b506000610bb48a61206b565b9050610bcb816000015182602001518e858f611b06565b92505050610bee85610bdc89612128565b600161ffff8b160160021c848a611016565b506000610bff8a8460800151612150565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bd3e6c06040518060a00160405280866060015160ff1681526020018f6001600160a01b03168152602001858152602001336001600160a01b03168152602001846bffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610cef9190600060a08201905060ff835116825260208301516001600160a01b0380821660208501526040850151604085015280606086015116606085015250506bffffffffffffffffffffffff608084015116608083015292915050565b600060405180830381600087803b158015610d0957600080fd5b505af1158015610d1d573d6000803e3d6000fd5b505060016000555050505050505050505050505050565b6001546000908190610d458161219d565b15610d7557507f20fc043586a9fcb416cdf2a3bc8a995f8f815d43f1046a20d1c588cf20482a5592600092509050565b6000610d80826116bd565b9050610d8b826121d6565b6000818152600460205260409020549190911894909350915050565b6000610db46001546116bd565b905090565b60408051808201909152600581527f54543a4531000000000000000000000000000000000000000000000000000000602082015260009083610e0e5760405162461bcd60e51b815260040161044291906133c0565b508115610e2e575060008181526004602052604090205483831814610ebf565b600084815260036020526040902054831415610e4c57506001610ebf565b6001546101005b60048210158015610e6357508015155b15610eb8576000190161ffff8216610e7a57610e53565b6000610e85836121d6565b6000818152600460205260409020549091508688181415610eac5760019350505050610ebf565b60048303925050610e53565b5060009150505b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610f3e5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a65640000000000000000000000006044820152606401610442565b609b5463ffffffff90811690831610801590610f6457506401000000008263ffffffff16105b8015610f74575062ffffff811615155b610fa55760405162461bcd60e51b8152602060048201526002602482015261453160f01b6044820152606401610442565b609b805462ffffff8316640100000000810266ffffffffffffff1990921663ffffffff8616908117929092179092556040517f2369247a5a2affa0d5b33a70c8ff61d5660e1132fe764715b971fdd1fc68d10e9261100a928252602082015260400190565b60405180910390a15050565b60408051808201909152600581527f4d503a453300000000000000000000000000000000000000000000000000000060208201526003851061106b5760405162461bcd60e51b815260040161044291906133c0565b5060008461116557730f16C6b4Cf5B8FB090C2F89D5d7aD85d057eB760635a53025d6040518060600160405280868152602001856000601081106110bf57634e487b7160e01b600052603260045260246000fd5b60200201358152602001856001601081106110ea57634e487b7160e01b600052603260045260246000fd5b60200201358152506040518263ffffffff1660e01b815260040161110e9190613398565b60206040518083038186803b15801561112657600080fd5b505af415801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e91906130f0565b90506112dc565b60018514156111e557730f16C6b4Cf5B8FB090C2F89D5d7aD85d057eB760635a53025d6040518060600160405280856000601081106111b457634e487b7160e01b600052603260045260246000fd5b60200201358152602001868152602001856001601081106110ea57634e487b7160e01b600052603260045260246000fd5b60028514156112dc57730f16C6b4Cf5B8FB090C2F89D5d7aD85d057eB760635a53025d60405180606001604052808560006010811061123457634e487b7160e01b600052603260045260246000fd5b602002013581526020018560016010811061125f57634e487b7160e01b600052603260045260246000fd5b60200201358152602001868152506040518263ffffffff1660e01b81526004016112899190613398565b60206040518083038186803b1580156112a157600080fd5b505af41580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d991906130f0565b90505b60025b601081101561149457600160011982011b85161580156113bf57735b79557e91aEA6a51d9757bA42E27ebf8973328563299e5660604051806040016040528086815260200187866010811061134457634e487b7160e01b600052603260045260246000fd5b60200201358152506040518263ffffffff1660e01b81526004016113689190613367565b60206040518083038186803b15801561138057600080fd5b505af4158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b891906130f0565b9250611481565b735b79557e91aEA6a51d9757bA42E27ebf8973328563299e5660604051806040016040528087866010811061140457634e487b7160e01b600052603260045260246000fd5b60200201358152602001868152506040518263ffffffff1660e01b815260040161142e9190613367565b60206040518083038186803b15801561144657600080fd5b505af415801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e91906130f0565b92505b508061148c8161358e565b9150506112df565b5060408051808201909152600581527f4d503a453100000000000000000000000000000000000000000000000000000060208201528682146114e95760405162461bcd60e51b815260040161044291906133c0565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461156a5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a65640000000000000000000000006044820152606401610442565b600260005414156115bd5760405162461bcd60e51b815260206004820152601a60248201527f636c61696d45726332303a207265656e7472616e742063616c6c0000000000006044820152606401610442565b60026000556115cd8383836121fd565b5050600160005550565b6000610db4600154600281901c600390810291160190565b6000818152609d6020908152604091829020548251808401909352600683527f50503a45333200000000000000000000000000000000000000000000000000009183019190915263ffffffff161561165a5760405162461bcd60e51b815260040161044291906133c0565b5060006116656116e0565b6000838152609d6020908152604091829020805463ffffffff191663ffffffff851690811790915591519182529192507f41685940dd65dd5fc11832115bda1957c2ed7b4e2982cfac6c3ba41bd1566a3c910161100a565b600060026116cd6001600f613547565b6116d79190613415565b9190911c919050565b6000610db442612225565b60008082611769576001600160a01b038516158015611708575083155b6040518060400160405280600681526020017f50503a45323900000000000000000000000000000000000000000000000000008152509061175c5760405162461bcd60e51b815260040161044291906133c0565b5060008091509150611afe565b6001600160a01b038516731afa2212970b809ae15d51af00c502d5c8eb3baf14156118905760408051808201909152600681527f50503a4532350000000000000000000000000000000000000000000000000000602082015284156117e15760405162461bcd60e51b815260040161044291906133c0565b5060006117ed8461227f565b604051631dc6ea1f60e11b8152336004820152602481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633b8dd43e90604401600060405180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b50505050730a1ebe17885f8603834b4c02054ce84cedf8756e819250925050611afe565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526040516331293c6360e01b81526001600160a01b038881166004830152602482018890527f000000000000000000000000000000000000000000000000000000000000000016906331293c63906044016101206040518083038186803b15801561192a57600080fd5b505afa15801561193e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119629190613152565b6040808201518151808301909252600682526550503a45313960d01b60208301529498509295509350909160ff1660011490506119b25760405162461bcd60e51b815260040161044291906133c0565b5060006119c38683608001516122e8565b90945090508015611a1257876001600160a01b03167f05b5d46649ab2015d3a08705cbaa391e094d9594c393ce89d3afffe960744da182604051611a0991815260200190565b60405180910390a25b6040805160a0808201835260608581015160ff9081168452918601516001600160a01b0390811660208501908152848601898152339386019384526bffffffffffffffffffffffff8d8116608088019081529751631d106e8960e21b81529651909516600487015290518216602486015251604485015290518116606484015292511660848201527f000000000000000000000000000000000000000000000000000000000000000090911690637441ba249060a401600060405180830381600087803b158015611ae257600080fd5b505af1158015611af6573d6000803e3d6000fd5b505050505050505b935093915050565b600060008051602061360e8339815191528611158015611b34575060008051602061360e8339815191528511155b6040518060400160405280600581526020017f43473a453100000000000000000000000000000000000000000000000000000081525090611b885760405162461bcd60e51b815260040161044291906133c0565b5060408051606081018252878152602080820188905263ffffffff85169086901b77ffffffffffffffffffffffffffffffffffffffff000000001660c088901b7fffffffffffffffff000000000000000000000000000000000000000000000000161717818301529051635a53025d60e01b8152730f16C6b4Cf5B8FB090C2F89D5d7aD85d057eB76091635a53025d91611c259190600401613398565b60206040518083038186803b158015611c3d57600080fd5b505af4158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7591906130f0565b9695505050505050565b6040805160208101909152600080825290815b611c9e60016002613415565b811015611d8d5760008051602061360e833981519152868260038110611cd457634e487b7160e01b600052603260045260246000fd5b602002015160001c106040518060400160405280600581526020017f43543a453100000000000000000000000000000000000000000000000000000081525090611d315760405162461bcd60e51b815260040161044291906133c0565b5081858260038110611d5357634e487b7160e01b600052603260045260246000fd5b6020020151604051602001611d699291906132f1565b60405160208183030381529060405291508080611d859061358e565b915050611c92565b50611d9785612347565b9150817f724bdd8d0d4293d630d4223512262f7f1bd9e7bb88cadfef6de67ff0b0f1d8b4848784604051611dcd939291906133d3565b60405180910390a2509392505050565b60008282604051602001611e049291909182526001600160a01b0316602082015260400190565b60408051601f1981840301815282825280516020918201206000818152609d835283902054848401909352600684527f50503a453334000000000000000000000000000000000000000000000000000091840191909152925063ffffffff169081611e825760405162461bcd60e51b815260040161044291906133c0565b50609b54600090611ea690640100000000900462ffffff1663ffffffff8416613415565b90508042116040518060400160405280600681526020017f50503a453333000000000000000000000000000000000000000000000000000081525090611eff5760405162461bcd60e51b815260040161044291906133c0565b5050506000908152609d60205260409020805463ffffffff191690555050565b600060008051602061360e8339815191528310604051806040016040528060068152602001650a0a0748a64760d31b81525090611f6f5760405162461bcd60e51b815260040161044291906133c0565b5060408051808201909152600681527f50503a4532370000000000000000000000000000000000000000000000000000602082015260008051602061360e8339815191528310611fd25760405162461bcd60e51b815260040161044291906133c0565b5060408051808201825284815260208101849052905163014cf2b360e51b8152735b79557e91aEA6a51d9757bA42E27ebf897332859163299e56609161201b9190600401613367565b60206040518083038186803b15801561203357600080fd5b505af4158015612047573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf91906130f0565b60408051808201909152600080825260208201526040805180820190915260068152650a0a0748a64760d31b602082015260008051602061360e83398151915283106120ca5760405162461bcd60e51b815260040161044291906133c0565b50604080518082019091527f0bb77a6ad63e739b4eacb2e09d6277c12ab8d8010534e0b62893f3f6bb95705181527f25797203f7a0b24925572e1cd16bf9edfce0051fb9e133774b3c257a872d7d8b6020820152610ebf8184612775565b600060036121408361ffff166001810160021c900390565b61214a91906135a9565b92915050565b60008060ff83161561217e576121658361280c565b6121799067ffffffffffffffff8616613528565b61218a565b8367ffffffffffffffff165b905061219581612819565b949350505050565b6000600160046121ae82600f613547565b6121b9906002613470565b6121c39190613528565b6121cd9190613547565b90911615919050565b600060016121e76004610100613528565b6121f19190613547565b82166001179050919050565b6001600160a01b03831661221a57612215828261287f565b505050565b612215838383612962565b6000640100000000821061227b5760405162461bcd60e51b815260206004820152600860248201527f554e5341464533320000000000000000000000000000000000000000000000006044820152606401610442565b5090565b60006801000000000000000082106040518060400160405280600681526020017f50503a4532360000000000000000000000000000000000000000000000000000815250906122e15760405162461bcd60e51b815260040161044291906133c0565b5090919050565b6000808060ff84166122ff57506000905083612334565b600061230a8561280c565b905080868161232957634e487b7160e01b600052601260045260246000fd5b049081028603925090505b61233d8161227f565b9250509250929050565b600154612352612eac565b7f0667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d81527f1be18cd72ac1586de27dd60eba90654bd54383004991951bccb0f6bad02c67f660208201527f07677e6102f0acf343edde864f79ef7652faa5a66d575b8b60bb826a4aa517e660408201527f28a85866ab97bd65cc94b0d1f5c5986481f8a0d65bdd5c1e562659eebb13cf6360608201527f087321a66ea3af7780128ea1995d7fc6ec44a96a1b2d85d3021208cede68c15c60808201527f233b4e488f0aaf5faef4fc8ea4fefeadb6934eb882bc33b9df782fd1d83b41a060a08201527f1a0cefcf0c592da6426717d3718408c61af1d0a9492887f3faecefcba1a0a30960c08201527f2cdf963150b321923dd07b2b52659aceb529516a537dfebe24106881dd97429360e08201527f093a186bf9ec2cc874ceab26409d581579e1a431ecb6987d428777ceedfa15c46101008201527f0cbfc07131ef4197a4b4e60153d43381520ec9ab4c9c3ed34d88883a881a4e076101208201527f17b31de43ba4c687cf950ad00dfbe33df40047e79245b50bd1d9f87e622bf2af6101408201527f2f3328354bceaf5882a8cc88053e0dd0ae594009a4e84e9e75a4fefe8604a6026101608201527f2b2e8defd4dad2404c6874918925fc1192123f45df0ee3e04b6c16ff22ca1cfd6101808201527f1cbdc4065aa4137da01d64a090706267d65f425ea5e815673516d29d9aa14d386101a08201527f13ca69f9fde4ece39e395bb55dd41ed7dd9dfaa26671e26bd9fd6f4f635fc8726101c0820152825160208401516040850151600092839283926125ae929190612ab8565b91506002600160046125c182600f613547565b6125cc906002613470565b6125d69190613528565b6125e09190613547565b8616901c9250600080600192505b600f831015612685576126026002866135a9565b61264d578391508583600f811061262957634e487b7160e01b600052603260045260246000fd5b60200201519050836002600085815260200190815260200160002081905550612660565b5050600081815260026020526040902054825b61266a8282612b62565b60019590951c9493508261267d8161358e565b9350506125ee565b6000612692600489613415565b6001819055905060006126a4896116bd565b9050600461ffff8a1662010000031161270957600081815260036020526040908190208790555181907f7cd9c9cf009b511548bb15f2d648fc3ee3e6e880d24f043861b274dca5a55435906126fc9089815260200190565b60405180910390a2612768565b6000612714836121d6565b6000818152600460205260409081902089851890555190915082907f46b4356c55762628b29b60a689ae18c610a9cd9774ca704e7a567aa41bb7cebf9061275e908a815260200190565b60405180910390a2505b5050505050505050919050565b60408051808201909152600081526001602082015281835b81156127c45781600116600114156127ac576127a98382612bfd565b92505b6127b68182612bfd565b9050600182901c915061278d565b82516127df9060008051602061360e833981519152906135a9565b835260208301516127ff9060008051602061360e833981519152906135a9565b6020840152505092915050565b600061214a82600a61347c565b60006c0100000000000000000000000082106040518060400160405280600681526020017f50503a4531300000000000000000000000000000000000000000000000000000815250906122e15760405162461bcd60e51b815260040161044291906133c0565b604080516000808252602082019092526001600160a01b0384169083906040516128a991906132d5565b60006040518083038185875af1925050503d80600081146128e6576040519150601f19603f3d011682016040523d82523d6000602084013e6128eb565b606091505b50509050806122155760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608401610442565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905291516000928392908716916129d391906132d5565b6000604051808303816000865af19150503d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b5091509150818015612a3f575080511580612a3f575080806020019051810190612a3f91906130b8565b612ab15760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610442565b5050505050565b6000612ac2612e67565b84815260208101849052604080820184905251635a53025d60e01b8152730f16C6b4Cf5B8FB090C2F89D5d7aD85d057eB76090635a53025d90612b09908490600401613398565b60206040518083038186803b158015612b2157600080fd5b505af4158015612b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5991906130f0565b95945050505050565b6000612b6c612ecb565b8381526020810183905260405163014cf2b360e51b8152735b79557e91aEA6a51d9757bA42E27ebf897332859063299e566090612bad908490600401613367565b60206040518083038186803b158015612bc557600080fd5b505af4158015612bd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219591906130f0565b604080518082019091526000808252602082015282516000908190158015612c2757506020850151155b15612c4557604080518082019091529182526020820152905061214a565b8351158015612c5657506020850151155b15612c7457604080518082019091529182526020820152905061214a565b600060008051602061360e83398151915285518751099050600060008051602061360e83398151915286602001518860200151099050600060008051602061360e83398151915280838509620292f8099050600060008051602061360e83398151915280895160208c01510960008051602061360e83398151915260208b01518c51090890506000612d298460008051602061360e83398151915287620292fc0960008051602061360e833981519152612dac565b905060008051602061360e833981519152612d5560008051602061360e83398151915285600108612df5565b8309965060008051602061360e833981519152612d8a612d8560018660008051602061360e833981519152612dac565b612df5565b8209604080518082019091529788526020880152509498975050505050505050565b600083838111612dc357612dc08382613415565b90505b8280612ddf57634e487b7160e01b600052601260045260246000fd5b6000612deb8684613547565b0895945050505050565b600061214a82612e14600260008051602061360e833981519152613547565b60008051602061360e833981519152600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360055afa80801561017757505051949350505050565b60405180606001604052806003906020820280368337509192915050565b60405180606001604052806003905b6060815260200190600190039081612e945790505090565b604051806101e00160405280600f906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b8051612ef4816135df565b919050565b806060810183101561214a57600080fd5b80610200810183101561214a57600080fd5b803563ffffffff81168114612ef457600080fd5b8051612ef4816135f7565b805160ff81168114612ef457600080fd5b600060208284031215612f5d578081fd5b8135610ebf816135df565b600080600060608486031215612f7c578182fd5b8335612f87816135df565b92506020840135612f97816135df565b929592945050506040919091013590565b60008060008060008060008060006103008a8c031215612fc6578485fd5b8935612fd1816135df565b985060208a0135975060408a0135612fe8816135f7565b9650612ff660608b01612f1c565b955060808a0135945060a08a013593506130138b60c08c01612f0a565b92506102c08a013591506102e08a013590509295985092959850929598565b600080600080600080610320878903121561304b578182fd5b6130558888612ef9565b95506130648860608901612ef9565b94506130738860c08901612ef9565b93506101e0870188811115613086578283fd5b6101208801935061030088018981111561309e578384fd5b8193506130aa81612f1c565b925050509295509295509295565b6000602082840312156130c9578081fd5b81518015158114610ebf578182fd5b6000602082840312156130e9578081fd5b5035919050565b600060208284031215613101578081fd5b5051919050565b60008060008060006102808688031215613120578283fd5b853594506020860135935060408601359250606086013591506131468760808801612f0a565b90509295509295909350565b600080600080848603610120811215613169578283fd5b8551613174816135df565b60208701516040880151919650945061318c816135df565b925060c0605f198201121561319f578182fd5b5060405160c0810181811067ffffffffffffffff821117156131cf57634e487b7160e01b83526041600452602483fd5b6040526131de60608701612f30565b81526131ec60808701612f3b565b60208201526131fd60a08701612f3b565b604082015261320e60c08701612f3b565b606082015261321f60e08701612f3b565b60808201526132316101008701612ee9565b60a0820152939692955090935050565b600080600060608486031215613255578081fd5b505081359360208301359350604090920135919050565b6000806040838503121561327e578182fd5b61328783612f1c565b9150602083013562ffffff8116811461329e578182fd5b809150509250929050565b600081518084526132c181602086016020860161355e565b601f01601f19169290920160200192915050565b600082516132e781846020870161355e565b9190910192915050565b6000835161330381846020880161355e565b83519083019061331781836020880161355e565b01949350505050565b60f885901b7fff0000000000000000000000000000000000000000000000000000000000000016815260608460018301376061810192909252608182015260a10192915050565b60408101818360005b600281101561338f578151835260209283019290910190600101613370565b50505092915050565b60608101818360005b600381101561338f5781518352602092830192909101906001016133a1565b602081526000610ebf60208301846132a9565b8381526000602080830185835b60038110156133fd578151835291830191908301906001016133e0565b5050505060a06080830152612b5960a08301846132a9565b60008219821115613428576134286135c9565b500190565b600181815b8085111561346857816000190482111561344e5761344e6135c9565b8085161561345b57918102915b93841c9390800290613432565b509250929050565b6000610ebf8383613487565b6000610ebf60ff8416835b6000826134965750600161214a565b816134a35750600061214a565b81600181146134b957600281146134c3576134df565b600191505061214a565b60ff8411156134d4576134d46135c9565b50506001821b61214a565b5060208310610133831016604e8410600b8410161715613502575081810a61214a565b61350c838361342d565b8060001904821115613520576135206135c9565b029392505050565b6000816000190483118215151615613542576135426135c9565b500290565b600082821015613559576135596135c9565b500390565b60005b83811015613579578181015183820152602001613561565b83811115613588576000848401525b50505050565b60006000198214156135a2576135a26135c9565b5060010190565b6000826135c457634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146135f457600080fd5b50565b67ffffffffffffffff811681146135f457600080fdfe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a164736f6c6343000804000a",
  "deployedBytecode": "$a786a838ef97de7d2113fa91ed3c799076$__635a53025d6040518060600160405280868152602001856000601081106110bf57634e487b7160e01b600052603260045260246000fd5b60200201358152602001856001601081106110ea57634e487b7160e01b600052603260045260246000fd5b60200201358152506040518263ffffffff1660e01b815260040161110e9190613398565b60206040518083038186803b15801561112657600080fd5b505af415801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e91906130f0565b90506112dc565b60018514156111e55773__$a786a838ef97de7d2113fa91ed3c799076$__635a53025d6040518060600160405280856000601081106111b457634e487b7160e01b600052603260045260246000fd5b60200201358152602001868152602001856001601081106110ea57634e487b7160e01b600052603260045260246000fd5b60028514156112dc5773__$a786a838ef97de7d2113fa91ed3c799076$__635a53025d60405180606001604052808560006010811061123457634e487b7160e01b600052603260045260246000fd5b602002013581526020018560016010811061125f57634e487b7160e01b600052603260045260246000fd5b60200201358152602001868152506040518263ffffffff1660e01b81526004016112899190613398565b60206040518083038186803b1580156112a157600080fd5b505af41580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d991906130f0565b90505b60025b601081101561149457600160011982011b85161580156113bf5773__$3d381aec2d571db697c779e211a438fb21$__63299e5660604051806040016040528086815260200187866010811061134457634e487b7160e01b600052603260045260246000fd5b60200201358152506040518263ffffffff1660e01b81526004016113689190613367565b60206040518083038186803b15801561138057600080fd5b505af4158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b891906130f0565b9250611481565b73__$3d381aec2d571db697c779e211a438fb21$__63299e5660604051806040016040528087866010811061140457634e487b7160e01b600052603260045260246000fd5b60200201358152602001868152506040518263ffffffff1660e01b815260040161142e9190613367565b60206040518083038186803b15801561144657600080fd5b505af415801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e91906130f0565b92505b508061148c8161358e565b9150506112df565b5060408051808201909152600581527f4d503a453100000000000000000000000000000000000000000000000000000060208201528682146114e95760405162461bcd60e51b815260040161044291906133c0565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461156a5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a65640000000000000000000000006044820152606401610442565b600260005414156115bd5760405162461bcd60e51b815260206004820152601a60248201527f636c61696d45726332303a207265656e7472616e742063616c6c0000000000006044820152606401610442565b60026000556115cd8383836121fd565b5050600160005550565b6000610db4600154600281901c600390810291160190565b6000818152609d6020908152604091829020548251808401909352600683527f50503a45333200000000000000000000000000000000000000000000000000009183019190915263ffffffff161561165a5760405162461bcd60e51b815260040161044291906133c0565b5060006116656116e0565b6000838152609d6020908152604091829020805463ffffffff191663ffffffff851690811790915591519182529192507f41685940dd65dd5fc11832115bda1957c2ed7b4e2982cfac6c3ba41bd1566a3c910161100a565b600060026116cd6001600f613547565b6116d79190613415565b9190911c919050565b6000610db442612225565b60008082611769576001600160a01b038516158015611708575083155b6040518060400160405280600681526020017f50503a45323900000000000000000000000000000000000000000000000000008152509061175c5760405162461bcd60e51b815260040161044291906133c0565b5060008091509150611afe565b6001600160a01b038516731afa2212970b809ae15d51af00c502d5c8eb3baf14156118905760408051808201909152600681527f50503a4532350000000000000000000000000000000000000000000000000000602082015284156117e15760405162461bcd60e51b815260040161044291906133c0565b5060006117ed8461227f565b604051631dc6ea1f60e11b8152336004820152602481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633b8dd43e90604401600060405180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b50505050730a1ebe17885f8603834b4c02054ce84cedf8756e819250925050611afe565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526040516331293c6360e01b81526001600160a01b038881166004830152602482018890527f000000000000000000000000000000000000000000000000000000000000000016906331293c63906044016101206040518083038186803b15801561192a57600080fd5b505afa15801561193e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119629190613152565b6040808201518151808301909252600682526550503a45313960d01b60208301529498509295509350909160ff1660011490506119b25760405162461bcd60e51b815260040161044291906133c0565b5060006119c38683608001516122e8565b90945090508015611a1257876001600160a01b03167f05b5d46649ab2015d3a08705cbaa391e094d9594c393ce89d3afffe960744da182604051611a0991815260200190565b60405180910390a25b6040805160a0808201835260608581015160ff9081168452918601516001600160a01b0390811660208501908152848601898152339386019384526bffffffffffffffffffffffff8d8116608088019081529751631d106e8960e21b81529651909516600487015290518216602486015251604485015290518116606484015292511660848201527f000000000000000000000000000000000000000000000000000000000000000090911690637441ba249060a401600060405180830381600087803b158015611ae257600080fd5b505af1158015611af6573d6000803e3d6000fd5b505050505050505b935093915050565b600060008051602061360e8339815191528611158015611b34575060008051602061360e8339815191528511155b6040518060400160405280600581526020017f43473a453100000000000000000000000000000000000000000000000000000081525090611b885760405162461bcd60e51b815260040161044291906133c0565b5060408051606081018252878152602080820188905263ffffffff85169086901b77ffffffffffffffffffffffffffffffffffffffff000000001660c088901b7fffffffffffffffff000000000000000000000000000000000000000000000000161717818301529051635a53025d60e01b815273__$a786a838ef97de7d2113fa91ed3c799076$__91635a53025d91611c259190600401613398565b60206040518083038186803b158015611c3d57600080fd5b505af4158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7591906130f0565b9695505050505050565b6040805160208101909152600080825290815b611c9e60016002613415565b811015611d8d5760008051602061360e833981519152868260038110611cd457634e487b7160e01b600052603260045260246000fd5b602002015160001c106040518060400160405280600581526020017f43543a453100000000000000000000000000000000000000000000000000000081525090611d315760405162461bcd60e51b815260040161044291906133c0565b5081858260038110611d5357634e487b7160e01b600052603260045260246000fd5b6020020151604051602001611d699291906132f1565b60405160208183030381529060405291508080611d859061358e565b915050611c92565b50611d9785612347565b9150817f724bdd8d0d4293d630d4223512262f7f1bd9e7bb88cadfef6de67ff0b0f1d8b4848784604051611dcd939291906133d3565b60405180910390a2509392505050565b60008282604051602001611e049291909182526001600160a01b0316602082015260400190565b60408051601f1981840301815282825280516020918201206000818152609d835283902054848401909352600684527f50503a453334000000000000000000000000000000000000000000000000000091840191909152925063ffffffff169081611e825760405162461bcd60e51b815260040161044291906133c0565b50609b54600090611ea690640100000000900462ffffff1663ffffffff8416613415565b90508042116040518060400160405280600681526020017f50503a453333000000000000000000000000000000000000000000000000000081525090611eff5760405162461bcd60e51b815260040161044291906133c0565b5050506000908152609d60205260409020805463ffffffff191690555050565b600060008051602061360e8339815191528310604051806040016040528060068152602001650a0a0748a64760d31b81525090611f6f5760405162461bcd60e51b815260040161044291906133c0565b5060408051808201909152600681527f50503a4532370000000000000000000000000000000000000000000000000000602082015260008051602061360e8339815191528310611fd25760405162461bcd60e51b815260040161044291906133c0565b5060408051808201825284815260208101849052905163014cf2b360e51b815273__$3d381aec2d571db697c779e211a438fb21$__9163299e56609161201b9190600401613367565b60206040518083038186803b15801561203357600080fd5b505af4158015612047573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf91906130f0565b60408051808201909152600080825260208201526040805180820190915260068152650a0a0748a64760d31b602082015260008051602061360e83398151915283106120ca5760405162461bcd60e51b815260040161044291906133c0565b50604080518082019091527f0bb77a6ad63e739b4eacb2e09d6277c12ab8d8010534e0b62893f3f6bb95705181527f25797203f7a0b24925572e1cd16bf9edfce0051fb9e133774b3c257a872d7d8b6020820152610ebf8184612775565b600060036121408361ffff166001810160021c900390565b61214a91906135a9565b92915050565b60008060ff83161561217e576121658361280c565b6121799067ffffffffffffffff8616613528565b61218a565b8367ffffffffffffffff165b905061219581612819565b949350505050565b6000600160046121ae82600f613547565b6121b9906002613470565b6121c39190613528565b6121cd9190613547565b90911615919050565b600060016121e76004610100613528565b6121f19190613547565b82166001179050919050565b6001600160a01b03831661221a57612215828261287f565b505050565b612215838383612962565b6000640100000000821061227b5760405162461bcd60e51b815260206004820152600860248201527f554e5341464533320000000000000000000000000000000000000000000000006044820152606401610442565b5090565b60006801000000000000000082106040518060400160405280600681526020017f50503a4532360000000000000000000000000000000000000000000000000000815250906122e15760405162461bcd60e51b815260040161044291906133c0565b5090919050565b6000808060ff84166122ff57506000905083612334565b600061230a8561280c565b905080868161232957634e487b7160e01b600052601260045260246000fd5b049081028603925090505b61233d8161227f565b9250509250929050565b600154612352612eac565b7f0667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d81527f1be18cd72ac1586de27dd60eba90654bd54383004991951bccb0f6bad02c67f660208201527f07677e6102f0acf343edde864f79ef7652faa5a66d575b8b60bb826a4aa517e660408201527f28a85866ab97bd65cc94b0d1f5c5986481f8a0d65bdd5c1e562659eebb13cf6360608201527f087321a66ea3af7780128ea1995d7fc6ec44a96a1b2d85d3021208cede68c15c60808201527f233b4e488f0aaf5faef4fc8ea4fefeadb6934eb882bc33b9df782fd1d83b41a060a08201527f1a0cefcf0c592da6426717d3718408c61af1d0a9492887f3faecefcba1a0a30960c08201527f2cdf963150b321923dd07b2b52659aceb529516a537dfebe24106881dd97429360e08201527f093a186bf9ec2cc874ceab26409d581579e1a431ecb6987d428777ceedfa15c46101008201527f0cbfc07131ef4197a4b4e60153d43381520ec9ab4c9c3ed34d88883a881a4e076101208201527f17b31de43ba4c687cf950ad00dfbe33df40047e79245b50bd1d9f87e622bf2af6101408201527f2f3328354bceaf5882a8cc88053e0dd0ae594009a4e84e9e75a4fefe8604a6026101608201527f2b2e8defd4dad2404c6874918925fc1192123f45df0ee3e04b6c16ff22ca1cfd6101808201527f1cbdc4065aa4137da01d64a090706267d65f425ea5e815673516d29d9aa14d386101a08201527f13ca69f9fde4ece39e395bb55dd41ed7dd9dfaa26671e26bd9fd6f4f635fc8726101c0820152825160208401516040850151600092839283926125ae929190612ab8565b91506002600160046125c182600f613547565b6125cc906002613470565b6125d69190613528565b6125e09190613547565b8616901c9250600080600192505b600f831015612685576126026002866135a9565b61264d578391508583600f811061262957634e487b7160e01b600052603260045260246000fd5b60200201519050836002600085815260200190815260200160002081905550612660565b5050600081815260026020526040902054825b61266a8282612b62565b60019590951c9493508261267d8161358e565b9350506125ee565b6000612692600489613415565b6001819055905060006126a4896116bd565b9050600461ffff8a1662010000031161270957600081815260036020526040908190208790555181907f7cd9c9cf009b511548bb15f2d648fc3ee3e6e880d24f043861b274dca5a55435906126fc9089815260200190565b60405180910390a2612768565b6000612714836121d6565b6000818152600460205260409081902089851890555190915082907f46b4356c55762628b29b60a689ae18c610a9cd9774ca704e7a567aa41bb7cebf9061275e908a815260200190565b60405180910390a2505b5050505050505050919050565b60408051808201909152600081526001602082015281835b81156127c45781600116600114156127ac576127a98382612bfd565b92505b6127b68182612bfd565b9050600182901c915061278d565b82516127df9060008051602061360e833981519152906135a9565b835260208301516127ff9060008051602061360e833981519152906135a9565b6020840152505092915050565b600061214a82600a61347c565b60006c0100000000000000000000000082106040518060400160405280600681526020017f50503a4531300000000000000000000000000000000000000000000000000000815250906122e15760405162461bcd60e51b815260040161044291906133c0565b604080516000808252602082019092526001600160a01b0384169083906040516128a991906132d5565b60006040518083038185875af1925050503d80600081146128e6576040519150601f19603f3d011682016040523d82523d6000602084013e6128eb565b606091505b50509050806122155760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608401610442565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905291516000928392908716916129d391906132d5565b6000604051808303816000865af19150503d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b5091509150818015612a3f575080511580612a3f575080806020019051810190612a3f91906130b8565b612ab15760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610442565b5050505050565b6000612ac2612e67565b84815260208101849052604080820184905251635a53025d60e01b815273__$a786a838ef97de7d2113fa91ed3c799076$__90635a53025d90612b09908490600401613398565b60206040518083038186803b158015612b2157600080fd5b505af4158015612b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5991906130f0565b95945050505050565b6000612b6c612ecb565b8381526020810183905260405163014cf2b360e51b815273__$3d381aec2d571db697c779e211a438fb21$__9063299e566090612bad908490600401613367565b60206040518083038186803b158015612bc557600080fd5b505af4158015612bd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219591906130f0565b604080518082019091526000808252602082015282516000908190158015612c2757506020850151155b15612c4557604080518082019091529182526020820152905061214a565b8351158015612c5657506020850151155b15612c7457604080518082019091529182526020820152905061214a565b600060008051602061360e83398151915285518751099050600060008051602061360e83398151915286602001518860200151099050600060008051602061360e83398151915280838509620292f8099050600060008051602061360e83398151915280895160208c01510960008051602061360e83398151915260208b01518c51090890506000612d298460008051602061360e83398151915287620292fc0960008051602061360e833981519152612dac565b905060008051602061360e833981519152612d5560008051602061360e83398151915285600108612df5565b8309965060008051602061360e833981519152612d8a612d8560018660008051602061360e833981519152612dac565b612df5565b8209604080518082019091529788526020880152509498975050505050505050565b600083838111612dc357612dc08382613415565b90505b8280612ddf57634e487b7160e01b600052601260045260246000fd5b6000612deb8684613547565b0895945050505050565b600061214a82612e14600260008051602061360e833981519152613547565b60008051602061360e833981519152600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360055afa80801561017757505051949350505050565b60405180606001604052806003906020820280368337509192915050565b60405180606001604052806003905b6060815260200190600190039081612e945790505090565b604051806101e00160405280600f906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b8051612ef4816135df565b919050565b806060810183101561214a57600080fd5b80610200810183101561214a57600080fd5b803563ffffffff81168114612ef457600080fd5b8051612ef4816135f7565b805160ff81168114612ef457600080fd5b600060208284031215612f5d578081fd5b8135610ebf816135df565b600080600060608486031215612f7c578182fd5b8335612f87816135df565b92506020840135612f97816135df565b929592945050506040919091013590565b60008060008060008060008060006103008a8c031215612fc6578485fd5b8935612fd1816135df565b985060208a0135975060408a0135612fe8816135f7565b9650612ff660608b01612f1c565b955060808a0135945060a08a013593506130138b60c08c01612f0a565b92506102c08a013591506102e08a013590509295985092959850929598565b600080600080600080610320878903121561304b578182fd5b6130558888612ef9565b95506130648860608901612ef9565b94506130738860c08901612ef9565b93506101e0870188811115613086578283fd5b6101208801935061030088018981111561309e578384fd5b8193506130aa81612f1c565b925050509295509295509295565b6000602082840312156130c9578081fd5b81518015158114610ebf578182fd5b6000602082840312156130e9578081fd5b5035919050565b600060208284031215613101578081fd5b5051919050565b60008060008060006102808688031215613120578283fd5b853594506020860135935060408601359250606086013591506131468760808801612f0a565b90509295509295909350565b600080600080848603610120811215613169578283fd5b8551613174816135df565b60208701516040880151919650945061318c816135df565b925060c0605f198201121561319f578182fd5b5060405160c0810181811067ffffffffffffffff821117156131cf57634e487b7160e01b83526041600452602483fd5b6040526131de60608701612f30565b81526131ec60808701612f3b565b60208201526131fd60a08701612f3b565b604082015261320e60c08701612f3b565b606082015261321f60e08701612f3b565b60808201526132316101008701612ee9565b60a0820152939692955090935050565b600080600060608486031215613255578081fd5b505081359360208301359350604090920135919050565b6000806040838503121561327e578182fd5b61328783612f1c565b9150602083013562ffffff8116811461329e578182fd5b809150509250929050565b600081518084526132c181602086016020860161355e565b601f01601f19169290920160200192915050565b600082516132e781846020870161355e565b9190910192915050565b6000835161330381846020880161355e565b83519083019061331781836020880161355e565b01949350505050565b60f885901b7fff0000000000000000000000000000000000000000000000000000000000000016815260608460018301376061810192909252608182015260a10192915050565b60408101818360005b600281101561338f578151835260209283019290910190600101613370565b50505092915050565b60608101818360005b600381101561338f5781518352602092830192909101906001016133a1565b602081526000610ebf60208301846132a9565b8381526000602080830185835b60038110156133fd578151835291830191908301906001016133e0565b5050505060a06080830152612b5960a08301846132a9565b60008219821115613428576134286135c9565b500190565b600181815b8085111561346857816000190482111561344e5761344e6135c9565b8085161561345b57918102915b93841c9390800290613432565b509250929050565b6000610ebf8383613487565b6000610ebf60ff8416835b6000826134965750600161214a565b816134a35750600061214a565b81600181146134b957600281146134c3576134df565b600191505061214a565b60ff8411156134d4576134d46135c9565b50506001821b61214a565b5060208310610133831016604e8410600b8410161715613502575081810a61214a565b61350c838361342d565b8060001904821115613520576135206135c9565b029392505050565b6000816000190483118215151615613542576135426135c9565b500290565b600082821015613559576135596135c9565b500390565b60005b83811015613579578181015183820152602001613561565b83811115613588576000848401525b50505050565b60006000198214156135a2576135a26135c9565b5060010190565b6000826135c457634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146135f457600080fd5b50565b67ffffffffffffffff811681146135f457600080fdfe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a164736f6c6343000804000a",
  "libraries": {
    "PoseidonT3": "0x5b79557e91aEA6a51d9757bA42E27ebf89733285",
    "PoseidonT4": "0x0f16C6b4Cf5B8FB090C2F89D5d7aD85d057eB760",
    "PoseidonT6": "0x811de6962F21EbBf3142f3a8c0db0e825a752A48"
  },
  "devdoc": {
    "author": "Pantherprotocol Contributors",
    "details": "It is the \"version 0\" of the Panther Protocol Multi-Asset Shielded Pool (\"MASP\"). It locks assets (ERC-20, ERC-721 or ERC-1155 tokens) of a user with the `Vault` smart contract and generates UTXO's in the MASP for the user (i.e. builds merkle trees of UTXO's commitments). It can also generate UTX0's with \"Panther Reward Points\" (aka \"PRP\", a special unit). To get a PRP UTXO, a user must be given a \"grant\" booked in the `PrpGrantor` contract. The present contract is assumed to have the \"grant processor\" role with the latest. This contract does not implement the functionality for spending UTXO's (other than the `exit` described further) and is supposed to be upgraded with the new one. The new contract, the \"v.1\" of the MASP, is planned to implement spending of UTXO's using zero-knowledge proves. To be upgradable, this contract is assumed to run as an \"implementation\" for a proxy that DELEGATECALL's the implementation. To protect holders against lost of assets in case this contract is not upgraded, it exposes the `exit` function, through which users may withdraw their locked assets via revealing preimages of commitments.",
    "events": {
      "Change(address,uint256)": {
        "details": "A tiny disowned token amount gets locked in the Vault (as a result of imprecise scaling of deposited amounts)"
      },
      "ExitCommitment(uint256)": {
        "details": "New exit commitment registered"
      },
      "ExitTimesUpdated(uint256,uint256)": {
        "details": "Emitted when exit time and/or exit delay updated"
      },
      "Nullifier(bytes32)": {
        "details": "New nullifier has been seen"
      }
    },
    "kind": "dev",
    "methods": {
      "claimEthOrErc20(address,address,uint256)": {
        "details": "The \"owner\" may call only"
      },
      "commitToExit(bytes32)": {
        "params": {
          "exitCommitment": "Commitment to the UTXO spending key and the recipient address. MUST be equal to keccak256(abi.encode(uint256(privSpendingKey), address(recipient))."
        }
      },
      "constructor": {
        "params": {
          "_owner": "Address of the `OWNER` who may call `onlyOwner` methods",
          "assetRegistry": "Address of the ZAssetRegistry contract",
          "prpGrantor": "Address of the PrpGrantor contract",
          "vault": "Address of the Vault contract"
        }
      },
      "exit(address,uint256,uint64,uint32,uint256,uint256,bytes32[16],bytes32,uint256)": {
        "details": "`cacheIndexHint` needed for the \"current\" (partially populated) tree only",
        "params": {
          "cacheIndexHint": "Index of the `merkleRoot` in the cache of roots, 0 by default",
          "leafId": "Id of the leaf with the UTXO commitments in the Merkle Trees",
          "merkleRoot": "The root of the Merkle Tree the leaf is a part of",
          "pathElements": "Elements of the Merkle proof of inclusion",
          "privSpendingKey": "UTXO's Private Spending Key",
          "scaledAmount": "Token scaled amount"
        }
      },
      "generateDeposits(address[3],uint256[3],uint256[3],(uint256,uint256)[3],uint256[3][3],uint32)": {
        "details": "For PRP granted the address ot this contract (proxy) is supposed to be usedcreatedAt must be less (or equal) the network time",
        "params": {
          "amounts": "Token amounts (unscaled) to be deposited",
          "createdAt": "Optional, if 0 the network time used",
          "pubSpendingKeys": "Public Spending Key for every UTXO",
          "secrets": "Encrypted opening values for every UTXO",
          "tokenIds": "For ERC-721 and ERC-1155 - token ID or subId of the token, 0 for ERC-20",
          "tokens": "Address of the token contract for every UTXO"
        },
        "returns": {
          "leftLeafId": "The `leafId` of the first UTXO (leaf) in the batch"
        }
      },
      "isKnownRoot(uint256,bytes32,uint256)": {
        "params": {
          "cacheIndexHint": "Index of the root in the cache, ignored if 0"
        }
      },
      "updateExitTimes(uint32,uint24)": {
        "details": "Owner only may calls"
      },
      "verifyMerkleProof(bytes32,uint256,uint256,bytes32,bytes32[16])": {
        "details": "Returns true if a `leaf` can be proved to be a part of a Merkle treedefined by `root`. For this, a `proof` must be provided, containingsibling hashes on the branch from the leaf to the root of the tree.",
        "params": {
          "leaf": "- commitment leaf value",
          "merkleRoot": "- verify checked to this hash",
          "pathElements": "- TREE_DEPTH + 1 elements - c1,c2 & path-elements",
          "triadIndex": "- index inside triad = { 0, 1, 2 }",
          "triadNodeIndex": "- index of triad hash ( c0,c1,c2 ) in the tree - Triad contract insures its is in range"
        }
      }
    },
    "title": "PantherPool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ASSET_REGISTRY()": {
        "notice": "Address of the ZAssetRegistry contract"
      },
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "PRP_GRANTOR()": {
        "notice": "Address of the PrpGrantor contract"
      },
      "VAULT()": {
        "notice": "Address of the Vault contract"
      },
      "claimEthOrErc20(address,address,uint256)": {
        "notice": "Withdraw accidentally sent tokens or ETH from this contract"
      },
      "commitToExit(bytes32)": {
        "notice": "Register future `exit` to protect against front-run and DoS. The `exit` is possible only after `exitDelay` since this function call."
      },
      "curRoot()": {
        "notice": "Returns the root of the current tree and its index in cache"
      },
      "curTree()": {
        "notice": "Returns `treeId` of the current tree"
      },
      "exitCommitments(bytes32)": {
        "notice": "Unused registered commitments to exit"
      },
      "exitDelay()": {
        "notice": "Period (seconds) since `commitToExit` when `exit` opens"
      },
      "exitTime()": {
        "notice": "(UNIX) Time since when the `exit` calls get enabled"
      },
      "finalRoots(uint256)": {
        "notice": "Roots of fully populated trees"
      },
      "generateDeposits(address[3],uint256[3],uint256[3],(uint256,uint256)[3],uint256[3][3],uint32)": {
        "notice": "Transfer assets from the msg.sender to the VAULT and generate UTXOs in the MASP"
      },
      "getLeafIndex(uint256)": {
        "notice": "Returns `leafIndex` (index in the tree) of the given leaf"
      },
      "getTreeId(uint256)": {
        "notice": "Returns `treeId` of the given leaf's tree"
      },
      "isKnownRoot(uint256,bytes32,uint256)": {
        "notice": "Returns `true` if the given root of the given tree is known"
      },
      "leavesNum()": {
        "notice": "Returns the number of leaves inserted in all trees so far"
      },
      "updateExitTimes(uint32,uint24)": {
        "notice": "Update the exit time and the exit delay"
      }
    },
    "notice": "Multi-Asset Shielded Pool main contract v0",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5675,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "_reentrancyStatus",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9032,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "_nextLeafId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9036,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "_filledSubtrees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 9041,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "finalRoots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 9045,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "_cachedRoots",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9621,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8664,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "__gap",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3562,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "__gap",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3574,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "exitTime",
        "offset": 0,
        "slot": "155",
        "type": "t_uint32"
      },
      {
        "astId": 3577,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "exitDelay",
        "offset": 4,
        "slot": "155",
        "type": "t_uint24"
      },
      {
        "astId": 3579,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "_reserved",
        "offset": 7,
        "slot": "155",
        "type": "t_uint200"
      },
      {
        "astId": 3583,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "isSpent",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3588,
        "contract": "contracts/protocol/PantherPoolV0.sol:PantherPoolV0",
        "label": "exitCommitments",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint200": {
        "encoding": "inplace",
        "label": "uint200",
        "numberOfBytes": "25"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}