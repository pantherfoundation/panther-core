{
  "address": "0x8050ab2D19b32A00c537669b11d13a509155CF1e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zkpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taxiTree",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "busTree",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ferryTree",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staticTree",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zAccountRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prpVoucherGrantor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "updatedLeaf",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "updatedRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cacheIndex",
          "type": "uint256"
        }
      ],
      "name": "RootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "txType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "content",
          "type": "bytes"
        }
      ],
      "name": "TransactionNote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUS_TREE",
      "outputs": [
        {
          "internalType": "contract IBusTree",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BUS_TREE_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FERRY_TREE_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRP_VOUCHER_GRANTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATIC_TREE_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAXI_TREE_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDEFINED_CACHE_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERIFIER",
      "outputs": [
        {
          "internalType": "contract IPantherVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZACCOUNT_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct SnarkProof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "privateMessages",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "cachedForestRootIndex",
          "type": "uint256"
        }
      ],
      "name": "accountPrp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "utxoBusQueuePos",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountedRewards",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct SnarkProof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "zkpPayer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "privateMessages",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "cachedForestRootIndex",
          "type": "uint256"
        }
      ],
      "name": "createZAccountUtxo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "utxoBusQueuePos",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct SnarkProof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "privateMessages",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "zkpAmountOutRounded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cachedForestRootIndex",
          "type": "uint256"
        }
      ],
      "name": "createZzkpUtxoAndSpendPrpUtxo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "zAccountUtxoBusQueuePos",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCacheStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numRootsCached",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestCacheIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cacheIndex",
          "type": "uint256"
        }
      ],
      "name": "isCachedRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCached",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kycReward",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "leafs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct SnarkProof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "cachedForestRootIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "privateMessages",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "main",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "zAccountUtxoBusQueuePos",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainCircuitId",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTimeDelta",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prpAccountConversionCircuitId",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prpAccountingCircuitId",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "extAccount",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "extAmount",
              "type": "uint96"
            }
          ],
          "internalType": "struct LockData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "unlockAssetFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_kycReward",
          "type": "uint96"
        }
      ],
      "name": "updateKycReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "_circuitId",
          "type": "uint160"
        }
      ],
      "name": "updateMainCircuitId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxTimeDelta",
          "type": "uint32"
        }
      ],
      "name": "updateMaxTimeDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "_circuitId",
          "type": "uint160"
        }
      ],
      "name": "updatePrpAccountConversionCircuitId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "_circuitId",
          "type": "uint160"
        }
      ],
      "name": "updatePrpAccountingCircuitId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "updatedLeaf",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "leafIndex",
          "type": "uint256"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unlocker",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateVaultAssetUnlocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "_circuitId",
          "type": "uint160"
        }
      ],
      "name": "updateZAccountRegistrationCircuitId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultAssetUnlockers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zAccountRegistrationCircuitId",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x17d74cd9ddd017d2c19c4dede0c82629076a39903ab4d6dac19d84edf951c360",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x8050ab2D19b32A00c537669b11d13a509155CF1e",
    "transactionIndex": 6,
    "gasUsed": "4711386",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008004000000020000000000000000000000000000000000000000000000800000000001000000000100000000000000000001000000000000000000000000000000000000000080000000000000000000000000000020000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000002000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xc7816c38d5080e9edc43d258c754515228fdbf9dfeeab8e4d1a64e82723e49e8",
    "transactionHash": "0x17d74cd9ddd017d2c19c4dede0c82629076a39903ab4d6dac19d84edf951c360",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 44613819,
        "transactionHash": "0x17d74cd9ddd017d2c19c4dede0c82629076a39903ab4d6dac19d84edf951c360",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x0000000000000000000000004cefb7df2ff89a05ddd0176de11e01ef0cf7ed84"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000237c28a809b660000000000000000000000000000000000000000000000000092dabc2e1dc700f00000000000000000000000000000000000000000000004149179662acb27f49000000000000000000000000000000000000000000000000090a2f9a39d2b9af000000000000000000000000000000000000000000000041493b128b54bc35a9",
        "logIndex": 24,
        "blockHash": "0xc7816c38d5080e9edc43d258c754515228fdbf9dfeeab8e4d1a64e82723e49e8"
      }
    ],
    "blockNumber": 44613819,
    "cumulativeGasUsed": "6533398",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0x4004C49aBb96B11D89A52DeCCa2D1522da7f3089",
    "0x2EEEF61718ae9743050028075D5B16ef5bF22c88",
    "0x678D34aA4fc546bA806287a8289FfdAA84681a03",
    "0x5c91d70Cd7cf569CA9Ac8DE588705B3f118647DF",
    "0xAbFdb07BC6db782F9bdd6C6BA65ee40081eFA4c4",
    "0x9619bd59411a8387a4119e548017C5b86c7bCec5",
    "0x518cD70a767d87Bcec1262adcf7bf5520e2e3B5D",
    "0x0b8D09a40B696d8173088cdA505DaD0167394B4C",
    "0xeeAfce13506847a19141A4513718df17383f4f7b"
  ],
  "numDeployments": 8,
  "solcInputHash": "8929a618e86647edd07b95deef0dbe59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zkpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxiTree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"busTree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ferryTree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staticTree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zAccountRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prpVoucherGrantor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"updatedLeaf\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"updatedRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cacheIndex\",\"type\":\"uint256\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"TransactionNote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUS_TREE\",\"outputs\":[{\"internalType\":\"contract IBusTree\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUS_TREE_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FERRY_TREE_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRP_VOUCHER_GRANTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATIC_TREE_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAXI_TREE_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDEFINED_CACHE_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER\",\"outputs\":[{\"internalType\":\"contract IPantherVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZACCOUNT_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct SnarkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"privateMessages\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"cachedForestRootIndex\",\"type\":\"uint256\"}],\"name\":\"accountPrp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"utxoBusQueuePos\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountedRewards\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct SnarkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"zkpPayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"privateMessages\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"cachedForestRootIndex\",\"type\":\"uint256\"}],\"name\":\"createZAccountUtxo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"utxoBusQueuePos\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct SnarkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"privateMessages\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"zkpAmountOutRounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cachedForestRootIndex\",\"type\":\"uint256\"}],\"name\":\"createZzkpUtxoAndSpendPrpUtxo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zAccountUtxoBusQueuePos\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCacheStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numRootsCached\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestCacheIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cacheIndex\",\"type\":\"uint256\"}],\"name\":\"isCachedRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCached\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycReward\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leafs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct SnarkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"cachedForestRootIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"privateMessages\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"main\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zAccountUtxoBusQueuePos\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainCircuitId\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDelta\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prpAccountConversionCircuitId\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prpAccountingCircuitId\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extAccount\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"extAmount\",\"type\":\"uint96\"}],\"internalType\":\"struct LockData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"unlockAssetFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_kycReward\",\"type\":\"uint96\"}],\"name\":\"updateKycReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_circuitId\",\"type\":\"uint160\"}],\"name\":\"updateMainCircuitId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxTimeDelta\",\"type\":\"uint32\"}],\"name\":\"updateMaxTimeDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_circuitId\",\"type\":\"uint160\"}],\"name\":\"updatePrpAccountConversionCircuitId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_circuitId\",\"type\":\"uint160\"}],\"name\":\"updatePrpAccountingCircuitId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"updatedLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unlocker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateVaultAssetUnlocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_circuitId\",\"type\":\"uint160\"}],\"name\":\"updateZAccountRegistrationCircuitId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAssetUnlockers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zAccountRegistrationCircuitId\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountPrp(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256)\":{\"details\":\"It spends the old zAccount utxo and create a new one with increased prp balance. It can be executed only be prpVoucherGrantor.\",\"params\":{\"cachedForestRootIndex\":\"forest merkle root index. 0 means the most updated root.\",\"inputs\":\"[14] - magicalConstraint;\",\"privateMessages\":\"the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText This data is used to spend the newly created utxo.\",\"proof\":\"A proof associated with the zAccount and a secret.\"}},\"createZAccountUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),address,bytes,uint256)\":{\"details\":\"It can be executed only by zAccountsRegistry contract.\",\"params\":{\"cachedForestRootIndex\":\"forest merkle root index. 0 means the most updated root.\",\"inputs\":\"[18] - magicalConstraint\",\"privateMessages\":\"the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText\",\"proof\":\"A proof associated with the zAccount and a secret.\",\"zkpPayer\":\"Wallet that withdraws onboarding zkp rewards\"}},\"createZzkpUtxoAndSpendPrpUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256,uint256)\":{\"details\":\"It converts prp to zZkp. The msg.sender should approve pantherPool to transfer the ZKPs to the vault in order to create new zAsset utxo. In ideal case, the msg sender is prpConverter. This function also spend the old zAccount utxo and creates new one with decreased prp balance.\",\"params\":{\"cachedForestRootIndex\":\"forest merkle root index. 0 means the most updated root.\",\"inputs\":\"[14] - magicalConstraint;\",\"privateMessages\":\"the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText This data is used to spend the newly created utxo.\",\"proof\":\"A proof associated with the zAccount and a secret.\",\"zkpAmountOutRounded\":\"The zkp amount to be locked in the vault, rounded by 1e12.\"}},\"main(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256,bytes,uint8)\":{\"params\":{\"inputs\":\"[41] - magicalConstraint;\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"accountPrp(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256)\":{\"notice\":\"Accounts prp to zAccount\"},\"createZAccountUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),address,bytes,uint256)\":{\"notice\":\"Creates zAccount utxo\"},\"createZzkpUtxoAndSpendPrpUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256,uint256)\":{\"notice\":\"Accounts prp conversion\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/PantherPoolV1.sol\":\"PantherPoolV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n// Constants\\n\\nuint256 constant IN_PRP_UTXOs = 1;\\nuint256 constant IN_UTXOs = 2 + IN_PRP_UTXOs;\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\nuint256 constant OUT_MAX_UTXOs = OUT_UTXOs;\\n// Number of UTXOs given as a reward for an \\\"advanced\\\" stake\\nuint256 constant OUT_RWRD_UTXOs = 2;\\n\\n// For overflow protection and circuits optimization\\n// (must be less than the FIELD_SIZE)\\nuint256 constant MAX_EXT_AMOUNT = 2 ** 96;\\nuint256 constant MAX_IN_CIRCUIT_AMOUNT = 2 ** 64;\\nuint256 constant MAX_TIMESTAMP = 2 ** 32;\\nuint256 constant MAX_ZASSET_ID = 2 ** 160;\\n\\n// Maximum amount for PRP\\nuint256 constant MAX_PRP_AMOUNT = (2 ** 64) - 1;\\n\\n// Token types\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant ERC20_TOKEN_TYPE = 0x00;\\nuint8 constant ERC721_TOKEN_TYPE = 0x10;\\nuint8 constant ERC1155_TOKEN_TYPE = 0x11;\\nuint8 constant NATIVE_TOKEN_TYPE = 0xFF;\\n\\n// ZAsset statuses\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant zASSET_ENABLED = 0x01;\\nuint8 constant zASSET_DISABLED = 0x02;\\nuint8 constant zASSET_UNKNOWN = 0x00;\\n\\n// UTXO data (opening values - encrypted and public) formats\\nuint8 constant UTXO_DATA_TYPE5 = 0x00; // for zero UTXO (no data to provide)\\nuint8 constant UTXO_DATA_TYPE1 = 0x01; // for UTXO w/ zero tokenId\\nuint8 constant UTXO_DATA_TYPE3 = 0x02; // for UTXO w/ non-zero tokenId\\n\\n// Grant Types\\n// bytes4(keccak256('panther-onboarding-grantor'))\\nbytes4 constant GT_ONBOARDING = 0x93b212ae;\\n// The \\\"prp grant type\\\" for the \\\"release and bridge\\\" ZKPs\\n// bytes4(keccak256(\\\"panther-zkp-release\\\"))\\nbytes4 constant GT_ZKP_RELEASE = 0x53a1eb85;\\n\\n// Number of 32-bit words of the CiphertextMsg for UTXO_DATA_TYPE1\\n// (ephemeral key (packed) - 32 bytes, encrypted `random` - 32 bytes)\\nuint256 constant CIPHERTEXT1_WORDS = 2;\\n\\n// Number of 32-bit words in the (uncompressed) spending PubKey\\nuint256 constant PUBKEY_WORDS = 2;\\n// Number of elements in `pathElements`\\nuint256 constant PATH_ELEMENTS_NUM = 16;\\n\\n// @dev Unusable on public network address, which is useful for simulations\\n//  in forked test env, e.g. for bypassing SNARK proof verification like this:\\n// `require(isValidProof || tx.origin == DEAD_CODE_ADDRESS)`\\naddress constant DEAD_CODE_ADDRESS = address(uint160(0xDEADC0DE));\\n\\n// 100% expressed in 1/100th of 1% (\\\"pips\\\")\\nuint256 constant HUNDRED_PERCENT = 100 * 100;\\n\",\"keccak256\":\"0x90e1f3e6c9547a0d320e69d419fbf68935c811f8c68c294875761edc59a7dd4a\",\"license\":\"BUSL-1.1\"},\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title ImmutableOwnable\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x06d3e09256c510bd1a5c8f6f05cc99fbc0d51919f2a64e022395bc169c349d90\",\"license\":\"MIT\"},\"contracts/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\n// Encoding of field elements is: X[0] * z + X[1]\\nstruct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n}\\n\\n// Verification key for SNARK\\nstruct VerifyingKey {\\n    G1Point alfa1;\\n    G2Point beta2;\\n    G2Point gamma2;\\n    G2Point delta2;\\n    G1Point[] ic;\\n}\\n\\nstruct SnarkProof {\\n    G1Point a;\\n    G2Point b;\\n    G1Point c;\\n}\\n\\nstruct PluginData {\\n    address contractAddress;\\n    bytes callData;\\n}\\n\\nstruct ElGamalCiphertext {\\n    G1Point c1;\\n    G1Point c2;\\n}\\n\\n// For MASP V0 and V1\\nstruct ZAsset {\\n    // reserved (for networkId, tokenIdPolicy. etc..)\\n    uint64 _unused;\\n    // 0x00 by default\\n    uint8 version;\\n    // Refer to Constants.sol\\n    uint8 status;\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // 0x00 - no scaling\\n    uint8 scale;\\n    // token contract address\\n    address token;\\n}\\n\\nstruct LockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint96 extAmount;\\n}\\n\\nstruct SaltedLockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The salt to use w/ CREATE2\\n    bytes32 salt;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint256 extAmount;\\n}\\n\",\"keccak256\":\"0xb086580b8c0d95db80863b6775cc19ba85206cc3197e1577592872e2fee610e7\",\"license\":\"MIT\"},\"contracts/common/UtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.16;\\n\\nlibrary UtilsLib {\\n    function safe24(uint256 n) internal pure returns (uint24) {\\n        require(n < 2 ** 24, \\\"UNSAFE24\\\");\\n        return uint24(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2 ** 32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe40(uint256 n) internal pure returns (uint40) {\\n        require(n < 2 ** 40, \\\"UNSAFE40\\\");\\n        return uint40(n);\\n    }\\n\\n    function safe64(uint256 n) internal pure returns (uint64) {\\n        require(n < 2 ** 64, \\\"UNSAFE64\\\");\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2 ** 96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2 ** 128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2 ** 160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        uint256 t = block.timestamp;\\n        require(t < 2 ** 32, \\\"UNSAFE32TIME\\\");\\n        return uint32(t);\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        uint256 b = block.number;\\n        require(b < 2 ** 32, \\\"UNSAFE32BLOCK\\\");\\n        return uint32(b);\\n    }\\n\\n    function revertZeroAddress(address account) internal pure {\\n        require(account != address(0), \\\"UNEXPECTED_ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1c3aaef98d25b0e694bff9ec693d4d22586b21a197bc004ef1e8c8b12882516b\",\"license\":\"MIT\"},\"contracts/protocol/PantherPoolV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2023s Panther Ventures Limited Gibraltar\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IPantherVerifier.sol\\\";\\nimport \\\"./interfaces/IBusTree.sol\\\";\\nimport \\\"./interfaces/IPantherPoolV1.sol\\\";\\n\\nimport \\\"./../common/ImmutableOwnable.sol\\\";\\nimport { ERC20_TOKEN_TYPE, MAX_PRP_AMOUNT } from \\\"./../common/Constants.sol\\\";\\nimport { LockData } from \\\"./../common/Types.sol\\\";\\nimport \\\"./../common/UtilsLib.sol\\\";\\n\\nimport \\\"./errMsgs/PantherPoolV1ErrMsgs.sol\\\";\\n\\nimport \\\"./pantherForest/PantherForest.sol\\\";\\nimport \\\"./pantherPool/TransactionNoteEmitter.sol\\\";\\n\\ncontract PantherPoolV1 is\\n    PantherForest,\\n    TransactionNoteEmitter,\\n    IPantherPoolV1\\n{\\n    // initialGap - PantherForest slots - CachedRoots slots => 500 - 22 - 25\\n    // slither-disable-next-line shadowing-state unused-state\\n    uint256[453] private __gap;\\n\\n    IVault public immutable VAULT;\\n    address public immutable PROTOCOL_TOKEN;\\n    IBusTree public immutable BUS_TREE;\\n    IPantherVerifier public immutable VERIFIER;\\n    address public immutable ZACCOUNT_REGISTRY;\\n    address public immutable PRP_VOUCHER_GRANTOR;\\n\\n    mapping(address => bool) public vaultAssetUnlockers;\\n\\n    // TODO added in a mapping: bytes4(keccak256(`circuit-name`)) => uint160\\n    uint160 public zAccountRegistrationCircuitId;\\n    uint160 public prpAccountingCircuitId;\\n    uint160 public prpAccountConversionCircuitId;\\n    uint160 public mainCircuitId;\\n\\n    // TODO: to be removed when the total number of circuits in known\\n    uint256[9] private __circuiteIdsGap;\\n\\n    // @notice Seen (i.e. spent) commitment nullifiers\\n    // nullifier hash => spent\\n    mapping(bytes32 => bool) public isSpent;\\n\\n    uint96 public accountedRewards;\\n    uint96 public kycReward;\\n    // max difference between the given utxo create/spend time and now\\n    uint32 public maxTimeDelta;\\n\\n    constructor(\\n        address _owner,\\n        address zkpToken,\\n        address taxiTree,\\n        address busTree,\\n        address ferryTree,\\n        address staticTree,\\n        address vault,\\n        address zAccountRegistry,\\n        address prpVoucherGrantor,\\n        address verifier\\n    ) PantherForest(_owner, taxiTree, busTree, ferryTree, staticTree) {\\n        require(\\n            vault != address(0) &&\\n                zkpToken != address(0) &&\\n                verifier != address(0) &&\\n                zAccountRegistry != address(0) &&\\n                prpVoucherGrantor != address(0),\\n            ERR_INIT\\n        );\\n\\n        PROTOCOL_TOKEN = zkpToken;\\n        VAULT = IVault(vault);\\n        BUS_TREE = IBusTree(busTree);\\n        VERIFIER = IPantherVerifier(verifier);\\n        ZACCOUNT_REGISTRY = zAccountRegistry;\\n        PRP_VOUCHER_GRANTOR = prpVoucherGrantor;\\n    }\\n\\n    function updateVaultAssetUnlocker(\\n        address _unlocker,\\n        bool _status\\n    ) external onlyOwner {\\n        vaultAssetUnlockers[_unlocker] = _status;\\n    }\\n\\n    function updateZAccountRegistrationCircuitId(\\n        uint160 _circuitId\\n    ) external onlyOwner {\\n        zAccountRegistrationCircuitId = _circuitId;\\n    }\\n\\n    function updatePrpAccountingCircuitId(\\n        uint160 _circuitId\\n    ) external onlyOwner {\\n        prpAccountingCircuitId = _circuitId;\\n    }\\n\\n    function updatePrpAccountConversionCircuitId(\\n        uint160 _circuitId\\n    ) external onlyOwner {\\n        prpAccountConversionCircuitId = _circuitId;\\n    }\\n\\n    function updateMainCircuitId(uint160 _circuitId) external onlyOwner {\\n        mainCircuitId = _circuitId;\\n    }\\n\\n    function updateKycReward(uint96 _kycReward) external onlyOwner {\\n        kycReward = _kycReward;\\n    }\\n\\n    function updateMaxTimeDelta(uint32 _maxTimeDelta) external onlyOwner {\\n        maxTimeDelta = _maxTimeDelta;\\n    }\\n\\n    function unlockAssetFromVault(LockData calldata data) external {\\n        require(vaultAssetUnlockers[msg.sender], ERR_UNAUTHORIZED);\\n\\n        // Trusted contract - no reentrancy guard needed\\n        VAULT.unlockAsset(data);\\n    }\\n\\n    /// @notice Creates zAccount utxo\\n    /// @dev It can be executed only by zAccountsRegistry contract.\\n    /// @param inputs The public input parameters to be passed to verifier.\\n    /// @param inputs[0]  - extraInputsHash\\n    /// @param inputs[1]  - zkpAmount\\n    /// @param inputs[2]  - zkpChange\\n    /// @param inputs[3]  - zAccountId\\n    /// @param inputs[4]  - zAccountPrpAmount\\n    /// @param inputs[5]  - zAccountCreateTime\\n    /// @param inputs[6]  - zAccountRootSpendPubKeyX\\n    /// @param inputs[7]  - zAccountRootSpendPubKeyY\\n    /// @param inputs[8]  - zAccountReadPubKeyX\\n    /// @param inputs[9]  - zAccountReadPubKeyY\\n    /// @param inputs[10] - zAccountNullifierPubKeyX\\n    /// @param inputs[11] - zAccountNullifierPubKeyY\\n    /// @param inputs[12] - zAccountMasterEOA\\n    /// @param inputs[13] - zAccountNullifier\\n    /// @param inputs[14] - zAccountCommitment\\n    /// @param inputs[15] - kycSignedMessageHash\\n    /// @param inputs[16] - forestMerkleRoot\\n    /// @param inputs[17] - saltHash\\n    /// @param inputs[18] - magicalConstraint\\n    /// @param proof A proof associated with the zAccount and a secret.\\n    /// @param zkpPayer Wallet that withdraws onboarding zkp rewards\\n    /// @param privateMessages the private message that contains zAccount utxo data.\\n    /// zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText\\n    /// @param cachedForestRootIndex forest merkle root index. 0 means the most updated root.\\n    function createZAccountUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        address zkpPayer,\\n        bytes memory privateMessages,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256 utxoBusQueuePos) {\\n        // Note: This contract expects the Verifier to check the `inputs[]` are\\n        // less than the field size\\n\\n        require(msg.sender == ZACCOUNT_REGISTRY, ERR_UNAUTHORIZED);\\n        require(zAccountRegistrationCircuitId != 0, ERR_UNDEFINED_CIRCUIT);\\n        {\\n            uint256 zAccountNullifier = inputs[13];\\n            require(zAccountNullifier != 0, ERR_ZERO_ZACCOUNT_NULLIFIER);\\n        }\\n        uint256 zAccountCommitment;\\n        {\\n            zAccountCommitment = inputs[14];\\n            require(zAccountCommitment != 0, ERR_ZERO_ZACCOUNT_COMMIT);\\n        }\\n        {\\n            uint256 kycSignedMessageHash = inputs[15];\\n            require(kycSignedMessageHash != 0, ERR_ZERO_KYC_MSG_HASH);\\n        }\\n        {\\n            uint256 saltHash = inputs[17];\\n            require(saltHash != 0, ERR_ZERO_SALT_HASH);\\n        }\\n        {\\n            uint256 magicalConstraint = inputs[18];\\n            require(magicalConstraint != 0, ERR_ZERO_MAGIC_CONSTR);\\n        }\\n\\n        // Must be less than 32 bits and NOT in the past\\n        uint32 createTime = uint32(inputs[5]);\\n        require(\\n            uint256(createTime) == inputs[5] && createTime >= block.timestamp,\\n            ERR_INVALID_CREATE_TIME\\n        );\\n\\n        _sanitizePrivateMessage(privateMessages, TT_ZACCOUNT_ACTIVATION);\\n\\n        require(\\n            isCachedRoot(bytes32(inputs[16]), cachedForestRootIndex),\\n            ERR_INVALID_FOREST_ROOT\\n        );\\n\\n        // Trusted contract - no reentrancy guard needed\\n        require(\\n            VERIFIER.verify(zAccountRegistrationCircuitId, inputs, proof),\\n            ERR_FAILED_ZK_PROOF\\n        );\\n\\n        if (inputs[1] != 0) {\\n            uint256 zkpAmount = inputs[1];\\n            _lockZkp(zkpPayer, zkpAmount);\\n        }\\n\\n        // Trusted contract - no reentrancy guard needed\\n        (uint32 queueId, uint8 indexInQueue) = BUS_TREE.addUtxoToBusQueue(\\n            bytes32(zAccountCommitment)\\n        );\\n        utxoBusQueuePos = (uint256(queueId) << 8) | uint256(indexInQueue);\\n\\n        bytes memory transactionNoteContent = abi.encodePacked(\\n            // First public message\\n            MT_UTXO_CREATE_TIME,\\n            createTime,\\n            // Seconds public message\\n            MT_UTXO_BUSTREE_IDS,\\n            zAccountCommitment, // zAccountCommitment\\n            queueId,\\n            indexInQueue,\\n            // Private message(s)\\n            privateMessages\\n        );\\n\\n        emit TransactionNote(TT_ZACCOUNT_ACTIVATION, transactionNoteContent);\\n    }\\n\\n    /// @notice Accounts prp to zAccount\\n    /// @dev It spends the old zAccount utxo and create a new one with increased\\n    /// prp balance. It can be executed only be prpVoucherGrantor.\\n    /// @param inputs The public input parameters to be passed to verifier.\\n    /// @param inputs[0]  - extraInputsHash;\\n    /// @param inputs[1]  - chargedAmountZkp;\\n    /// @param inputs[2]  - createTime;\\n    /// @param inputs[3]  - depositAmountPrp;\\n    /// @param inputs[4]  - withdrawAmountPrp;\\n    /// @param inputs[5]  - utxoCommitmentPrivatePart;\\n    /// @param inputs[6]  - utxoSpendPubKeyX\\n    /// @param inputs[7]  - utxoSpendPubKeyY\\n    /// @param inputs[8]  - zAssetScale;\\n    /// @param inputs[9]  - zAccountUtxoInNullifier;\\n    /// @param inputs[10] - zAccountUtxoOutCommitment;\\n    /// @param inputs[11] - zNetworkChainId;\\n    /// @param inputs[12] - forestMerkleRoot;\\n    /// @param inputs[13] - saltHash;\\n    /// @param inputs[14] - magicalConstraint;\\n    /// @param proof A proof associated with the zAccount and a secret.\\n    /// @param privateMessages the private message that contains zAccount utxo data.\\n    /// zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText\\n    /// This data is used to spend the newly created utxo.\\n    /// @param cachedForestRootIndex forest merkle root index. 0 means the most updated root.\\n    function accountPrp(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256 utxoBusQueuePos) {\\n        // Note: This contract expects the Verifier to check the `inputs[]` are\\n        // less than the field size\\n\\n        // Note: This contract expects the PrpVoucherGrantor to check the following inputs:\\n        // input[0], input[3], input[4],\\n\\n        require(msg.sender == PRP_VOUCHER_GRANTOR, ERR_UNAUTHORIZED);\\n        require(prpAccountingCircuitId != 0, ERR_UNDEFINED_CIRCUIT);\\n\\n        // Must be less than 32 bits and NOT in the past\\n        uint32 createTime = UtilsLib.safe32(inputs[2]);\\n        require(createTime >= block.timestamp, ERR_INVALID_CREATE_TIME);\\n\\n        _sanitizePrivateMessage(privateMessages, TT_PRP_CLAIM);\\n\\n        uint256 zAccountUtxoOutCommitment;\\n        {\\n            zAccountUtxoOutCommitment = inputs[10];\\n            require(zAccountUtxoOutCommitment != 0, ERR_ZERO_ZACCOUNT_COMMIT);\\n        }\\n\\n        {\\n            // spending zAccount utxo\\n            bytes32 zAccountUtxoInNullifier = bytes32(inputs[9]);\\n            require(\\n                !isSpent[zAccountUtxoInNullifier],\\n                ERR_SPENT_ZACCOUNT_NULLIFIER\\n            );\\n            isSpent[zAccountUtxoInNullifier] = true;\\n        }\\n\\n        {\\n            uint256 zNetworkChainId = inputs[11];\\n            require(zNetworkChainId == block.chainid, ERR_INVALID_CHAIN_ID);\\n        }\\n\\n        {\\n            bytes32 forestMerkleRoot = bytes32(inputs[12]);\\n            require(\\n                isCachedRoot(forestMerkleRoot, cachedForestRootIndex),\\n                ERR_INVALID_FOREST_ROOT\\n            );\\n        }\\n\\n        // Trusted contract - no reentrancy guard needed\\n        require(\\n            VERIFIER.verify(prpAccountingCircuitId, inputs, proof),\\n            ERR_FAILED_ZK_PROOF\\n        );\\n\\n        // Trusted contract - no reentrancy guard needed\\n        (uint32 queueId, uint8 indexInQueue) = BUS_TREE.addUtxoToBusQueue(\\n            bytes32(zAccountUtxoOutCommitment)\\n        );\\n\\n        utxoBusQueuePos = (uint256(queueId) << 8) | uint256(indexInQueue);\\n\\n        bytes memory transactionNoteContent = abi.encodePacked(\\n            // First public message\\n            MT_UTXO_CREATE_TIME,\\n            createTime,\\n            MT_UTXO_BUSTREE_IDS,\\n            zAccountUtxoOutCommitment,\\n            queueId,\\n            indexInQueue,\\n            // Private message(s)\\n            privateMessages\\n        );\\n\\n        emit TransactionNote(TT_PRP_CLAIM, transactionNoteContent);\\n    }\\n\\n    /// @notice Accounts prp conversion\\n    /// @dev It converts prp to zZkp. The msg.sender should approve pantherPool to transfer the\\n    /// ZKPs to the vault in order to create new zAsset utxo. In ideal case, the msg sender is prpConverter.\\n    /// This function also spend the old zAccount utxo and creates new one with decreased prp balance.\\n    /// @param inputs The public input parameters to be passed to verifier.\\n    /// @param inputs[0]  - extraInputsHash;\\n    /// @param inputs[1]  - chargedAmountZkp;\\n    /// @param inputs[2]  - createTime;\\n    /// @param inputs[3]  - depositAmountPrp;\\n    /// @param inputs[4]  - withdrawAmountPrp;\\n    /// @param inputs[5]  - utxoCommitmentPrivatePart;\\n    /// @param inputs[6]  - utxoSpendPubKeyX\\n    /// @param inputs[7]  - utxoSpendPubKeyY\\n    /// @param inputs[8]  - zAssetScale;\\n    /// @param inputs[9]  - zAccountUtxoInNullifier;\\n    /// @param inputs[10] - zAccountUtxoOutCommitment;\\n    /// @param inputs[11] - zNetworkChainId;\\n    /// @param inputs[12] - forestMerkleRoot;\\n    /// @param inputs[13] - saltHash;\\n    /// @param inputs[14] - magicalConstraint;\\n    /// @param proof A proof associated with the zAccount and a secret.\\n    /// @param privateMessages the private message that contains zAccount utxo data.\\n    /// zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText\\n    /// This data is used to spend the newly created utxo.\\n    /// @param zkpAmountOutRounded The zkp amount to be locked in the vault, rounded by 1e12.\\n    /// @param cachedForestRootIndex forest merkle root index. 0 means the most updated root.\\n    function createZzkpUtxoAndSpendPrpUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 zkpAmountOutRounded,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256 zAccountUtxoBusQueuePos) {\\n        // Note: This contract expects the Verifier to check the `inputs[]` are\\n        // less than the field size\\n\\n        require(prpAccountConversionCircuitId != 0, ERR_UNDEFINED_CIRCUIT);\\n\\n        {\\n            uint256 extraInputsHash = inputs[0];\\n            require(extraInputsHash != 0, ERR_ZERO_EXTRA_INPUT_HASH);\\n        }\\n\\n        {\\n            uint256 saltHash = inputs[13];\\n            require(saltHash != 0, ERR_ZERO_SALT_HASH);\\n        }\\n\\n        {\\n            uint256 magicalConstraint = inputs[14];\\n            require(magicalConstraint != 0, ERR_ZERO_MAGIC_CONSTR);\\n        }\\n\\n        uint256 zAssetScale;\\n        {\\n            zAssetScale = inputs[8];\\n            require(zAssetScale != 0, ERR_ZERO_ZASSET_SCALE);\\n        }\\n\\n        {\\n            uint256 zNetworkChainId = inputs[11];\\n            require(zNetworkChainId == block.chainid, ERR_INVALID_CHAIN_ID);\\n        }\\n\\n        // Must be less than 32 bits and NOT in the past\\n        uint32 createTime = UtilsLib.safe32(inputs[2]);\\n        require(createTime >= block.timestamp, ERR_INVALID_CREATE_TIME);\\n\\n        _sanitizePrivateMessage(privateMessages, TT_PRP_CONVERSION);\\n\\n        require(\\n            isCachedRoot(bytes32(inputs[12]), cachedForestRootIndex),\\n            ERR_INVALID_FOREST_ROOT\\n        );\\n\\n        {\\n            uint256 depositAmountPrp = inputs[3];\\n            uint256 withdrawAmountPrp = inputs[4];\\n            require(\\n                depositAmountPrp <= MAX_PRP_AMOUNT &&\\n                    withdrawAmountPrp <= MAX_PRP_AMOUNT,\\n                ERR_TOO_LARGE_PRP_AMOUNT\\n            );\\n        }\\n\\n        // Generating the new zAsset utxo commitment\\n        // Define zAssetUtxoCommitment here to avoid `stack too deep` error\\n        bytes32 zAssetUtxoCommitment;\\n\\n        uint256 zkpAmountScaled = zkpAmountOutRounded / zAssetScale;\\n        uint256 zAssetUtxoCommitmentPrivatePart = inputs[5];\\n\\n        zAssetUtxoCommitment = _generateZAssetUtxoCommitment(\\n            zAssetUtxoCommitmentPrivatePart,\\n            zkpAmountScaled,\\n            createTime\\n        );\\n\\n        {\\n            // spending zAccount utxo\\n            bytes32 zAccountUtxoInNullifier = bytes32(inputs[9]);\\n            require(\\n                !isSpent[zAccountUtxoInNullifier],\\n                ERR_SPENT_ZACCOUNT_NULLIFIER\\n            );\\n            isSpent[zAccountUtxoInNullifier] = true;\\n        }\\n\\n        // Trusted contract - no reentrancy guard needed\\n        require(\\n            VERIFIER.verify(prpAccountConversionCircuitId, inputs, proof),\\n            ERR_FAILED_ZK_PROOF\\n        );\\n\\n        bytes32 zAccountUtxoOutCommitment = bytes32(inputs[10]);\\n        bytes32[] memory utxos = new bytes32[](2);\\n\\n        utxos[0] = zAccountUtxoOutCommitment;\\n        // new zAsset utxo commitment\\n        utxos[1] = zAssetUtxoCommitment;\\n\\n        // The BusTree returns the queueId and index of the first utxo inside the utxos array, which is the zAccountUtxo\\n        (uint32 zAccountUtxoQueueId, uint8 zAccountUtxoIndexInQueue) = BUS_TREE\\n            .addUtxosToBusQueue(utxos);\\n        zAccountUtxoBusQueuePos =\\n            (uint256(zAccountUtxoQueueId) << 8) |\\n            uint256(zAccountUtxoIndexInQueue);\\n\\n        _lockZkp(msg.sender, zkpAmountOutRounded);\\n\\n        // solving stack too deep error when adding `privateMessages` to `transactionNoteContent`\\n        bytes memory _privateMessages = privateMessages;\\n\\n        bytes memory transactionNoteContent = abi.encodePacked(\\n            MT_UTXO_CREATE_TIME,\\n            createTime, // createTime\\n            MT_UTXO_BUSTREE_IDS,\\n            zAccountUtxoOutCommitment,\\n            zAccountUtxoQueueId,\\n            zAccountUtxoIndexInQueue,\\n            MT_UTXO_ZASSET_PUB,\\n            UtilsLib.safe64(zkpAmountScaled),\\n            _privateMessages\\n        );\\n\\n        emit TransactionNote(TT_PRP_CONVERSION, transactionNoteContent);\\n    }\\n\\n    /// @param inputs The public input parameters to be passed to verifier.\\n    /// @param inputs[0]  - extraInputsHash;\\n    /// @param inputs[1]  - depositAmount;\\n    /// @param inputs[2]  - withdrawAmount;\\n    /// @param inputs[3]  - donatedAmountZkp;\\n    /// @param inputs[4]  - token;\\n    /// @param inputs[5]  - tokenId\\n    /// @param inputs[6]  - spendTime\\n    /// @param inputs[7]  - zAssetUtxoInNullifier1;\\n    /// @param inputs[8]  - zAssetUtxoInNullifier2;\\n    /// @param inputs[9] - zAccountUtxoInNullifier;\\n    /// @param inputs[10] - zZoneDataEscrowEphimeralPubKeyAx;\\n    /// @param inputs[11] - zZoneDataEscrowEncryptedMessageAx;\\n    /// @param inputs[12] - kytDepositSignedMessageSender;\\n    /// @param inputs[13] - kytDepositSignedMessageReceiver;\\n    /// @param inputs[14] - kytDepositSignedMessageHash;\\n    /// @param inputs[15] - kytWithdrawSignedMessageSender;\\n    /// @param inputs[16] - kytWithdrawSignedMessageReceiver;\\n    /// @param inputs[17] - kytWithdrawSignedMessageHash;\\n    /// @param inputs[18] - dataEscrowEphimeralPubKeyAx;\\n    /// @param inputs[19] - dataEscrowEncryptedMessageAx1;\\n    /// @param inputs[20] - dataEscrowEncryptedMessageAx2;\\n    /// @param inputs[21] - dataEscrowEncryptedMessageAx3;\\n    /// @param inputs[22] - dataEscrowEncryptedMessageAx4;\\n    /// @param inputs[23] - dataEscrowEncryptedMessageAx5;\\n    /// @param inputs[24] - dataEscrowEncryptedMessageAx6;\\n    /// @param inputs[25] - dataEscrowEncryptedMessageAx7;\\n    /// @param inputs[26] - dataEscrowEncryptedMessageAx8;\\n    /// @param inputs[27] - dataEscrowEncryptedMessageAx9;\\n    /// @param inputs[28] - dataEscrowEncryptedMessageAx10;\\n    /// @param inputs[29] - daoDataEscrowEphimeralPubKeyAx;\\n    /// @param inputs[30] - daoDataEscrowEncryptedMessageAx1;\\n    /// @param inputs[31] - daoDataEscrowEncryptedMessageAx2;\\n    /// @param inputs[32] - daoDataEscrowEncryptedMessageAx3;\\n    /// @param inputs[33] - utxoOutCreateTime;\\n    /// @param inputs[34] - zAssetUtxoOutCommitment1;\\n    /// @param inputs[35] - zAssetUtxoOutCommitment2;\\n    /// @param inputs[36] - zAccountUtxoOutCommitment;\\n    /// @param inputs[37] - chargedAmountZkp;\\n    /// @param inputs[38] - zNetworkChainId;\\n    /// @param inputs[39] - forestMerkleRoot;\\n    /// @param inputs[40] - saltHash;\\n    /// @param inputs[41] - magicalConstraint;\\n    function main(\\n        uint256[] memory inputs,\\n        SnarkProof calldata proof,\\n        uint256 cachedForestRootIndex,\\n        bytes memory privateMessages,\\n        uint8 tokenType\\n    ) external payable returns (uint256 zAccountUtxoBusQueuePos) {\\n        require(mainCircuitId != 0, ERR_UNDEFINED_CIRCUIT);\\n\\n        {\\n            uint256 saltHash = inputs[40];\\n            _validateSaltHash(saltHash);\\n        }\\n\\n        {\\n            uint256 magicalConstraint = inputs[41];\\n            _validateMagicalConstraint(magicalConstraint);\\n        }\\n\\n        {\\n            uint256 zNetworkChainId = inputs[38];\\n            _validateZNetworkChainId(zNetworkChainId);\\n        }\\n\\n        {\\n            uint256 extraInputsHash = inputs[0];\\n            bytes memory extraInp = abi.encodePacked(\\n                cachedForestRootIndex,\\n                privateMessages,\\n                tokenType\\n            );\\n\\n            _validateExtraInputHash(extraInputsHash, extraInp);\\n        }\\n\\n        {\\n            uint256 zZoneDataEscrowEphimeralPubKeyAx = inputs[10];\\n            require(\\n                zZoneDataEscrowEphimeralPubKeyAx != 0,\\n                ERR_ZERO_ZZONE_DATA_ESCROW_EPHIMERAL_PUB_KEY_AX\\n            );\\n        }\\n\\n        {\\n            uint256 zZoneDataEscrowEncryptedMessageAx = inputs[11];\\n            require(\\n                zZoneDataEscrowEncryptedMessageAx != 0,\\n                ERR_ZERO_ZZONE_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n        }\\n\\n        {\\n            uint256 kytDepositSignedMessageHash = inputs[14];\\n            require(\\n                kytDepositSignedMessageHash != 0,\\n                ERR_ZERO_KYT_DEPOSIT_SIGNED_MESSAGE_HASH\\n            );\\n        }\\n\\n        {\\n            uint256 kytWithdrawSignedMessageHash = inputs[17];\\n            require(\\n                kytWithdrawSignedMessageHash != 0,\\n                ERR_ZERO_KYT_WITHDRAW_SIGNED_MESSAGE_HASH\\n            );\\n        }\\n\\n        {\\n            uint256 dataEscrowEphimeralPubKeyAx = inputs[18];\\n            require(\\n                dataEscrowEphimeralPubKeyAx != 0,\\n                ERR_ZERO_DATA_ESCROW_EPHIMERAL_PUB_KEY_AX\\n            );\\n        }\\n\\n        {\\n            uint256 dataEscrowEncryptedMessageAx1 = inputs[19];\\n            uint256 dataEscrowEncryptedMessageAx2 = inputs[20];\\n            uint256 dataEscrowEncryptedMessageAx3 = inputs[21];\\n            uint256 dataEscrowEncryptedMessageAx4 = inputs[22];\\n            uint256 dataEscrowEncryptedMessageAx5 = inputs[23];\\n            uint256 dataEscrowEncryptedMessageAx6 = inputs[24];\\n            uint256 dataEscrowEncryptedMessageAx7 = inputs[25];\\n            uint256 dataEscrowEncryptedMessageAx8 = inputs[26];\\n            uint256 dataEscrowEncryptedMessageAx9 = inputs[27];\\n            uint256 dataEscrowEncryptedMessageAx10 = inputs[28];\\n\\n            require(\\n                dataEscrowEncryptedMessageAx1 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx2 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx3 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx4 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx5 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx6 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx7 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx8 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx9 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                dataEscrowEncryptedMessageAx10 != 0,\\n                ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n        }\\n\\n        {\\n            uint256 daoDataEscrowEphimeralPubKeyAx = inputs[29];\\n            require(\\n                daoDataEscrowEphimeralPubKeyAx != 0,\\n                ERR_ZERO_DAO_DATA_ESCROW_EPHIMERAL_PUB_KEY_AX\\n            );\\n        }\\n\\n        {\\n            uint256 daoDataEscrowEncryptedMessageAx1 = inputs[30];\\n            uint256 daoDataEscrowEncryptedMessageAx2 = inputs[31];\\n            uint256 daoDataEscrowEncryptedMessageAx3 = inputs[32];\\n\\n            require(\\n                daoDataEscrowEncryptedMessageAx1 != 0,\\n                ERR_ZERO_DAO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                daoDataEscrowEncryptedMessageAx2 != 0,\\n                ERR_ZERO_DAO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n            require(\\n                daoDataEscrowEncryptedMessageAx3 != 0,\\n                ERR_ZERO_DAO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX\\n            );\\n        }\\n\\n        _sanitizePrivateMessage(privateMessages, TT_MAIN_TRANSACTION);\\n\\n        uint32 utxoOutCreateTime = _validateCreationTimeAndReturnSafe32(\\n            inputs[33]\\n        );\\n\\n        uint32 spendTime = _validateSpendTimeAndReturnSafe32(inputs[6]);\\n\\n        {\\n            bytes32 zAssetUtxoInNullifier1 = bytes32(inputs[7]);\\n            bytes32 zAssetUtxoInNullifier2 = bytes32(inputs[8]);\\n\\n            require(\\n                zAssetUtxoInNullifier1 > 0 && zAssetUtxoInNullifier2 > 0,\\n                ERR_ZERO_ZASSET_NULLIFIER\\n            );\\n\\n            require(\\n                !isSpent[zAssetUtxoInNullifier1] &&\\n                    !isSpent[zAssetUtxoInNullifier2],\\n                ERR_SPENT_ZASSET_NULLIFIER\\n            );\\n\\n            isSpent[zAssetUtxoInNullifier1] = true;\\n            isSpent[zAssetUtxoInNullifier2] = true;\\n        }\\n\\n        {\\n            bytes32 zAccountUtxoInNullifier = bytes32(inputs[9]);\\n\\n            require(zAccountUtxoInNullifier > 0, ERR_ZERO_ZACCOUNT_NULLIFIER);\\n\\n            require(\\n                !isSpent[zAccountUtxoInNullifier],\\n                ERR_SPENT_ZACCOUNT_NULLIFIER\\n            );\\n            isSpent[zAccountUtxoInNullifier] = true;\\n        }\\n\\n        {\\n            uint256 depositAmount = inputs[1];\\n            uint256 withdrawAmount = inputs[2];\\n            uint256 token = inputs[4];\\n\\n            if (depositAmount == 0 && withdrawAmount == 0)\\n                // internal tx\\n                require(token == 0, ERR_NON_ZERO_TOKEN);\\n            else {\\n                _processDepositAndWithdraw(inputs, tokenType);\\n            }\\n        }\\n\\n        uint96 miningRewards;\\n        {\\n            uint256 chargedAmountZkp = inputs[37];\\n            uint96 _accountedRewards;\\n\\n            (miningRewards, _accountedRewards) = _distributeChargedZkps(\\n                chargedAmountZkp\\n            );\\n\\n            accountedRewards += _accountedRewards;\\n        }\\n\\n        {\\n            uint256 forestMerkleRoot = inputs[39];\\n\\n            _validateCachedForestRootIndex(\\n                forestMerkleRoot,\\n                cachedForestRootIndex\\n            );\\n        }\\n\\n        // Trusted contract - no reentrancy guard needed\\n        require(\\n            VERIFIER.verify(mainCircuitId, inputs, proof),\\n            ERR_FAILED_ZK_PROOF\\n        );\\n\\n        bytes32 zAccountUtxoOutCommitment = bytes32(inputs[36]);\\n\\n        uint32 zAccountUtxoQueueId;\\n        uint8 zAccountUtxoIndexInQueue;\\n\\n        {\\n            bytes32 zAssetUtxoOutCommitment1 = bytes32(inputs[34]);\\n            bytes32 zAssetUtxoOutCommitment2 = bytes32(inputs[35]);\\n            bytes32[] memory utxos = new bytes32[](3);\\n\\n            utxos[0] = zAccountUtxoOutCommitment;\\n            utxos[1] = zAssetUtxoOutCommitment1;\\n            utxos[2] = zAssetUtxoOutCommitment2;\\n\\n            (\\n                zAccountUtxoQueueId,\\n                zAccountUtxoIndexInQueue,\\n                zAccountUtxoBusQueuePos\\n            ) = _addUtxosToBusQueue(utxos, miningRewards);\\n        }\\n\\n        {\\n            // TODO find a clean/gas effecient solution\\n            // solving stack too deep error when adding `privateMessages` to `transactionNoteContent`\\n            bytes memory _privateMessages = privateMessages;\\n\\n            bytes memory transactionNoteContent = abi.encodePacked(\\n                MT_UTXO_CREATE_TIME,\\n                utxoOutCreateTime,\\n                MT_UTXO_SPEND_TIME,\\n                spendTime,\\n                MT_UTXO_BUSTREE_IDS,\\n                zAccountUtxoOutCommitment,\\n                zAccountUtxoQueueId,\\n                zAccountUtxoIndexInQueue,\\n                _privateMessages\\n            );\\n\\n            emit TransactionNote(TT_MAIN_TRANSACTION, transactionNoteContent);\\n        }\\n    }\\n\\n    function _validateSaltHash(uint256 saltHash) private pure {\\n        require(saltHash != 0, ERR_ZERO_SALT_HASH);\\n    }\\n\\n    function _validateMagicalConstraint(\\n        uint256 magicalConstraint\\n    ) private pure {\\n        require(magicalConstraint != 0, ERR_ZERO_MAGIC_CONSTR);\\n    }\\n\\n    function _validateZNetworkChainId(uint256 zNetworkChainId) private view {\\n        require(zNetworkChainId == block.chainid, ERR_INVALID_CHAIN_ID);\\n    }\\n\\n    function _validateCreationTimeAndReturnSafe32(\\n        uint256 creationTime\\n    ) private view returns (uint32 creationTimeSafe32) {\\n        // Must be less than 32 bits and NOT in the past\\n\\n        creationTimeSafe32 = UtilsLib.safe32(creationTime);\\n\\n        require(\\n            creationTimeSafe32 >= block.timestamp &&\\n                (maxTimeDelta == 0 ||\\n                    creationTimeSafe32 - block.timestamp <= maxTimeDelta),\\n            ERR_INVALID_CREATE_TIME\\n        );\\n    }\\n\\n    function _validateSpendTimeAndReturnSafe32(\\n        uint256 spendTime\\n    ) private view returns (uint32 spendTimeSafe32) {\\n        // Must be less than 32 bits and NOT in the past\\n        spendTimeSafe32 = UtilsLib.safe32(spendTime);\\n\\n        require(\\n            spendTimeSafe32 <= block.timestamp &&\\n                (maxTimeDelta == 0 ||\\n                    block.timestamp - spendTimeSafe32 <= maxTimeDelta),\\n            ERR_INVALID_SPEND_TIME\\n        );\\n    }\\n\\n    function _validateExtraInputHash(\\n        uint256 extraInputsHash,\\n        bytes memory extraInp\\n    ) private pure {\\n        require(\\n            extraInputsHash == uint256(keccak256(extraInp)) % FIELD_SIZE,\\n            ERR_INVALID_EXTRA_INPUT_HASH\\n        );\\n    }\\n\\n    function _validateCachedForestRootIndex(\\n        uint256 forestMerkleRoot,\\n        uint256 cachedForestRootIndex\\n    ) private view {\\n        require(\\n            isCachedRoot(bytes32(forestMerkleRoot), cachedForestRootIndex),\\n            ERR_INVALID_FOREST_ROOT\\n        );\\n    }\\n\\n    function _addUtxosToBusQueue(\\n        bytes32[] memory utxos,\\n        uint96 rewards\\n    )\\n        private\\n        returns (\\n            uint32 zAccountUtxoQueueId,\\n            uint8 zAccountUtxoIndexInQueue,\\n            uint256 zAccountUtxoBusQueuePos\\n        )\\n    {\\n        try BUS_TREE.addUtxosToBusQueue(utxos, rewards) returns (\\n            uint32 firstUtxoQueueId,\\n            uint8 firstUtxoIndexInQueue\\n        ) {\\n            zAccountUtxoQueueId = firstUtxoQueueId;\\n            zAccountUtxoIndexInQueue = firstUtxoIndexInQueue;\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        }\\n\\n        zAccountUtxoBusQueuePos =\\n            (uint256(zAccountUtxoQueueId) << 8) |\\n            uint256(zAccountUtxoIndexInQueue);\\n    }\\n\\n    function _lockAssetWithSalt(SaltedLockData memory slData) private {\\n        try VAULT.lockAssetWithSalt{ value: msg.value }(slData) {} catch Error(\\n            string memory reason\\n        ) {\\n            revert(reason);\\n        }\\n    }\\n\\n    function _unlockAsset(LockData memory lData) private {\\n        try VAULT.unlockAsset(lData) {} catch Error(string memory reason) {\\n            revert(reason);\\n        }\\n    }\\n\\n    function _generateZAssetUtxoCommitment(\\n        uint256 zAssetUtxoPrivateDataHash,\\n        uint256 zAssetAmount,\\n        uint256 creationTime\\n    ) private pure returns (bytes32 zAssetUtxoCommitment) {\\n        zAssetUtxoCommitment = PoseidonHashers.poseidonT4(\\n            [\\n                bytes32(zAssetUtxoPrivateDataHash),\\n                bytes32(zAssetAmount),\\n                bytes32(creationTime)\\n            ]\\n        );\\n    }\\n\\n    function _distributeChargedZkps(\\n        uint256 chargedAmount\\n    ) internal view returns (uint96 _miningReward, uint96 _accountedRewards) {\\n        _accountedRewards = kycReward;\\n        require(chargedAmount > _accountedRewards, ERR_TOO_LOW_CHARGED_ZKP);\\n        //TODO Subtract other rewards (protocol, etc) from `chargedAmount`\\n        _miningReward = UtilsLib.safe96(chargedAmount - _accountedRewards);\\n    }\\n\\n    function _processDepositAndWithdraw(\\n        uint256[] memory inputs,\\n        uint8 tokenType\\n    ) private {\\n        uint96 depositAmount = UtilsLib.safe96(inputs[1]);\\n        uint96 withdrawAmount = UtilsLib.safe96(inputs[2]);\\n\\n        address token = address(uint160(inputs[4]));\\n        uint256 tokenId = inputs[5];\\n        bytes32 saltHash = bytes32(inputs[40]);\\n\\n        address kytDepositSignedMessageSender = address(uint160(inputs[12]));\\n        address kytDepositSignedMessageReceiver = address(uint160(inputs[13]));\\n\\n        address kytWithdrawSignedMessageSender = address(uint160(inputs[15]));\\n        address kytWithdrawSignedMessageReceiver = address(uint160(inputs[16]));\\n\\n        if (depositAmount > 0) {\\n            require(\\n                kytDepositSignedMessageReceiver == address(VAULT),\\n                ERR_INVALID_KYT_DEPOSIT_SIGNED_MESSAGE_RECEIVER\\n            );\\n\\n            require(\\n                kytWithdrawSignedMessageSender != address(0),\\n                ERR_INVALID_KYT_WITHDRAW_SIGNED_MESSAGE_SENDER\\n            );\\n\\n            require(\\n                kytWithdrawSignedMessageReceiver != address(0),\\n                ERR_INVALID_KYT_WITHDRAW_SIGNED_MESSAGE_RECEIVER\\n            );\\n\\n            _lockAssetWithSalt(\\n                SaltedLockData(\\n                    tokenType,\\n                    token,\\n                    tokenId,\\n                    saltHash,\\n                    kytDepositSignedMessageSender,\\n                    depositAmount\\n                )\\n            );\\n        }\\n\\n        if (withdrawAmount > 0) {\\n            require(\\n                kytWithdrawSignedMessageSender == address(VAULT),\\n                ERR_INVALID_KYT_WITHDRAW_SIGNED_MESSAGE_SENDER\\n            );\\n            require(\\n                kytDepositSignedMessageSender != address(0),\\n                ERR_INVALID_KYT_DEPOSIT_SIGNED_MESSAGE_SENDER\\n            );\\n            require(\\n                kytDepositSignedMessageReceiver != address(0),\\n                ERR_INVALID_KYT_DEPOSIT_SIGNED_MESSAGE_RECEIVER\\n            );\\n\\n            _unlockAsset(\\n                LockData(\\n                    tokenType,\\n                    token,\\n                    tokenId,\\n                    kytWithdrawSignedMessageReceiver,\\n                    withdrawAmount\\n                )\\n            );\\n        }\\n    }\\n\\n    // TODO: to be deleted in prod\\n    function _lockZkp(address from, uint256 amount) internal {\\n        // Trusted contract - no reentrancy guard needed\\n        VAULT.lockAsset(\\n            LockData(\\n                ERC20_TOKEN_TYPE,\\n                PROTOCOL_TOKEN,\\n                // tokenId undefined for ERC-20\\n                0,\\n                from,\\n                UtilsLib.safe96(amount)\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8842acdae2188c0f702f5ba4281e05d9acbe76ffd9985aeb4622ea7473d8833a\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/crypto/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// This is a stub to keep solc happy; the actual code is generated\\n// using poseidon_gencontract.js from circomlibjs.\\n\\nlibrary PoseidonT3 {\\n    function poseidon(bytes32[2] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT4 {\\n    function poseidon(bytes32[3] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT5 {\\n    function poseidon(bytes32[4] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(bytes32[5] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x85ba9420af1dcb1218b655c16044d163c9b070ff5913da034a9961e0e8c5aaf2\",\"license\":\"MIT\"},\"contracts/protocol/crypto/PoseidonHashers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { FIELD_SIZE } from \\\"./SnarkConstants.sol\\\";\\nimport \\\"./Poseidon.sol\\\";\\n\\nlibrary PoseidonHashers {\\n    string private constant ERR_INPUT_NOT_IN_FIELD =\\n        \\\"PoseidonHasher: input not in field\\\";\\n\\n    function poseidonT3(\\n        bytes32[2] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE && uint256(input[1]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT3.poseidon(input);\\n    }\\n\\n    function poseidonT4(\\n        bytes32[3] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT4.poseidon(input);\\n    }\\n\\n    function poseidonT5(\\n        bytes32[4] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT5.poseidon(input);\\n    }\\n\\n    function poseidonT6(\\n        bytes32[5] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE &&\\n                uint256(input[4]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT6.poseidon(input);\\n    }\\n}\\n\",\"keccak256\":\"0x93ad83293b12679894b27a4fe8dfbb04ddab44439532b9ef1075b6a7cb116f01\",\"license\":\"MIT\"},\"contracts/protocol/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n// @dev Order of alt_bn128 and the field prime of Baby Jubjub and Poseidon hash\\nuint256 constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n// @dev Field prime of alt_bn128\\nuint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\",\"keccak256\":\"0xb734602ed691e205eed51a0239e8281bf5822487140843a848df20f6a4c95b39\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/CachedRootsErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nstring constant ERR_NO_ROOT_IS_ADDED = \\\"CR:E1\\\";\\nstring constant ERR_INDEX_NOT_IN_RANGE = \\\"CR:E2\\\";\\n\",\"keccak256\":\"0x1def08327a0a6fbecff59a47c59e2ea3c0c1026f758b2b476b4b7871e74ee3c1\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/PantherPoolV1ErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n// TODO: Reorder the err messages\\nstring constant ERR_INIT = \\\"PP:E1\\\";\\nstring constant ERR_UNAUTHORIZED = \\\"PP:E2\\\";\\nstring constant ERR_UNDEFINED_CIRCUIT = \\\"PP:E3\\\";\\nstring constant ERR_INVALID_FOREST_ROOT = \\\"PP:E4\\\";\\nstring constant ERR_FAILED_ZK_PROOF = \\\"PP:E5\\\";\\nstring constant ERR_INVALID_CREATE_TIME = \\\"PP:E6\\\";\\nstring constant ERR_ZERO_ZACCOUNT_NULLIFIER = \\\"PP:E7\\\";\\nstring constant ERR_ZERO_ZACCOUNT_COMMIT = \\\"PP:E8\\\";\\nstring constant ERR_ZERO_KYC_MSG_HASH = \\\"PP:E9\\\";\\nstring constant ERR_ZERO_SALT_HASH = \\\"PP:E10\\\";\\nstring constant ERR_ZERO_MAGIC_CONSTR = \\\"PP:E11\\\";\\nstring constant ERR_NOT_WELLFORMED_SECRETS = \\\"PP:E12\\\";\\nstring constant ERR_ZERO_EXTRA_INPUT_HASH = \\\"PP:E13\\\";\\nstring constant ERR_SPENT_ZACCOUNT_NULLIFIER = \\\"PP:E14\\\";\\nstring constant ERR_TOO_LARGE_PRP_AMOUNT = \\\"PP:E15\\\";\\nstring constant ERR_ZERO_ZASSET_SCALE = \\\"PP:E16\\\";\\nstring constant ERR_INVALID_CHAIN_ID = \\\"PP:E17\\\";\\n\\nstring constant ERR_ZERO_ZZONE_DATA_ESCROW_EPHIMERAL_PUB_KEY_AX = \\\"PP:E18\\\";\\nstring constant ERR_ZERO_ZZONE_DATA_ESCROW_ENCRYPTED_MESSAGE_AX = \\\"PP:E19\\\";\\nstring constant ERR_INVALID_KYT_DEPOSIT_SIGNED_MESSAGE_SENDER = \\\"PP:E20\\\";\\nstring constant ERR_INVALID_KYT_DEPOSIT_SIGNED_MESSAGE_RECEIVER = \\\"PP:E21\\\";\\nstring constant ERR_ZERO_KYT_DEPOSIT_SIGNED_MESSAGE_HASH = \\\"PP:E22\\\";\\nstring constant ERR_INVALID_KYT_WITHDRAW_SIGNED_MESSAGE_SENDER = \\\"PP:E23\\\";\\nstring constant ERR_INVALID_KYT_WITHDRAW_SIGNED_MESSAGE_RECEIVER = \\\"PP:E24\\\";\\nstring constant ERR_ZERO_KYT_WITHDRAW_SIGNED_MESSAGE_HASH = \\\"PP:E25\\\";\\nstring constant ERR_ZERO_DATA_ESCROW_EPHIMERAL_PUB_KEY_AX = \\\"PP:E26\\\";\\nstring constant ERR_ZERO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX = \\\"PP:E27\\\";\\nstring constant ERR_ZERO_DAO_DATA_ESCROW_EPHIMERAL_PUB_KEY_AX = \\\"PP:E28\\\";\\nstring constant ERR_ZERO_DAO_DATA_ESCROW_ENCRYPTED_MESSAGE_AX = \\\"PP:E29\\\";\\n\\nstring constant ERR_ZERO_TOKEN = \\\"PP:E30\\\";\\nstring constant ERR_NON_ZERO_TOKEN = \\\"PP:E31\\\";\\nstring constant ERR_ZERO_ZASSET_NULLIFIER = \\\"PP:E32\\\";\\nstring constant ERR_SPENT_ZASSET_NULLIFIER = \\\"PP:E33\\\";\\nstring constant ERR_INVALID_SPEND_TIME = \\\"PP:E34\\\";\\nstring constant ERR_INVALID_EXTRA_INPUT_HASH = \\\"PP:E35\\\";\\nstring constant ERR_TOO_LOW_CHARGED_ZKP = \\\"PP:E36\\\";\\n\",\"keccak256\":\"0xcc2b76c50ebd24b0fee24112f4ad1bd4be91fea8f339da29adca583c5ffbbe83\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/TransactionNoteEmitterErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nstring constant ERR_INVALID_MT_UTXO_ZACCOUNT = \\\"TN:E1\\\";\\nstring constant ERR_INVALID_MT_UTXO_ZASSET = \\\"TN:E2\\\";\\nstring constant ERR_INVALID_MT_UTXO_ZASSET_PRIV = \\\"TN:E3\\\";\\nstring constant ERR_INVALID_MT_UTXO_SPEND_2UTXO = \\\"TN:E4\\\";\\nstring constant ERR_LOW_MESSAGE_LENGTH = \\\"TN:E5\\\";\\n\",\"keccak256\":\"0xc4683bcdfe595eaf9c972bd450e8a084ca1be81ea6c605b445f4ed0e02ef34b0\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IBusTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\ninterface IBusTree {\\n    function addUtxosToBusQueue(\\n        bytes32[] calldata utxo\\n    ) external returns (uint32 firstUtxoQueueId, uint8 firstUtxoIndexInQueue);\\n\\n    function addUtxosToBusQueue(\\n        bytes32[] calldata utxo,\\n        uint96 rewards\\n    ) external returns (uint32 firstUtxoQueueId, uint8 firstUtxoIndexInQueue);\\n\\n    function addUtxoToBusQueue(\\n        bytes32 utxo\\n    ) external returns (uint32 queueId, uint8 indexInQueue);\\n}\\n\",\"keccak256\":\"0x1bc7bfa31cdd184160142fb3bd18f5d4430cd61d364d1b369e55a8c0dcb5a227\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IEthEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity 0.8.16;\\n\\n/**\\n * @title EthEscrow interface\\n * @author Pantherprotocol Contributors\\n */\\ninterface IEthEscrow {\\n    event DepositedToEscrow(\\n        address depositor,\\n        uint256 value,\\n        bytes32 salt,\\n        address escrow\\n    );\\n    event FundedFromEscrow(\\n        address depositor,\\n        uint256 value,\\n        bytes32 salt,\\n        address escrow\\n    );\\n    event ReturnedFromEscrow(\\n        address depositor,\\n        uint256 value,\\n        bytes32 salt,\\n        address escrow\\n    );\\n\\n    function sendEthToEscrow(bytes32 salt) external payable;\\n\\n    function withdrawEthFromEscrow(bytes32 salt) external;\\n\\n    function getEscrowAddress(\\n        bytes32 salt,\\n        address depositor\\n    ) external view returns (address escrowAddr);\\n}\\n\",\"keccak256\":\"0xae2c00ff744d01f77e0fb5c36e10a055a22038b428b2c792ada248bb1d4dfa47\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IPantherPoolV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { SnarkProof } from \\\"../../common/Types.sol\\\";\\nimport { LockData } from \\\"../../common/Types.sol\\\";\\n\\ninterface IPantherPoolV1 {\\n    function accountPrp(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256 utxoBusQueuePos);\\n\\n    function createZzkpUtxoAndSpendPrpUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 zkpAmountRounded,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256);\\n\\n    function createZAccountUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        address zkpPayer,\\n        bytes memory secretMessage,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256);\\n\\n    function unlockAssetFromVault(LockData calldata data) external;\\n}\\n\",\"keccak256\":\"0xa5ff0c742dd1b94ff70c4842e88f3d7aae39893f3f54e08a7a113f42171bdf0c\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IPantherVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { VerifyingKey } from \\\"../../common/Types.sol\\\";\\nimport \\\"./IVerifier.sol\\\";\\n\\ninterface IPantherVerifier is IVerifier {\\n    /**\\n     * @notice Get the verifying key for the specified circuits\\n     * @param circuitId ID of the circuit\\n     * @dev circuitId is an address where the key is deployed as bytecode\\n     * @return Verifying key\\n     */\\n    function getVerifyingKey(\\n        uint160 circuitId\\n    ) external view returns (VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0x8b1f03da05951cd47b1dcc4bf7b74805635d754e421b93138c68e17e36f0d2be\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { LockData, SaltedLockData } from \\\"../../common/Types.sol\\\";\\nimport { IEthEscrow } from \\\"./IEthEscrow.sol\\\";\\n\\ninterface IVault is IEthEscrow {\\n    /***\\n      @notice Transfers token from account defined by `salt` to this contract.\\n      Only the owner may call.\\n      @dev \\\"Salt\\\" protects against front-runners (if used properly). Refer to\\n      PullWithSaltHelper for details.\\n      @dev The caller (owner) MUST guard against the re-entrance attack.\\n      If an attacker (via a malicious token contract this contract calls) enters\\n      this function directly, it reverts since `msg.sender` won't be `owner`.\\n     */\\n    function lockAssetWithSalt(SaltedLockData calldata slData) external payable;\\n\\n    /***\\n      @notice Transfers token from the given account to this contract\\n      @dev It does not use \\\"salt\\\" and is prune to front-running attacks.\\n      May only be used if other means/contracts provide the adequate protection.\\n      @dev The comment above on the re-entrance is applicable for this function.\\n     */\\n    function lockAsset(LockData calldata lData) external;\\n\\n    /***\\n      @notice Transfers token from this contract to the given account.\\n      Only the owner may call.\\n      @dev The comment above on the re-entrance is applicable for this function.\\n     */\\n    function unlockAsset(LockData calldata lData) external;\\n\\n    event Locked(LockData data);\\n    event Unlocked(LockData data);\\n    event SaltUsed(bytes32 salt);\\n}\\n\",\"keccak256\":\"0x1b338813d9745d6930e247ad3cd9fd9f4c5af1b690db8ade6e4d8dc45ceb657b\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { SnarkProof } from \\\"../../common/Types.sol\\\";\\nimport \\\"./IVerifier.sol\\\";\\n\\ninterface IVerifier {\\n    /**\\n     * @notice Verify the SNARK proof\\n     * @param circuitId ID of the circuit (it tells which verifying key to use)\\n     * @param input Public input signals\\n     * @param proof SNARK proof\\n     * @return isVerified bool true if proof is valid\\n     */\\n    function verify(\\n        uint160 circuitId,\\n        uint256[] memory input,\\n        SnarkProof memory proof\\n    ) external view returns (bool isVerified);\\n}\\n\",\"keccak256\":\"0x33bce2a4dfeafbb2149077d2d14d0682dbdc51b9f5e0566a57c69fe62c0356d5\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n// `PantherForest` tree leafs indices (leafs store specific merkle trees roots)\\nuint256 constant TAXI_TREE_FOREST_LEAF_INDEX = 0;\\nuint256 constant BUS_TREE_FOREST_LEAF_INDEX = 1;\\nuint256 constant FERRY_TREE_FOREST_LEAF_INDEX = 2;\\nuint256 constant STATIC_TREE_FOREST_LEAF_INDEX = 3;\\n\\n// `PantherStaticTree` leafs indices (leafs store specific merkle trees roots)\\nuint256 constant ZASSET_STATIC_LEAF_INDEX = 0;\\nuint256 constant ZACCOUNT_BLACKLIST_STATIC_LEAF_INDEX = 1;\\nuint256 constant ZNETWORK_STATIC_LEAF_INDEX = 2;\\nuint256 constant ZZONE_STATIC_LEAF_INDEX = 3;\\nuint256 constant PROVIDERS_KEYS_STATIC_LEAF_INDEX = 4;\\n\",\"keccak256\":\"0x418cf4af2f447d34f87043ba87b1c1901a79e4a15902fd9a26f0ee480d410674\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/PantherForest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/ITreeRootGetter.sol\\\";\\nimport \\\"./interfaces/ITreeRootUpdater.sol\\\";\\n\\nimport \\\"./cachedRoots/CachedRoots.sol\\\";\\n\\nimport \\\"../../common/ImmutableOwnable.sol\\\";\\nimport \\\"../crypto/PoseidonHashers.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @title PantherForest\\n * @notice It stores and updates leafs and the root of the Panther Forest Tree.\\n * @dev \\\"Panther Forest Tree\\\" is a merkle tree with a single level (leafs) under\\n * the root. It has 4 leafs, which are roots of 4 other merkle trees -\\n * the \\\"Taxi Tree\\\", the \\\"Bus Tree\\\", the \\\"Ferry Tree\\\" and the \\\"Static Tree\\\"\\n * (essentially, these 4 trees are subtree of the Panther Forest tree):\\n *\\n *          Forest Root\\n *               |\\n *     +------+--+---+------+\\n *     |      |      |      |\\n *     0      1      2      3\\n *   Taxi   Bus    Ferry  Static\\n *   Tree   Tree   Tree   Tree\\n *   root   root   root   root\\n *\\n * Every of 4 trees are controlled by \\\"tree\\\" smart contracts. A \\\"tree\\\" contract\\n * must call this contract to update the value of the leaf and the root of the\\n * Forest Tree every time the \\\"controlled\\\" tree is updated.\\n * It supports a \\\"history\\\" of recent roots, so that users may refer not only to\\n * the latest root, but on former roots cached in the history.\\n */\\nabstract contract PantherForest is\\n    CachedRoots,\\n    ImmutableOwnable,\\n    ITreeRootGetter,\\n    ITreeRootUpdater\\n{\\n    bytes32[10] private _startGap;\\n\\n    uint256 private constant NUM_LEAFS = 4;\\n    uint256 private constant STATIC_TREE_LEAF = 3;\\n\\n    address public immutable TAXI_TREE_CONTROLLER;\\n    address public immutable BUS_TREE_CONTROLLER;\\n    address public immutable FERRY_TREE_CONTROLLER;\\n    address public immutable STATIC_TREE_CONTROLLER;\\n\\n    bytes32 private _forestRoot;\\n\\n    bytes32[NUM_LEAFS] public leafs;\\n\\n    event RootUpdated(\\n        uint256 indexed leafIndex,\\n        bytes32 updatedLeaf,\\n        bytes32 updatedRoot,\\n        uint256 cacheIndex\\n    );\\n\\n    bytes32[10] private _endGap;\\n\\n    constructor(\\n        address _owner,\\n        address _taxiTreeController,\\n        address _busTreeController,\\n        address _ferryTreeController,\\n        address _staticTreeController\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            _taxiTreeController != address(0) &&\\n                _busTreeController != address(0) &&\\n                _ferryTreeController != address(0) &&\\n                _staticTreeController != address(0),\\n            \\\"init: zero address\\\"\\n        );\\n\\n        TAXI_TREE_CONTROLLER = _taxiTreeController;\\n        BUS_TREE_CONTROLLER = _busTreeController;\\n        FERRY_TREE_CONTROLLER = _ferryTreeController;\\n        STATIC_TREE_CONTROLLER = _staticTreeController;\\n    }\\n\\n    function initialize() external onlyOwner {\\n        require(_forestRoot == bytes32(0), \\\"PF: Already initialized\\\");\\n\\n        for (uint8 i; i < NUM_LEAFS; ) {\\n            leafs[i] = ITreeRootGetter(_getLeafController(i)).getRoot();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _forestRoot = hash(leafs);\\n    }\\n\\n    function getRoot() external view returns (bytes32) {\\n        return _forestRoot;\\n    }\\n\\n    function updateRoot(bytes32 updatedLeaf, uint256 leafIndex) external {\\n        require(msg.sender == _getLeafController(leafIndex), \\\"unauthorized\\\");\\n\\n        leafs[leafIndex] = updatedLeaf;\\n        bytes32 forestRoot = hash(leafs);\\n        uint256 cacheIndex;\\n        if (leafIndex == STATIC_TREE_LEAF) {\\n            cacheIndex = resetThenCacheNewRoot(forestRoot);\\n        } else {\\n            cacheIndex = cacheNewRoot(forestRoot);\\n        }\\n\\n        _forestRoot = forestRoot;\\n        emit RootUpdated(leafIndex, updatedLeaf, forestRoot, cacheIndex);\\n    }\\n\\n    function _getLeafController(\\n        uint256 leafIndex\\n    ) internal view returns (address leafController) {\\n        require(leafIndex < NUM_LEAFS, \\\"PF: INVALID_LEAF_IND\\\");\\n        if (leafIndex == TAXI_TREE_FOREST_LEAF_INDEX)\\n            leafController = TAXI_TREE_CONTROLLER;\\n\\n        if (leafIndex == BUS_TREE_FOREST_LEAF_INDEX)\\n            leafController = BUS_TREE_CONTROLLER;\\n\\n        if (leafIndex == FERRY_TREE_FOREST_LEAF_INDEX)\\n            leafController = FERRY_TREE_CONTROLLER;\\n\\n        if (leafIndex == STATIC_TREE_FOREST_LEAF_INDEX)\\n            leafController = STATIC_TREE_CONTROLLER;\\n    }\\n\\n    function hash(\\n        bytes32[NUM_LEAFS] memory _leafs\\n    ) internal pure returns (bytes32) {\\n        return PoseidonHashers.poseidonT5(_leafs);\\n    }\\n}\\n\",\"keccak256\":\"0x0d8f86e33a5ff735c5fccf07b46c3fee49e76f1d0000954920ecb119c6c1a4a6\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/cachedRoots/CachedRoots.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport \\\"../../errMsgs/CachedRootsErrMsgs.sol\\\";\\n\\n/// @dev It caches roots in a ring buffer and checks if a root is in the cache\\nabstract contract CachedRoots {\\n    // slither-disable-next-line shadowing-state unused-state\\n    uint256[10] private __gap;\\n\\n    // Must be a power of 2\\n    uint256 private constant CACHE_SIZE = 2 ** 8;\\n    uint256 private constant CACHE_INDEX_MASK = CACHE_SIZE - 1;\\n\\n    uint256 public constant UNDEFINED_CACHE_INDEX = 0xFFFF;\\n\\n    // Initial value of all storage params is 0.\\n    // So, no initialization in `constructor` required.\\n\\n    /// @dev Mapping from cache \\\"index\\\" to cached root value\\n    mapping(uint256 => bytes32) private _cachedRoots;\\n    // Total number of roots cached so far\\n    uint64 private _cachedRootsCounter;\\n    // Value of _cachedRootsCounter after the latest cache reset\\n    uint64 private _cacheStartPos;\\n\\n    function getCacheStats()\\n        external\\n        view\\n        returns (uint256 numRootsCached, uint256 latestCacheIndex)\\n    {\\n        require(_cachedRootsCounter != 0, ERR_NO_ROOT_IS_ADDED);\\n\\n        uint256 nextInd = _getCacheNextIndex(\\n            _cachedRootsCounter,\\n            _cacheStartPos\\n        );\\n\\n        if (nextInd == 0) {\\n            latestCacheIndex = CACHE_SIZE - 1;\\n        } else {\\n            latestCacheIndex = --nextInd;\\n        }\\n\\n        numRootsCached = _getCachedRootsNum(\\n            _cachedRootsCounter,\\n            _cacheStartPos\\n        );\\n    }\\n\\n    function isCachedRoot(\\n        bytes32 root,\\n        uint256 cacheIndex\\n    ) public view returns (bool isCached) {\\n        uint256 nextPos = _cachedRootsCounter;\\n        // Definitely NOT in the cache, if no roots have been cached yet\\n        if (nextPos == 0) return false;\\n\\n        isCached = false;\\n        uint256 startPos = _cacheStartPos;\\n        uint256 rootsNum = _getCachedRootsNum(nextPos, startPos);\\n\\n        if (cacheIndex == UNDEFINED_CACHE_INDEX) {\\n            // Iterate through cached roots, starting from the newest one\\n            uint256 endPos = nextPos - rootsNum;\\n            while (!isCached && nextPos > endPos) {\\n                unchecked {\\n                    nextPos--;\\n                }\\n                if (\\n                    _cachedRoots[_getCacheNextIndex(nextPos, startPos)] == root\\n                ) {\\n                    isCached = true;\\n                }\\n            }\\n        } else {\\n            // Check against the value cached at the given index\\n            require(cacheIndex < rootsNum, ERR_INDEX_NOT_IN_RANGE);\\n            isCached = _cachedRoots[cacheIndex] == root;\\n        }\\n    }\\n\\n    function cacheNewRoot(bytes32 root) internal returns (uint256 cacheIndex) {\\n        cacheIndex = _addRootToCache(root);\\n    }\\n\\n    function resetThenCacheNewRoot(\\n        bytes32 root\\n    ) internal returns (uint256 cacheIndex) {\\n        _cacheStartPos = _cachedRootsCounter;\\n        cacheIndex = _addRootToCache(root);\\n    }\\n\\n    /// Private functions follow\\n\\n    function _addRootToCache(\\n        bytes32 root\\n    ) private returns (uint256 cacheIndex) {\\n        uint64 counter = _cachedRootsCounter;\\n        uint64 startPos = _cacheStartPos;\\n\\n        cacheIndex = _getCacheNextIndex(counter, startPos);\\n        _cachedRoots[cacheIndex] = root;\\n\\n        _cachedRootsCounter = ++counter;\\n    }\\n\\n    // Calling code MUST ensure `counter >= startPos`\\n    function _getCachedRootsNum(\\n        uint256 counter,\\n        uint256 startPos\\n    ) private pure returns (uint256) {\\n        uint256 nSinceStart = counter - startPos;\\n        return (nSinceStart > CACHE_SIZE) ? CACHE_SIZE : nSinceStart;\\n    }\\n\\n    // Calling code MUST ensure `counter >= startPos`\\n    function _getCacheNextIndex(\\n        uint256 counter,\\n        uint256 startPos\\n    ) private pure returns (uint256) {\\n        return (counter - startPos) & CACHE_INDEX_MASK;\\n    }\\n\\n    // slither-disable-next-line shadowing-state unused-state\\n    uint256[10] private _trailingGap;\\n}\\n\",\"keccak256\":\"0xb6d0c15dbc99d904d11d1298983b1f8460e0aa756141b396f5404bcfd5d7e5b4\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/interfaces/ITreeRootGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\ninterface ITreeRootGetter {\\n    function getRoot() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc6bb37fe4059cfe13c15f4c1d324b2de68a48348e136bf6cc72421f4721dc21d\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/interfaces/ITreeRootUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\ninterface ITreeRootUpdater {\\n    function updateRoot(bytes32 updatedLeaf, uint256 leafIndex) external;\\n}\\n\",\"keccak256\":\"0x4370b8a771095734709c5a2d7d920bc550beb91706364f2bdb8cb451cc539dbb\",\"license\":\"MIT\"},\"contracts/protocol/pantherPool/TransactionNoteEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport \\\"../errMsgs/TransactionNoteEmitterErrMsgs.sol\\\";\\n\\n/***\\n * @dev Every MASP transaction is accompanied by the \\\"Transaction Note\\\" - data\\n * a front-end needs to process the transaction (e.g. open UTXOs), reconstruct\\n * history of operations (on the wallet cold start), or send/receive a private\\n * message to \\\"future\\\" self or another user (think of a \\\"subpoena\\\").\\n * `PantherPool` smart contract publishes Transaction Notes as \\\"events\\\" (logs).\\n * The Transaction Note contains one or a few \\\"messages\\\", which may be \\\"public\\\"\\n * or \\\"private\\\".\\n * Public messages contain publicly seen on-chain data. Smart contracts, rather\\n * than users (the front-end), compose public messages.\\n * As the name assumes, private messages contain private data. The front-end\\n * prepares and encrypts these messages to pass them to smart contracts.\\n * Every private message is encrypted with the reading key of a receiver, who\\n * may be a recipient of an UTXO, or the user that spends UTXOs (\\\"messages to\\n * the future\\\"), or even a user not involved in spending/creating UTXOs.\\n * Smart contracts don't parse private messages but rather copy these messages\\n * \\\"as is\\\" into Transaction Notes.\\n * Every message belongs to a certain \\\"message type\\\". The message type defines\\n * the message length (size) and, for \\\"fixed-content\\\" messages, the content.\\n * The Message type of a fixed-content message defines all data fields of the\\n * message content - i.e. data formats/size, interpretation, and the sequence\\n * the data fields must follow in.\\n * For fixed-content private messages, the protocol also specifies the length\\n * of the ciphertext and the preimage content (smart contracts neither decrypt,\\n * nor parse the ciphertext, nor enforce its correctness).\\n * The \\\"free-content\\\" messages are designed for use solely by the front-end.\\n * The protocol specifies the length (size) but not the content.\\n * Every MASP transaction belongs to one of a few \\\"transaction types\\\".\\n * For every transaction type, the protocol specifies \\\"mandatory\\\" messages,\\n * which the Transaction Note MUST include.\\n * Users (DApp) may append \\\"optional\\\" messages to mandatory messages.\\n * There is also a special \\\"void\\\" message that has no content. It MAY replace a\\n * mandatory message when data is either missing, or undefined, or irrelevant,\\n * providing public knowledge of this fact does not leak privacy.\\n */\\nabstract contract TransactionNoteEmitter {\\n    // @notice Transaction Note, emitted with every MASP transaction\\n    event TransactionNote(uint8 txType, bytes content);\\n\\n    // ******************************\\n    // **** `bytes content` specs ***\\n    // ******************************\\n\\n    /* START of pseudo-code\\n    bytes content = abi.packed(messages[0], ..., messages[numMessages - 1]);\\n    numMessages = for_txType_num_of_mandatory_mssgs + num_of_opt_mssgs;\\n\\n    // For \\\"void\\\" message type:\\n    bytes messages[i] = abi.packed(byte msgType);\\n\\n    // For messages of types other than \\\"void\\\":\\n    bytes messages[i] = abi.packed(\\n        byte msgType,\\n        bytes[for_msgType_length] msgContainer\\n    );\\n\\n    // For a public fixed-content message, the Smart contract MUST compose\\n    // the `msgContainer` as defined by the `msgType` of the message\\n    // (no `ephemeralKey` needed as data is publicly seen)\\n    bytes msgContainer = avi.packed(<abi.packed on-chain data>)\\n\\n    // For a private fixed-content messages, the DApp MUST compose the\\n    // the `msgContainer` with the ephemeral key and the ciphertext\\n    bytes msgContainer = avi.packed(\\n        bytes32(ephemeralKey),\\n        bytes[for_msgType_ciphertext_length] ciphertext\\n    )\\n    END of pseudo-code */\\n\\n    // ***************************\\n    // **** Transaction Types ****\\n    // ***************************\\n\\n    // The range for `uint8 txType` divided into sub-ranges:\\n    //  - 0x00 .. 0x1F allowed\\n    //  - 0x20 .. 0xFF reserved (unused)\\n\\n    uint8 internal constant TT_ZACCOUNT_ACTIVATION = 0x01;\\n    // TransactionNote for this tx type MUST contain in the specified sequence:\\n    // - MT_UTXO_CREATE_TIME\\n    // - MT_UTXO_BUSTREE_IDS (for the new zAccount UTXO)\\n    // - MT_UTXO_ZACCOUNT\\n    // Then free-content messages MAY follow.\\n\\n    uint8 internal constant TT_PRP_CLAIM = 0x02;\\n    // TransactionNote for this tx type MUST contain messages of these types:\\n    // - MT_UTXO_CREATE_TIME\\n    // - MT_UTXO_BUSTREE_IDS (for the re-created zAccount UTXO)\\n    // - MT_UTXO_ZACCOUNT\\n    // Then free-content messages MAY follow.\\n\\n    uint8 internal constant TT_PRP_CONVERSION = 0x03;\\n    // TransactionNote for this tx type MUST contain messages of these types:\\n    // - MT_UTXO_CREATE_TIME\\n    // - MT_UTXO_BUSTREE_IDS (for the re-created zAccount UTXO)\\n    // - MT_UTXO_ZASSET_PUB\\n    // - MT_UTXO_ZACCOUNT\\n    // - MT_UTXO_ZASSET_PRIV\\n    // Then free-content messages MAY follow.\\n\\n    uint8 internal constant TT_MAIN_TRANSACTION = 0x04;\\n    // TransactionNote for this tx type MUST contain messages of these types:\\n    // - MT_UTXO_CREATE_TIME\\n    // - MT_UTXO_SPEND_TIME\\n    // - MT_UTXO_BUSTREE_IDS (for the re-created zAccount UTXO)\\n    // - MT_UTXO_ZACCOUNT\\n    // - MT_UTXO_ZASSET\\n    // - MT_UTXO_ZASSET\\n    // - MT_SPENT_2UTXO\\n    // Then free-content messages MAY follow.\\n\\n    // ***********************\\n    // **** Message Types ****\\n    // ***********************\\n\\n    // The range for `uint8 msgType` divided into sub-ranges:\\n    //  - 0x00 - the \\\"void\\\" (empty) message\\n    //  - 0x01 .. 0x2F for fixed-content private messages\\n    //  - 0x30 .. 0x3F for free-content private messages\\n    //  - 0x40 .. 0x5F reserved (unused)\\n    //  - 0x60 .. 0x7F for fixed-content public messages\\n    //  - 0x80 .. 0xEF reserved (unused)\\n    //  - 0xF0 .. 0xFF for free-content public messages\\n\\n    // \\\"Void\\\" type messages contain just this single byte:\\n    uint8 internal constant MT_VOID = 0x00;\\n    // Length in bytes\\n    uint256 internal constant LMT_VOID = 1;\\n\\n    // ---- Private data messages ---\\n\\n    /// Fixed-content private messages\\n\\n    // Message with (private) data of a zAccount UTXO:\\n    uint8 internal constant MT_UTXO_ZACCOUNT = 0x06;\\n    // `msgContainer` MUST contain the following data:\\n    // - bytes[32] ephemeralKey,\\n    // - bytes[64] cypherText\\n    // Length in bytes (msgType, ephemeralKey, msgContainer)\\n    uint256 internal constant LMT_UTXO_ZACCOUNT = 1 + 32 + 64;\\n    // Preimage of `cipherText` MUST contain (512 bit):\\n    // - random (256 bit)\\n    // - networkId (6 bit)\\n    // - zoneId (16 bit)\\n    // - nonce (24 bit)\\n    // - expiryTime (32 bit)\\n    // - amountZkp (64 bit)\\n    // - amountPrp (50 bit)\\n    // - totalAmountPerTimePeriod (64 bit)\\n\\n    // Message with private data of a partially-hidden zAsset UTXO:\\n    uint8 internal constant MT_UTXO_ZASSET_PRIV = 0x07;\\n    // `msgContainer` MUST contain the following data:\\n    // - bytes[32] ephemeralKey,\\n    // - bytes[64] cypherText\\n    // Length in bytes (msgType, ephemeralKey, msgContainer)\\n    uint256 internal constant LMT_UTXO_ZASSET_PRIV = 1 + 32 + 64;\\n    // Preimage of `cipherText` MUST contain (388 bit):\\n    // - random (256 bit)\\n    // - zAccountId (24 bit)\\n    // - zAssetId (64 bit)\\n    // - originNetworkId (6 bit)\\n    // - targetNetworkId (6 bit)\\n    // - originZoneId (16 bit)\\n    // - targetZoneId (16 bit)\\n\\n    // Message with (private) data of an entirely-hidden zAsset UTXO:\\n    uint8 internal constant MT_UTXO_ZASSET = 0x08;\\n    // `msgContainer` MUST contain the following data:\\n    // - bytes[32] ephemeralKey,\\n    // - bytes[64] cypherText\\n    // Length in bytes (msgType, ephemeralKey, msgContainer)\\n    uint256 internal constant LMT_UTXO_ZASSET = 1 + 32 + 64;\\n    // Preimage of `cipherText` MUST contain (452 bit):\\n    // - random (256 bit)\\n    // - zAccountId (24 bit)\\n    // - zAssetId (64 bit)\\n    // - originNetworkId (6 bit)\\n    // - targetNetworkId (6 bit)\\n    // - originZoneId (16 bit)\\n    // - targetZoneId (16 bit)\\n    // - bytes64 scaledAmount\\n\\n    // (Private) Message with commitments to two UTXOs spent in the same transaction:\\n    // It is designated to the spender of UTXOs, so It reuses the ephemeral key from\\n    // the same transaction's MT_UTXO_ZACCOUNT message\\n    uint8 internal constant MT_SPENT_2UTXO = 0x09;\\n    // `msgContainer` MUST contain the following data:\\n    // - bytes[64] cypherText\\n    // (the ephemeral key omitted to avoid duplication)\\n    // Length in bytes (msgType, msgContainer)\\n    uint256 internal constant LMT_SPENT_2UTXO = 1 + 64;\\n    // Preimage of `cipherText` MUST contain (512 bit):\\n    // - spentUtxoCommitment1 XOR createdZaccountUtxoRandom\\n    // - spentUtxoCommitment2 XOR createdZaccountUtxoRandom\\n\\n    /// Free-content private messages\\n    // Purposely commented out as smart contracts do not use these constants\\n    // (but to keep the specs complete, values provided as comments)\\n\\n    // uint8 internal constant MT_FREE_PRIV_ONE_BLOCK = 0x30;\\n    // `msgContainer` MUST contain:\\n    // - bytes[32] ephemeralKey,\\n    // - bytes[16] cypherText (single 16-byte block)\\n    // uint8 internal constant LMT_FREE_PRIV_ONE_BLOCK = 1 + 32 + 16;\\n\\n    // uint8 internal constant MT_FREE_PRIV_TWO_BLOCKS = 0x31;\\n    // `msgContainer` MUST contain:\\n    // - bytes[32] ephemeralKey,\\n    // - bytes[32] cypherText (two 16-byte blocks)\\n    // uint8 internal constant LMT_FREE_PRIV_TWO_BLOCKS = 1 + 32 + 32;\\n\\n    // ---- Public data messages ----\\n\\n    /// Fixed-content public messages\\n\\n    // Message with the creation time of UTXO(s):\\n    uint8 internal constant MT_UTXO_CREATE_TIME = 0x60;\\n    // `msgContainer` MUST contain the following (publicly seen) data:\\n    // - uint32 creationTime\\n    // Length in bytes (msgType, msgContainer)\\n    uint256 internal constant LMT_UTXO_CREATE_TIME = 1 + 4;\\n\\n    // Message with the spend time of UTXO(s):\\n    uint8 internal constant MT_UTXO_SPEND_TIME = 0x61;\\n    // `msgContainer` MUST contain the following (publicly seen) data:\\n    // - uint32 spendType\\n    // Length in bytes (msgType, msgContainer)\\n    uint256 internal constant LMT_UTXO_SPEND_TIME = 1 + 4;\\n\\n    // Message with the indexes of a UTXO in the \\\"Bus Tree Queues\\\":\\n    uint8 internal constant MT_UTXO_BUSTREE_IDS = 0x62;\\n    // `msgContainer` MUST contain the following (publicly seen) data:\\n    // - bytes32 commitment\\n    // - uint32 queueId\\n    // - uint8 indexInQueue\\n    // Length in bytes (msgType, msgContainer)\\n    uint256 internal constant LMT_UTXO_BUSTREE_IDS = 1 + 37;\\n\\n    // Message with public data of a partially-hidden zAsset UTXO:\\n    uint8 internal constant MT_UTXO_ZASSET_PUB = 0x63;\\n    // `msgContainer` MUST contain the following (publicly seen) data:\\n    // - bytes64 scaledAmount\\n    // (createTime included in the MT_UTXO_CREATE_TIME and skipped here)\\n    uint256 internal constant LMT_UTXO_ZASSET_PUB = 1 + 8;\\n\\n    /// Free-content public messages\\n    // Purposely commented out as smart contracts do not use these constants\\n    // (but to keep the specs complete, values provided as comments)\\n\\n    /*\\n    uint8 internal constant MT_FREE_PUB_ONE_BLOCK = 0xF0;\\n    // `msgContainer` MUST contain exactly 1 16-byte block:\\n    uint8 internal constant LMT_FREE_PUB_ONE_WORD = 1 + 16;\\n\\n    uint8 internal constant MT_FREE_PUB_TWO_BLOCKS = 0xF1;\\n    // `msgContainer` MUST contain exactly 2 x 16-byte blocks:\\n    uint8 internal constant LMT_FREE_PUB_TWO_BLOCKS = 1 + 32;\\n    */\\n\\n    /**\\n     * @notice Sanitizes private msg for zAccountActivation tx\\n     * @param privateMessages the message to be sanitized\\n     * @dev privateMessages for zAccountActivation tx is expected to contain a MT_UTXO_ZACCOUNT.\\n     * MT_UTXO_ZACCOUNT is checked in the `_sanitizePrivateMessage` function.\\n     */\\n    function _sanitizeZAccountActivationMessage(\\n        bytes memory privateMessages\\n    ) private pure {\\n        require(\\n            privateMessages.length >= LMT_UTXO_ZACCOUNT,\\n            ERR_LOW_MESSAGE_LENGTH\\n        );\\n    }\\n\\n    /**\\n     * @notice Sanitizes private msg for prpClaim tx\\n     * @param privateMessages the message to be sanitized\\n     * @dev privateMessages for prpClaim tx is expected to contain a MT_UTXO_ZACCOUNT.\\n     * MT_UTXO_ZACCOUNT is checked in the `_sanitizePrivateMessage` function.\\n     */\\n    function _sanitizePrpClaimMessage(\\n        bytes memory privateMessages\\n    ) private pure {\\n        require(\\n            privateMessages.length >= LMT_UTXO_ZACCOUNT,\\n            ERR_LOW_MESSAGE_LENGTH\\n        );\\n    }\\n\\n    /**\\n     * @notice Sanitizes private msg for prpConversion tx\\n     * @param privateMessages the message to be sanitized\\n     * @dev privateMessages for prpConversion tx is expected to contain a MT_UTXO_ZACCOUNT and\\n     * a `MT_UTXO_ZASSET_PRIV` message.\\n     * MT_UTXO_ZACCOUNT is checked in the `_sanitizePrivateMessage` function.\\n     * The MT_UTXO_ZASSET_PRIV contains 97 bytes (search for `LMT_UTXO_ZASSET` in the current file)\\n     * and it is expected to be started at index 97.\\n     */\\n    function _sanitizePrpConversionMessage(\\n        bytes memory privateMessages\\n    ) private pure {\\n        uint8 mtUtxoZAssetPrivIndex = 97;\\n\\n        require(\\n            privateMessages.length >= LMT_UTXO_ZACCOUNT + LMT_UTXO_ZASSET_PRIV,\\n            ERR_LOW_MESSAGE_LENGTH\\n        );\\n\\n        // privateMessages for prp conversion is expected to containd\\n        // `MT_UTXO_ZASSET_PRIV` at index 97\\n        require(\\n            uint8(privateMessages[mtUtxoZAssetPrivIndex]) ==\\n                MT_UTXO_ZASSET_PRIV,\\n            ERR_INVALID_MT_UTXO_ZASSET_PRIV\\n        );\\n    }\\n\\n    /**\\n     * @notice Sanitizes private msg for main tx\\n     * @param privateMessages the message to be sanitized\\n     * @dev privateMessages for main tx is expected to contain a MT_UTXO_ZACCOUNT and\\n     * two `MT_UTXO_ZASSET_PRIV`s messages and a MT_SPENT_2UTXO message.\\n     * MT_UTXO_ZACCOUNT is checked in the `_sanitizePrivateMessage` function.\\n     * Each MT_UTXO_ZASSET_PRIV contains 97 bytes (search for `LMT_UTXO_ZASSET` in the current file)\\n     * First MT_UTXO_ZASSET_PRIV is expected to be started at index 97 and ended at index 194 (97 + 97)\\n     * Second MT_UTXO_ZASSET_PRIV is expected to be started at index 194 and ended at index 291 (194 + 97)\\n     * The `MT_SPENT_2UTXO` is expected to start at index 291\\n     */\\n    function _sanitizeMainMessage(bytes memory privateMessages) private pure {\\n        ///@dev check `LMT_UTXO_ZASSET` description\\n        uint8 mtFirstUtxoZAssetIndex = 97;\\n        uint8 mtSecondUtxoZAssetIndex = 194;\\n        uint16 mtSpend2UtxoIndex = 291;\\n\\n        require(\\n            privateMessages.length >=\\n                LMT_UTXO_ZACCOUNT + LMT_UTXO_ZASSET * 2 + LMT_SPENT_2UTXO,\\n            ERR_LOW_MESSAGE_LENGTH\\n        );\\n\\n        // privateMessages for main tx is expected to contain\\n        // 2 `MT_UTXO_ZASSET_PRIV`s (first must be at index 97 and\\n        // second one must be at index 194)\\n        require(\\n            uint8(privateMessages[mtFirstUtxoZAssetIndex]) == MT_UTXO_ZASSET &&\\n                uint8(privateMessages[mtSecondUtxoZAssetIndex]) ==\\n                MT_UTXO_ZASSET,\\n            ERR_INVALID_MT_UTXO_ZASSET\\n        );\\n\\n        // It is also expected to contain `MT_SPENT_2UTXO` started at index 291\\n        require(\\n            uint8(privateMessages[mtSpend2UtxoIndex]) == MT_SPENT_2UTXO,\\n            ERR_INVALID_MT_UTXO_SPEND_2UTXO\\n        );\\n    }\\n\\n    function _sanitizePrivateMessage(\\n        bytes memory privateMessages,\\n        uint8 txType\\n    ) internal pure {\\n        uint8 mtUtxoZAccountIndex = 0;\\n\\n        // All kind of privateMessages are expected to be started with `MT_UTXO_ZACCOUNT`\\n        require(\\n            uint8(privateMessages[mtUtxoZAccountIndex]) == MT_UTXO_ZACCOUNT,\\n            ERR_INVALID_MT_UTXO_ZACCOUNT\\n        );\\n\\n        if (txType == TT_ZACCOUNT_ACTIVATION) {\\n            _sanitizeZAccountActivationMessage(privateMessages);\\n        }\\n\\n        if (txType == TT_PRP_CLAIM) {\\n            _sanitizePrpClaimMessage(privateMessages);\\n        }\\n\\n        if (txType == TT_PRP_CONVERSION) {\\n            _sanitizePrpConversionMessage(privateMessages);\\n        }\\n\\n        if (txType == TT_MAIN_TRANSACTION) {\\n            _sanitizeMainMessage(privateMessages);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e3afd26daa1c79ff7a12c3afba219b9c6e7bcc28bac25849077d851147a1511\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$de5c081b01b921d8a5a1824062760900b1$__90631e86251990614677908590600401615397565b602060405180830381865af4158015614694573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242f9190615146565b600b5460009067ffffffffffffffff80821691600160401b9004166146dd8282613d3f565b6000818152600a6020526040902085905592506146f9826153bf565b600b805467ffffffffffffffff191667ffffffffffffffff92909216919091179055509092915050565b80516000907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001118015614779575060208201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b80156147a8575060408201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b60405180606001604052806022815260200161540f60229139906147df5760405162461bcd60e51b81526004016109259190614d7d565b50604051635a53025d60e01b815273__$a786a838ef97de7d2113fa91ed3c799076$__90635a53025d906146779085906004016153e6565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561485357614853614817565b6040525050565b600061010082840312156136a857600080fd5b600082601f83011261487e57600080fd5b813567ffffffffffffffff81111561489857614898614817565b6040516148af601f8301601f19166020018261482d565b8181528460208386010111156148c457600080fd5b816020850160208301376000918101602001919091529392505050565b60ff811681146144a357600080fd5b8035613fcc816148e1565b6000806000806000610180868803121561491457600080fd5b853567ffffffffffffffff8082111561492c57600080fd5b818801915088601f83011261494057600080fd5b813560208282111561495457614954614817565b8160051b6040516149678383018261482d565b9283528481018201928281018d85111561498057600080fd5b958301955b8487101561499c5786358152958301958301614985565b5099506149ad90508b8b830161485a565b9750505061012088013594506101408801359150808211156149ce57600080fd5b506149db8882890161486d565b9250506149eb61016087016148f0565b90509295509295909350565b80356001600160601b0381168114613fcc57600080fd5b600060208284031215614a2057600080fd5b614a29826149f7565b9392505050565b600060208284031215614a4257600080fd5b5035919050565b6001600160a01b03811681146144a357600080fd5b600060208284031215614a7057600080fd5b8135614a2981614a49565b60008083601f840112614a8d57600080fd5b50813567ffffffffffffffff811115614aa557600080fd5b6020830191508360208260051b8501011115614ac057600080fd5b9250929050565b6000806000806000806101808789031215614ae157600080fd5b863567ffffffffffffffff80821115614af957600080fd5b614b058a838b01614a7b565b9098509650869150614b1a8a60208b0161485a565b95506101208901359150614b2d82614a49565b9093506101408801359080821115614b4457600080fd5b50614b5189828a0161486d565b92505061016087013590509295509295509295565b80151581146144a357600080fd5b60008060408385031215614b8757600080fd5b8235614b9281614a49565b91506020830135614ba281614b66565b809150509250929050565b600060a082840312156136a857600080fd5b60008060408385031215614bd257600080fd5b50508035926020909101359150565b63ffffffff811681146144a357600080fd5b600060208284031215614c0557600080fd5b8135614a2981614be1565b6000806000806000806101808789031215614c2a57600080fd5b863567ffffffffffffffff80821115614c4257600080fd5b614c4e8a838b01614a7b565b9098509650869150614c638a60208b0161485a565b9550610120890135915080821115614c7a57600080fd5b50614c8789828a0161486d565b935050610140870135915061016087013590509295509295509295565b60008060008060006101608688031215614cbd57600080fd5b853567ffffffffffffffff80821115614cd557600080fd5b614ce189838a01614a7b565b9097509550859150614cf68960208a0161485a565b9450610120880135915080821115614d0d57600080fd5b50614d1a8882890161486d565b9598949750929561014001359392505050565b60005b83811015614d48578181015183820152602001614d30565b50506000910152565b60008151808452614d69816020860160208601614d2d565b601f01601f19169290920160200192915050565b602081526000614a296020830184614d51565b634e487b7160e01b600052603260045260246000fd5b83815260008351614dbe816020850160208801614d2d565b60f89390931b7fff0000000000000000000000000000000000000000000000000000000000000016602092909301918201929092526021019392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160601b03818116838216019080821115614e3357614e33614dfd565b5092915050565b803582526020808201359083015260408082016040840137604060808201608084013761343260c0830160c0830180358252602090810135910152565b6001600160a01b03841681526101406020808301829052845191830182905260009161016084019186810191845b81811015614ec157835185529382019392820192600101614ea5565b5050505080915050613d826040830184614e3a565b600060208284031215614ee857600080fd5b8151614a2981614b66565b600060ff60f81b808c60f81b16835263ffffffff60e01b808c60e01b166001850152818b60f81b166005850152808a60e01b166006850152818960f81b16600a85015287600b850152808760e01b16602b85015250808560f81b16602f840152508251614f67816030850160208701614d2d565b919091016030019a9950505050505050505050565b60ff83168152604060208201526000613d826040830184614d51565b8181038181111561242f5761242f614dfd565b600081614fba57614fba614dfd565b506000190190565b60006101406001600160a01b03871683528060208401528481840152506101607f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85111561500f57600080fd5b8460051b808783860137830101905061502b6040830184614e3a565b95945050505050565b6000806040838503121561504757600080fd5b825161505281614be1565b6020840151909250614ba2816148e1565b600060ff60f81b808a60f81b16835263ffffffff60e01b808a60e01b166001850152818960f81b166005850152876006850152808760e01b16602685015250808560f81b16602a8401525082516150c181602b850160208701614d2d565b91909101602b0198975050505050505050565b60a0810182356150e3816148e1565b60ff16825260208301356150f681614a49565b6001600160a01b038082166020850152604085013560408501526060850135915061512082614a49565b1660608301526001600160601b0361513a608085016149f7565b16608083015292915050565b60006020828403121561515857600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b6000826151845761518461515f565b500490565b600081518084526020808501945080840160005b838110156151b95781518752958201959082019060010161519d565b509495945050505050565b602081526000614a296020830184615189565b600060ff60f81b808c60f81b16835263ffffffff60e01b808c60e01b166001850152818b60f81b166005850152896006850152808960e01b16602685015250808760f81b16602a840152808660f81b16602b840152507fffffffffffffffff0000000000000000000000000000000000000000000000008460c01b16602c830152825161526b816034850160208701614d2d565b919091016034019a9950505050505050505050565b60008261528f5761528f61515f565b500690565b6040815260006152a76040830185615189565b90506001600160601b03831660208301529392505050565b600060033d11156152d85760046000803e5060005160e01c5b90565b600060443d10156152e95790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561531957505050505090565b82850191508151818111156153315750505050505090565b843d870101602082850101111561534b5750505050505090565b61535a6020828601018761482d565b509095945050505050565b8082018082111561242f5761242f614dfd565b600081600019048311821515161561539257615392614dfd565b500290565b60808101818360005b600481101561242b5781518352602092830192909101906001016153a0565b600067ffffffffffffffff8083168181036153dc576153dc614dfd565b6001019392505050565b60608101818360005b600381101561242b5781518352602092830192909101906001016153ef56fe506f736569646f6e4861736865723a20696e707574206e6f7420696e206669656c64a164736f6c6343000810000a",
  "libraries": {
    "PoseidonT4": "0x3Eb4f42B303f865B2409e67031927E4c4FEB3f1F",
    "PoseidonT5": "0x7af4DD5d4B0f193A1d16b2C9d2492fAEC2558FD3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountPrp(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256)": {
        "details": "It spends the old zAccount utxo and create a new one with increased prp balance. It can be executed only be prpVoucherGrantor.",
        "params": {
          "cachedForestRootIndex": "forest merkle root index. 0 means the most updated root.",
          "inputs": "[14] - magicalConstraint;",
          "privateMessages": "the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText This data is used to spend the newly created utxo.",
          "proof": "A proof associated with the zAccount and a secret."
        }
      },
      "createZAccountUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),address,bytes,uint256)": {
        "details": "It can be executed only by zAccountsRegistry contract.",
        "params": {
          "cachedForestRootIndex": "forest merkle root index. 0 means the most updated root.",
          "inputs": "[18] - magicalConstraint",
          "privateMessages": "the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText",
          "proof": "A proof associated with the zAccount and a secret.",
          "zkpPayer": "Wallet that withdraws onboarding zkp rewards"
        }
      },
      "createZzkpUtxoAndSpendPrpUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256,uint256)": {
        "details": "It converts prp to zZkp. The msg.sender should approve pantherPool to transfer the ZKPs to the vault in order to create new zAsset utxo. In ideal case, the msg sender is prpConverter. This function also spend the old zAccount utxo and creates new one with decreased prp balance.",
        "params": {
          "cachedForestRootIndex": "forest merkle root index. 0 means the most updated root.",
          "inputs": "[14] - magicalConstraint;",
          "privateMessages": "the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText This data is used to spend the newly created utxo.",
          "proof": "A proof associated with the zAccount and a secret.",
          "zkpAmountOutRounded": "The zkp amount to be locked in the vault, rounded by 1e12."
        }
      },
      "main(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256,bytes,uint8)": {
        "params": {
          "inputs": "[41] - magicalConstraint;"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "accountPrp(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256)": {
        "notice": "Accounts prp to zAccount"
      },
      "createZAccountUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),address,bytes,uint256)": {
        "notice": "Creates zAccount utxo"
      },
      "createZzkpUtxoAndSpendPrpUtxo(uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes,uint256,uint256)": {
        "notice": "Accounts prp conversion"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23107,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)10_storage"
      },
      {
        "astId": 23125,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "_cachedRoots",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 23127,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "_cachedRootsCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 23129,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "_cacheStartPos",
        "offset": 8,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 23375,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "_trailingGap",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)10_storage"
      },
      {
        "astId": 21225,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "_startGap",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_bytes32)10_storage"
      },
      {
        "astId": 21241,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "_forestRoot",
        "offset": 0,
        "slot": "32",
        "type": "t_bytes32"
      },
      {
        "astId": 21245,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "leafs",
        "offset": 0,
        "slot": "33",
        "type": "t_array(t_bytes32)4_storage"
      },
      {
        "astId": 21259,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "_endGap",
        "offset": 0,
        "slot": "37",
        "type": "t_array(t_bytes32)10_storage"
      },
      {
        "astId": 8528,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "__gap",
        "offset": 0,
        "slot": "47",
        "type": "t_array(t_uint256)453_storage"
      },
      {
        "astId": 8547,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "vaultAssetUnlockers",
        "offset": 0,
        "slot": "500",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8549,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "zAccountRegistrationCircuitId",
        "offset": 0,
        "slot": "501",
        "type": "t_uint160"
      },
      {
        "astId": 8551,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "prpAccountingCircuitId",
        "offset": 0,
        "slot": "502",
        "type": "t_uint160"
      },
      {
        "astId": 8553,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "prpAccountConversionCircuitId",
        "offset": 0,
        "slot": "503",
        "type": "t_uint160"
      },
      {
        "astId": 8555,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "mainCircuitId",
        "offset": 0,
        "slot": "504",
        "type": "t_uint160"
      },
      {
        "astId": 8559,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "__circuiteIdsGap",
        "offset": 0,
        "slot": "505",
        "type": "t_array(t_uint256)9_storage"
      },
      {
        "astId": 8563,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "isSpent",
        "offset": 0,
        "slot": "514",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8565,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "accountedRewards",
        "offset": 0,
        "slot": "515",
        "type": "t_uint96"
      },
      {
        "astId": 8567,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "kycReward",
        "offset": 12,
        "slot": "515",
        "type": "t_uint96"
      },
      {
        "astId": 8569,
        "contract": "contracts/protocol/PantherPoolV1.sol:PantherPoolV1",
        "label": "maxTimeDelta",
        "offset": 24,
        "slot": "515",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)10_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_bytes32)4_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)453_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[453]",
        "numberOfBytes": "14496"
      },
      "t_array(t_uint256)9_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[9]",
        "numberOfBytes": "288"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}