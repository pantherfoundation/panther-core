{
  "address": "0x52666A3D702Ab6C268addA3911C0E40648F21360",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootChainManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FxDepositERC20",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHILD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FX_CHILD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "content",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setPzkpMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc19fd49b6636bdbe1180468e0e98a5912cef47d06de18383ee38bef514a6528",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x52666A3D702Ab6C268addA3911C0E40648F21360",
    "transactionIndex": 12,
    "gasUsed": "400553",
    "logsBloom": "0x
    "blockHash": "0x776e04a1e2d692f56b69fe10082e44e0414f9e27b044b77a8cf7aaee48f04761",
    "transactionHash": "0xdc19fd49b6636bdbe1180468e0e98a5912cef47d06de18383ee38bef514a6528",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 41862456,
        "transactionHash": "0xdc19fd49b6636bdbe1180468e0e98a5912cef47d06de18383ee38bef514a6528",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000002c662f9b67ecd000000000000000000000000000000000000000000000000175b4cbdd00e28830000000000000000000000000000000000000000000003330f1bb70e28192c950000000000000000000000000000000000000000000000001758865ad657a9b60000000000000000000000000000000000000000000003330f1e7d7121cfab62",
        "logIndex": 23,
        "blockHash": "0x776e04a1e2d692f56b69fe10082e44e0414f9e27b044b77a8cf7aaee48f04761"
      }
    ],
    "blockNumber": 41862456,
    "cumulativeGasUsed": "2401718",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0xCf73231F28B7331BBe3124B907840A94851f9f11",
    "0xA543d6badE63ff48dEed3ceC066003f295A09790",
    "0x4004C49aBb96B11D89A52DeCCa2D1522da7f3089"
  ],
  "numDeployments": 1,
  "solcInputHash": "57b21eaaf9910c76f4d0118432267c50",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FxDepositERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHILD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FX_CHILD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setPzkpMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/mocks/MockChildChainManager.sol\":\"MockChildChainManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title ImmutableOwnable\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x06d3e09256c510bd1a5c8f6f05cc99fbc0d51919f2a64e022395bc169c349d90\",\"license\":\"MIT\"},\"contracts/common/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title TransferHelper library\\n/// @dev Helper methods for interacting with ERC20, ERC721, ERC1155 tokens and sending ETH\\n/// Based on the Uniswap/solidity-lib/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n    /// @dev Throws if the deployed code of the `token` is empty.\\n    // Low-level CALL to a non-existing contract returns `success` of 1 and empty `data`.\\n    // It may be misinterpreted as a successful call to a deployed token contract.\\n    // So, the code calling a token contract must insure the contract code exists.\\n    modifier onlyDeployedToken(address token) {\\n        uint256 codeSize;\\n        // slither-disable-next-line assembly\\n        assembly {\\n            codeSize := extcodesize(token)\\n        }\\n        require(codeSize > 0, \\\"TransferHelper: zero codesize\\\");\\n        _;\\n    }\\n\\n    /// @dev Approve the `operator` to spend all of ERC720 tokens on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeSetApprovalForAll(\\n        address token,\\n        address operator,\\n        bool approved\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('setApprovalForAll(address,bool)'));\\n            abi.encodeWithSelector(0xa22cb465, operator, approved)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Get the ERC20 balance of `account`\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeBalanceOf(\\n        address token,\\n        address account\\n    ) internal returns (uint256 balance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('balanceOf(address)')));\\n            abi.encodeWithSelector(0x70a08231, account)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: balanceOf call failed\\\"\\n        );\\n\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the ERC20 allowance of `spender`\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeAllowance(\\n        address token,\\n        address owner,\\n        address spender\\n    ) internal onlyDeployedToken(token) returns (uint256 allowance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n            abi.encodeWithSelector(0xdd62ed3e, owner, spender)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: allowance call failed\\\"\\n        );\\n\\n        allowance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Approve the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('approve(address,uint256)'));\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Increase approval of the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeIncreaseAllowance(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"increaseAllowance(address,uint256)\\\"));\\n            abi.encodeWithSelector(0x39509351, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transfer(address,uint256)'));\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer an ERC721 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc721SafeTransferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x42842e0e, from, to, tokenId)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `amount` ERC1155 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)'));\\n            abi.encodeWithSelector(0xf242432a, from, to, tokenId, amount, _data)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` Ether from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferETH(address to, uint256 value) internal {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH transfer failed\\\");\\n    }\\n\\n    function _requireSuccess(bool success, bytes memory res) private pure {\\n        require(\\n            success && (res.length == 0 || abi.decode(res, (bool))),\\n            \\\"TransferHelper: token contract call failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x287fdd8c63a2b66ac25947309942af61b4647c88ae2e9cfc38495b0b3d9f0836\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/interfaces/IPZkp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IPZkp {\\n    function minter() external view returns (address);\\n\\n    function setMinter(address _minter) external;\\n\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\",\"keccak256\":\"0xb8054b359c3254632bfad438431edf14acfe802eed10a2a0637412b71601f6f5\",\"license\":\"GPL-3.0\"},\"contracts/common/mocks/MockChildChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../interfaces/IPZkp.sol\\\";\\n\\nimport \\\"../../staking/interfaces/IFxStateSender.sol\\\";\\nimport \\\"../ImmutableOwnable.sol\\\";\\n\\nimport \\\"../TransferHelper.sol\\\";\\n\\ncontract MockChildChainManager is ImmutableOwnable {\\n    address public immutable FX_CHILD;\\n\\n    address private immutable ROOT_CHAIN_MANAGER;\\n\\n    address public immutable CHILD_TOKEN;\\n\\n    event FxDepositERC20(\\n        address indexed rootToken,\\n        address indexed depositor,\\n        address indexed userAddress,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address _owner,\\n        address _fxChild,\\n        address _rootChainManager,\\n        address _childToken\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            _fxChild != address(0) && _rootChainManager != address(0),\\n            \\\"init:zero address\\\"\\n        );\\n\\n        FX_CHILD = _fxChild;\\n        ROOT_CHAIN_MANAGER = _rootChainManager;\\n        CHILD_TOKEN = _childToken;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256, // stateId (Polygon PoS Bridge state sync ID, unused)\\n        address rootMessageSender,\\n        bytes calldata content\\n    ) external {\\n        require(msg.sender == FX_CHILD, \\\"PMR:INVALID_CALLER\\\");\\n        require(rootMessageSender == ROOT_CHAIN_MANAGER, \\\"PMR:INVALID_SENDER\\\");\\n\\n        (address to, uint256 amount) = abi.decode(content, (address, uint256));\\n\\n        IPZkp(CHILD_TOKEN).deposit(to, abi.encode(amount));\\n    }\\n\\n    function setPzkpMinter(address _minter) external onlyOwner {\\n        require(IPZkp(CHILD_TOKEN).minter() == address(this), \\\"Unauthorized\\\");\\n\\n        IPZkp(CHILD_TOKEN).setMinter(_minter);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x764728f81dfd1fe02483936e3c7585a9b69f0c20f8b74cab7c3b07d1e9d2f014\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IFxStateSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/***\\n * @dev An interface of the `FxRoot` contract\\n * `FxRoot` is the contract of the \\\"Fx-Portal\\\" (a PoS bridge run by the Polygon team) on the\\n * mainnet/Goerli network. It passes data to s user-defined contract on the Polygon/Mumbai.\\n * See https://docs.polygon.technology/docs/develop/l1-l2-communication/fx-portal\\n */\\ninterface IFxStateSender {\\n    function sendMessageToChild(\\n        address _receiver,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x81f9bbd2a34f52dbfb1d5358fb6ef2341eebdd374720c5d445008465f3cc3040\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161080b38038061080b8339810160408190526100309161012c565b836001600160a01b03811661008c5760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b039081166080528316158015906100b257506001600160a01b03821615155b6100f25760405162461bcd60e51b8152602060048201526011602482015270696e69743a7a65726f206164647265737360781b6044820152606401610083565b6001600160a01b0392831660a05290821660c0521660e05250610180565b80516001600160a01b038116811461012757600080fd5b919050565b6000806000806080858703121561014257600080fd5b61014b85610110565b935061015960208601610110565b925061016760408601610110565b915061017560608601610110565b905092959194509250565b60805160a05160c05160e0516106316101da60003960008181610103015281816101ae015281816102a301526104100152600061037c01526000818160b4015261030d0152600081816071015261012701526106316000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063886933791161005057806388693379146100d65780639a7c4b71146100eb578063fd41b71d146100fe57600080fd5b8063117803e31461006c57806382f9deb5146100af575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100e96100e43660046104cf565b610125565b005b6100e96100f93660046104f3565b610302565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146101a25760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663075461726040518163ffffffff1660e01b8152600401602060405180830381865afa15801561020a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022e919061057c565b6001600160a01b0316146102845760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a656400000000000000000000000000000000000000006044820152606401610199565b604051637e51dad560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063fca3b5aa90602401600060405180830381600087803b1580156102e757600080fd5b505af11580156102fb573d6000803e3d6000fd5b5050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037a5760405162461bcd60e51b815260206004820152601260248201527f504d523a494e56414c49445f43414c4c455200000000000000000000000000006044820152606401610199565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146103fb5760405162461bcd60e51b815260206004820152601260248201527f504d523a494e56414c49445f53454e44455200000000000000000000000000006044820152606401610199565b60008061040a83850185610599565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cf2c52cb838360405160200161045191815260200190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161047d9291906105c5565b600060405180830381600087803b15801561049757600080fd5b505af11580156104ab573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b03811681146104cc57600080fd5b50565b6000602082840312156104e157600080fd5b81356104ec816104b7565b9392505050565b6000806000806060858703121561050957600080fd5b84359350602085013561051b816104b7565b9250604085013567ffffffffffffffff8082111561053857600080fd5b818701915087601f83011261054c57600080fd5b81358181111561055b57600080fd5b88602082850101111561056d57600080fd5b95989497505060200194505050565b60006020828403121561058e57600080fd5b81516104ec816104b7565b600080604083850312156105ac57600080fd5b82356105b7816104b7565b946020939093013593505050565b6001600160a01b038316815260006020604081840152835180604085015260005b81811015610602578581018301518582016060015282016105e6565b506000606082860101526060601f19601f83011685010192505050939250505056fea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063886933791161005057806388693379146100d65780639a7c4b71146100eb578063fd41b71d146100fe57600080fd5b8063117803e31461006c57806382f9deb5146100af575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100e96100e43660046104cf565b610125565b005b6100e96100f93660046104f3565b610302565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146101a25760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663075461726040518163ffffffff1660e01b8152600401602060405180830381865afa15801561020a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022e919061057c565b6001600160a01b0316146102845760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a656400000000000000000000000000000000000000006044820152606401610199565b604051637e51dad560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063fca3b5aa90602401600060405180830381600087803b1580156102e757600080fd5b505af11580156102fb573d6000803e3d6000fd5b5050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037a5760405162461bcd60e51b815260206004820152601260248201527f504d523a494e56414c49445f43414c4c455200000000000000000000000000006044820152606401610199565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146103fb5760405162461bcd60e51b815260206004820152601260248201527f504d523a494e56414c49445f53454e44455200000000000000000000000000006044820152606401610199565b60008061040a83850185610599565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cf2c52cb838360405160200161045191815260200190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161047d9291906105c5565b600060405180830381600087803b15801561049757600080fd5b505af11580156104ab573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b03811681146104cc57600080fd5b50565b6000602082840312156104e157600080fd5b81356104ec816104b7565b9392505050565b6000806000806060858703121561050957600080fd5b84359350602085013561051b816104b7565b9250604085013567ffffffffffffffff8082111561053857600080fd5b818701915087601f83011261054c57600080fd5b81358181111561055b57600080fd5b88602082850101111561056d57600080fd5b95989497505060200194505050565b60006020828403121561058e57600080fd5b81516104ec816104b7565b600080604083850312156105ac57600080fd5b82356105b7816104b7565b946020939093013593505050565b6001600160a01b038316815260006020604081840152835180604085015260005b81811015610602578581018301518582016060015282016105e6565b506000606082860101526060601f19601f83011685010192505050939250505056fea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5793,
        "contract": "contracts/common/mocks/MockChildChainManager.sol:MockChildChainManager",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}