{
  "address": "0x74FC161573bDe26ac884dd88e7C82951E2e1B577",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pZkpToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "DepositForLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ProcessMessageFromRootLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "SendMessageToChildLog",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PZKP_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZKP_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "tempSetMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf138e07b619372ff2019878adb20a6a7de0bf11c2a800afab8e2f90361e7e08",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x74FC161573bDe26ac884dd88e7C82951E2e1B577",
    "transactionIndex": 5,
    "gasUsed": "666140",
    "logsBloom": "0x00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008004000000020000000000000000000000000000000000000000000000800000000000000000020100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000002000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000040000100000",
    "blockHash": "0x6e320611c70f48f6e2d1e61f6862f2f38058dfc165341a72235513f4f66e1173",
    "transactionHash": "0xbf138e07b619372ff2019878adb20a6a7de0bf11c2a800afab8e2f90361e7e08",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 41862899,
        "transactionHash": "0xbf138e07b619372ff2019878adb20a6a7de0bf11c2a800afab8e2f90361e7e08",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003e7a760db381c00000000000000000000000000000000000000000000000017556d0e1eeb46be000000000000000000000000000000000000000000000080fddb310b66a21d1e00000000000000000000000000000000000000000000000017518566be100ea2000000000000000000000000000000000000000000000080fddf18b2c77d553a",
        "logIndex": 20,
        "blockHash": "0x6e320611c70f48f6e2d1e61f6862f2f38058dfc165341a72235513f4f66e1173"
      }
    ],
    "blockNumber": 41862899,
    "cumulativeGasUsed": "1401904",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0x4004C49aBb96B11D89A52DeCCa2D1522da7f3089",
    "0x4004C49aBb96B11D89A52DeCCa2D1522da7f3089"
  ],
  "numDeployments": 3,
  "solcInputHash": "41886c76ddb1a578f316001a3c179f61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pZkpToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"DepositForLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ProcessMessageFromRootLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"SendMessageToChildLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PZKP_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZKP_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendMessageToChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"tempSetMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/mocks/MockFxPortal.sol\":\"MockFxPortal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title ImmutableOwnable\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x06d3e09256c510bd1a5c8f6f05cc99fbc0d51919f2a64e022395bc169c349d90\",\"license\":\"MIT\"},\"contracts/common/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title TransferHelper library\\n/// @dev Helper methods for interacting with ERC20, ERC721, ERC1155 tokens and sending ETH\\n/// Based on the Uniswap/solidity-lib/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n    /// @dev Throws if the deployed code of the `token` is empty.\\n    // Low-level CALL to a non-existing contract returns `success` of 1 and empty `data`.\\n    // It may be misinterpreted as a successful call to a deployed token contract.\\n    // So, the code calling a token contract must insure the contract code exists.\\n    modifier onlyDeployedToken(address token) {\\n        uint256 codeSize;\\n        // slither-disable-next-line assembly\\n        assembly {\\n            codeSize := extcodesize(token)\\n        }\\n        require(codeSize > 0, \\\"TransferHelper: zero codesize\\\");\\n        _;\\n    }\\n\\n    /// @dev Approve the `operator` to spend all of ERC720 tokens on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeSetApprovalForAll(\\n        address token,\\n        address operator,\\n        bool approved\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('setApprovalForAll(address,bool)'));\\n            abi.encodeWithSelector(0xa22cb465, operator, approved)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Get the ERC20 balance of `account`\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeBalanceOf(\\n        address token,\\n        address account\\n    ) internal returns (uint256 balance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('balanceOf(address)')));\\n            abi.encodeWithSelector(0x70a08231, account)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: balanceOf call failed\\\"\\n        );\\n\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the ERC20 allowance of `spender`\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeAllowance(\\n        address token,\\n        address owner,\\n        address spender\\n    ) internal onlyDeployedToken(token) returns (uint256 allowance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n            abi.encodeWithSelector(0xdd62ed3e, owner, spender)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: allowance call failed\\\"\\n        );\\n\\n        allowance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Approve the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('approve(address,uint256)'));\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Increase approval of the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeIncreaseAllowance(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"increaseAllowance(address,uint256)\\\"));\\n            abi.encodeWithSelector(0x39509351, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transfer(address,uint256)'));\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer an ERC721 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc721SafeTransferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x42842e0e, from, to, tokenId)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `amount` ERC1155 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)'));\\n            abi.encodeWithSelector(0xf242432a, from, to, tokenId, amount, _data)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` Ether from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferETH(address to, uint256 value) internal {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH transfer failed\\\");\\n    }\\n\\n    function _requireSuccess(bool success, bytes memory res) private pure {\\n        require(\\n            success && (res.length == 0 || abi.decode(res, (bool))),\\n            \\\"TransferHelper: token contract call failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x287fdd8c63a2b66ac25947309942af61b4647c88ae2e9cfc38495b0b3d9f0836\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/interfaces/IPZkp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IPZkp {\\n    function minter() external view returns (address);\\n\\n    function setMinter(address _minter) external;\\n\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\",\"keccak256\":\"0xb8054b359c3254632bfad438431edf14acfe802eed10a2a0637412b71601f6f5\",\"license\":\"GPL-3.0\"},\"contracts/common/interfaces/IRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IRootChainManager {\\n    function depositFor(\\n        address receiver,\\n        address token,\\n        bytes calldata depositData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x48769dec855845b3364da57b0985a0db93594a46d5a3ddd1b0b74fa4896123fa\",\"license\":\"GPL-3.0\"},\"contracts/common/mocks/MockFxPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"../TransferHelper.sol\\\";\\nimport \\\"../ImmutableOwnable.sol\\\";\\nimport \\\"../interfaces/IPZkp.sol\\\";\\nimport \\\"../interfaces/IRootChainManager.sol\\\";\\nimport \\\"../../staking/interfaces/IFxStateSender.sol\\\";\\nimport \\\"../../staking/interfaces/IFxMessageProcessor.sol\\\";\\n\\ninterface ISetMinter {\\n    function setMinter(address _minter) external;\\n}\\n\\ncontract MockFxPortal is ImmutableOwnable, IRootChainManager, IFxStateSender {\\n    using TransferHelper for address;\\n\\n    uint256[50] private __gap;\\n\\n    address public immutable PZKP_TOKEN;\\n    address public immutable ZKP_TOKEN;\\n\\n    event DepositForLog(address receiver, address token, bytes depositData);\\n    event SendMessageToChildLog(address _receiver, bytes _data);\\n    event ProcessMessageFromRootLog(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes data\\n    );\\n\\n    constructor(\\n        address _owner,\\n        address _zkpToken,\\n        address _pZkpToken\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            _zkpToken != address(0) && _pZkpToken != address(0),\\n            \\\"init: zero address\\\"\\n        );\\n\\n        ZKP_TOKEN = _zkpToken;\\n        PZKP_TOKEN = _pZkpToken;\\n    }\\n\\n    // simulate message bridging\\n    function sendMessageToChild(\\n        address receiver,\\n        bytes calldata data\\n    ) external {\\n        IFxMessageProcessor(receiver).processMessageFromRoot(\\n            uint256(0), // stateId\\n            msg.sender, // rootMessageSender\\n            data // content\\n        );\\n\\n        emit SendMessageToChildLog(receiver, data);\\n    }\\n\\n    // simulate token bridging\\n    function depositFor(\\n        address receiver,\\n        address token,\\n        bytes calldata depositData\\n    ) external {\\n        require(token == ZKP_TOKEN, \\\"MOCKFX::depositFor: invalid token\\\");\\n\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        require(amount > 0, \\\"MOCKFX::depositFor: zero amount\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        IPZkp(PZKP_TOKEN).deposit(receiver, depositData);\\n\\n        emit DepositForLog(receiver, token, depositData);\\n    }\\n\\n    function tempSetMinter(address newMinter) external {\\n        uint256 bal = TransferHelper.safeBalanceOf(PZKP_TOKEN, address(this));\\n\\n        TransferHelper.safeTransfer(PZKP_TOKEN, newMinter, bal);\\n\\n        ISetMinter(PZKP_TOKEN).setMinter(newMinter);\\n    }\\n}\\n\",\"keccak256\":\"0xb36f1df9c4b92166b2d40d1c01458580140db2c0ee7c1eb170dbb4f8a0205b01\",\"license\":\"GPL-3.0\"},\"contracts/staking/interfaces/IFxMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/***\\n * @dev A receiver on the Polygon (or Mumbai) network of a message sent over the\\n * \\\"Fx-Portal\\\" must implement this interface.\\n * The \\\"Fx-Portal\\\" is the PoS bridge run by the Polygon team.\\n * See https://docs.polygon.technology/docs/develop/l1-l2-communication/fx-portal\\n */\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xef2f4ca5a0d36f4e1d9b13d065c304595398ec685e78f33325dffca63781bb40\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IFxStateSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/***\\n * @dev An interface of the `FxRoot` contract\\n * `FxRoot` is the contract of the \\\"Fx-Portal\\\" (a PoS bridge run by the Polygon team) on the\\n * mainnet/Goerli network. It passes data to s user-defined contract on the Polygon/Mumbai.\\n * See https://docs.polygon.technology/docs/develop/l1-l2-communication/fx-portal\\n */\\ninterface IFxStateSender {\\n    function sendMessageToChild(\\n        address _receiver,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x81f9bbd2a34f52dbfb1d5358fb6ef2341eebdd374720c5d445008465f3cc3040\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610cbb380380610cbb83398101604081905261002f91610126565b826001600160a01b03811661008b5760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b039081166080528216158015906100b157506001600160a01b03811615155b6100f25760405162461bcd60e51b8152602060048201526012602482015271696e69743a207a65726f206164647265737360701b6044820152606401610082565b6001600160a01b0391821660c0521660a05250610169565b80516001600160a01b038116811461012157600080fd5b919050565b60008060006060848603121561013b57600080fd5b6101448461010a565b92506101526020850161010a565b91506101606040850161010a565b90509250925092565b60805160a05160c051610b026101b96000396000818160bf01526102c20152600081816101210152818161014a01528181610176015281816101bb01526103dc01526000607c0152610b026000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b472047711610050578063b4720477146100f6578063e3dec8fb14610109578063f0bb58e51461011c57600080fd5b8063117803e314610077578063830caefa146100ba578063a541b97a146100e1575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6100f46100ef3660046108a7565b610143565b005b6100f4610104366004610912565b61021b565b6100f4610117366004610965565b6102c0565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b600061016f7f00000000000000000000000000000000000000000000000000000000000000003061048b565b905061019c7f000000000000000000000000000000000000000000000000000000000000000083836105db565b604051637e51dad560e11b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063fca3b5aa90602401600060405180830381600087803b1580156101ff57600080fd5b505af1158015610213573d6000803e3d6000fd5b505050505050565b604051639a7c4b7160e01b81526001600160a01b03841690639a7c4b719061024e906000903390879087906004016109ef565b600060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050507fb8a3e8f2c9b8ad291f031f9300e6da16d8ec76737c5c0dbe4b789758e2766f208383836040516102b393929190610a22565b60405180910390a1505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146103505760405162461bcd60e51b815260206004820152602160248201527f4d4f434b46583a3a6465706f736974466f723a20696e76616c696420746f6b656044820152603760f91b60648201526084015b60405180910390fd5b600061035e82840184610a45565b9050600081116103b05760405162461bcd60e51b815260206004820152601f60248201527f4d4f434b46583a3a6465706f736974466f723a207a65726f20616d6f756e74006044820152606401610347565b6103c56001600160a01b0385163330846106e1565b60405163cf2c52cb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cf2c52cb9061041590889087908790600401610a22565b600060405180830381600087803b15801561042f57600080fd5b505af1158015610443573d6000803e3d6000fd5b505050507fb468779add4cf865ada64b40972742070701c7564c6353c49d4541bfffcea55c8585858560405161047c9493929190610a5e565b60405180910390a15050505050565b6000806000846001600160a01b03166370a08231856040516024016104bf91906001600160a01b0391909116815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516104f89190610a8b565b6000604051808303816000865af19150503d8060008114610535576040519150601f19603f3d011682016040523d82523d6000602084013e61053a565b606091505b509150915081801561054c5750805115155b6105be5760405162461bcd60e51b815260206004820152602560248201527f5472616e7366657248656c7065723a2062616c616e63654f662063616c6c206660448201527f61696c65640000000000000000000000000000000000000000000000000000006064820152608401610347565b808060200190518101906105d29190610aba565b95945050505050565b82803b8061062b5760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a650000006044820152606401610347565b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908916916106879190610a8b565b6000604051808303816000865af19150503d80600081146106c4576040519150601f19603f3d011682016040523d82523d6000602084013e6106c9565b606091505b50915091506106d882826107f0565b50505050505050565b83803b806107315760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a650000006044820152606401610347565b604080516001600160a01b0387811660248301528681166044830152606480830187905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908a16916107959190610a8b565b6000604051808303816000865af19150503d80600081146107d2576040519150601f19603f3d011682016040523d82523d6000602084013e6107d7565b606091505b50915091506107e682826107f0565b5050505050505050565b8180156108155750805115806108155750808060200190518101906108159190610ad3565b6108875760405162461bcd60e51b815260206004820152602a60248201527f5472616e7366657248656c7065723a20746f6b656e20636f6e7472616374206360448201527f616c6c206661696c6564000000000000000000000000000000000000000000006064820152608401610347565b5050565b80356001600160a01b03811681146108a257600080fd5b919050565b6000602082840312156108b957600080fd5b6108c28261088b565b9392505050565b60008083601f8401126108db57600080fd5b50813567ffffffffffffffff8111156108f357600080fd5b60208301915083602082850101111561090b57600080fd5b9250929050565b60008060006040848603121561092757600080fd5b6109308461088b565b9250602084013567ffffffffffffffff81111561094c57600080fd5b610958868287016108c9565b9497909650939450505050565b6000806000806060858703121561097b57600080fd5b6109848561088b565b93506109926020860161088b565b9250604085013567ffffffffffffffff8111156109ae57600080fd5b6109ba878288016108c9565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481526001600160a01b0384166020820152606060408201526000610a186060830184866109c6565b9695505050505050565b6001600160a01b03841681526040602082015260006105d26040830184866109c6565b600060208284031215610a5757600080fd5b5035919050565b60006001600160a01b03808716835280861660208401525060606040830152610a186060830184866109c6565b6000825160005b81811015610aac5760208186018101518583015201610a92565b506000920191825250919050565b600060208284031215610acc57600080fd5b5051919050565b600060208284031215610ae557600080fd5b815180151581146108c257600080fdfea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063b472047711610050578063b4720477146100f6578063e3dec8fb14610109578063f0bb58e51461011c57600080fd5b8063117803e314610077578063830caefa146100ba578063a541b97a146100e1575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6100f46100ef3660046108a7565b610143565b005b6100f4610104366004610912565b61021b565b6100f4610117366004610965565b6102c0565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b600061016f7f00000000000000000000000000000000000000000000000000000000000000003061048b565b905061019c7f000000000000000000000000000000000000000000000000000000000000000083836105db565b604051637e51dad560e11b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063fca3b5aa90602401600060405180830381600087803b1580156101ff57600080fd5b505af1158015610213573d6000803e3d6000fd5b505050505050565b604051639a7c4b7160e01b81526001600160a01b03841690639a7c4b719061024e906000903390879087906004016109ef565b600060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050507fb8a3e8f2c9b8ad291f031f9300e6da16d8ec76737c5c0dbe4b789758e2766f208383836040516102b393929190610a22565b60405180910390a1505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146103505760405162461bcd60e51b815260206004820152602160248201527f4d4f434b46583a3a6465706f736974466f723a20696e76616c696420746f6b656044820152603760f91b60648201526084015b60405180910390fd5b600061035e82840184610a45565b9050600081116103b05760405162461bcd60e51b815260206004820152601f60248201527f4d4f434b46583a3a6465706f736974466f723a207a65726f20616d6f756e74006044820152606401610347565b6103c56001600160a01b0385163330846106e1565b60405163cf2c52cb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cf2c52cb9061041590889087908790600401610a22565b600060405180830381600087803b15801561042f57600080fd5b505af1158015610443573d6000803e3d6000fd5b505050507fb468779add4cf865ada64b40972742070701c7564c6353c49d4541bfffcea55c8585858560405161047c9493929190610a5e565b60405180910390a15050505050565b6000806000846001600160a01b03166370a08231856040516024016104bf91906001600160a01b0391909116815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516104f89190610a8b565b6000604051808303816000865af19150503d8060008114610535576040519150601f19603f3d011682016040523d82523d6000602084013e61053a565b606091505b509150915081801561054c5750805115155b6105be5760405162461bcd60e51b815260206004820152602560248201527f5472616e7366657248656c7065723a2062616c616e63654f662063616c6c206660448201527f61696c65640000000000000000000000000000000000000000000000000000006064820152608401610347565b808060200190518101906105d29190610aba565b95945050505050565b82803b8061062b5760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a650000006044820152606401610347565b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908916916106879190610a8b565b6000604051808303816000865af19150503d80600081146106c4576040519150601f19603f3d011682016040523d82523d6000602084013e6106c9565b606091505b50915091506106d882826107f0565b50505050505050565b83803b806107315760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a650000006044820152606401610347565b604080516001600160a01b0387811660248301528681166044830152606480830187905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908a16916107959190610a8b565b6000604051808303816000865af19150503d80600081146107d2576040519150601f19603f3d011682016040523d82523d6000602084013e6107d7565b606091505b50915091506107e682826107f0565b5050505050505050565b8180156108155750805115806108155750808060200190518101906108159190610ad3565b6108875760405162461bcd60e51b815260206004820152602a60248201527f5472616e7366657248656c7065723a20746f6b656e20636f6e7472616374206360448201527f616c6c206661696c6564000000000000000000000000000000000000000000006064820152608401610347565b5050565b80356001600160a01b03811681146108a257600080fd5b919050565b6000602082840312156108b957600080fd5b6108c28261088b565b9392505050565b60008083601f8401126108db57600080fd5b50813567ffffffffffffffff8111156108f357600080fd5b60208301915083602082850101111561090b57600080fd5b9250929050565b60008060006040848603121561092757600080fd5b6109308461088b565b9250602084013567ffffffffffffffff81111561094c57600080fd5b610958868287016108c9565b9497909650939450505050565b6000806000806060858703121561097b57600080fd5b6109848561088b565b93506109926020860161088b565b9250604085013567ffffffffffffffff8111156109ae57600080fd5b6109ba878288016108c9565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481526001600160a01b0384166020820152606060408201526000610a186060830184866109c6565b9695505050505050565b6001600160a01b03841681526040602082015260006105d26040830184866109c6565b600060208284031215610a5757600080fd5b5035919050565b60006001600160a01b03808716835280861660208401525060606040830152610a186060830184866109c6565b6000825160005b81811015610aac5760208186018101518583015201610a92565b506000920191825250919050565b600060208284031215610acc57600080fd5b5051919050565b600060208284031215610ae557600080fd5b815180151581146108c257600080fdfea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 515,
        "contract": "contracts/common/mocks/MockFxPortal.sol:MockFxPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}