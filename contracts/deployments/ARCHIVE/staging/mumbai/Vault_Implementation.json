{
  "address": "0x9A9a3650d534624CA3bb6d554C3A2Fe955BD4813",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "name": "DepositedToEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "name": "FundedFromEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "extAccount",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "extAmount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LockData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "name": "ReturnedFromEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "SaltUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "extAccount",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "extAmount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LockData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "getEscrowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "escrowAddr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "extAccount",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "extAmount",
              "type": "uint96"
            }
          ],
          "internalType": "struct LockData",
          "name": "lData",
          "type": "tuple"
        }
      ],
      "name": "lockAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "extAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "extAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SaltedLockData",
          "name": "slData",
          "type": "tuple"
        }
      ],
      "name": "lockAssetWithSalt",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "sendEthToEscrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "extAccount",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "extAmount",
              "type": "uint96"
            }
          ],
          "internalType": "struct LockData",
          "name": "lData",
          "type": "tuple"
        }
      ],
      "name": "unlockAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "withdrawEthFromEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d2ef0f78b6a88af0809e54b70cccec315c8393394e642736ae780bc522ddec9",
  "receipt": {
    "to": null,
    "from": "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "contractAddress": "0x9A9a3650d534624CA3bb6d554C3A2Fe955BD4813",
    "transactionIndex": 2,
    "gasUsed": "2058545",
    "logsBloom": "0x
    "blockHash": "0x5b7f1047f6aaeccdb5b99aada361d931393b5d7e161b3607a0f8569b239c1292",
    "transactionHash": "0x6d2ef0f78b6a88af0809e54b70cccec315c8393394e642736ae780bc522ddec9",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 44612791,
        "transactionHash": "0x6d2ef0f78b6a88af0809e54b70cccec315c8393394e642736ae780bc522ddec9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fffdd1de35ffc2f66bfd78e064c280fed9e68de",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000af85a8937ff0000000000000000000000000000000000000000000000000006657d3b3d50430a0000000000000000000000000000000000000000000023331761ba913098f0ce000000000000000000000000000000000000000000000000065a84e0b418440a000000000000000000000000000000000000000000002333176cb2ebb9d0efce",
        "logIndex": 17,
        "blockHash": "0x5b7f1047f6aaeccdb5b99aada361d931393b5d7e161b3607a0f8569b239c1292"
      }
    ],
    "blockNumber": 44612791,
    "cumulativeGasUsed": "2352702",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfDfD920F2152565E9D7b589e4e9faeE6699AD4bd"
  ],
  "numDeployments": 3,
  "solcInputHash": "90684727832637485fcc6e52a125c6c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"DepositedToEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"FundedFromEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extAccount\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"extAmount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LockData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"ReturnedFromEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"SaltUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extAccount\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"extAmount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LockData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getEscrowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extAccount\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"extAmount\",\"type\":\"uint96\"}],\"internalType\":\"struct LockData\",\"name\":\"lData\",\"type\":\"tuple\"}],\"name\":\"lockAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"extAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct SaltedLockData\",\"name\":\"slData\",\"type\":\"tuple\"}],\"name\":\"lockAssetWithSalt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"sendEthToEscrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extAccount\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"extAmount\",\"type\":\"uint96\"}],\"internalType\":\"struct LockData\",\"name\":\"lData\",\"type\":\"tuple\"}],\"name\":\"unlockAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"withdrawEthFromEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pantherprotocol Contributors\",\"details\":\"It transfers assets from user to itself (Lock) and vice versa (Unlock). `PantherPool` is assumed to be the only `owner` who is authorized to trigger locking/unlocking assets.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"}},\"notice\":\"Holder of assets (tokens) for `PantherPool` contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xebe3f8a59f0f1c96344a05edb984ef666ee4207e993cca99af3808f1de8771b5\",\"license\":\"MIT\"},\"contracts/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n// Constants\\n\\nuint256 constant IN_PRP_UTXOs = 1;\\nuint256 constant IN_UTXOs = 2 + IN_PRP_UTXOs;\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\nuint256 constant OUT_MAX_UTXOs = OUT_UTXOs;\\n// Number of UTXOs given as a reward for an \\\"advanced\\\" stake\\nuint256 constant OUT_RWRD_UTXOs = 2;\\n\\n// For overflow protection and circuits optimization\\n// (must be less than the FIELD_SIZE)\\nuint256 constant MAX_EXT_AMOUNT = 2 ** 96;\\nuint256 constant MAX_IN_CIRCUIT_AMOUNT = 2 ** 64;\\nuint256 constant MAX_TIMESTAMP = 2 ** 32;\\nuint256 constant MAX_ZASSET_ID = 2 ** 160;\\n\\n// Maximum amount for PRP\\nuint256 constant MAX_PRP_AMOUNT = (2 ** 64) - 1;\\n\\n// Token types\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant ERC20_TOKEN_TYPE = 0x00;\\nuint8 constant ERC721_TOKEN_TYPE = 0x10;\\nuint8 constant ERC1155_TOKEN_TYPE = 0x11;\\nuint8 constant NATIVE_TOKEN_TYPE = 0xFF;\\n\\n// ZAsset statuses\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant zASSET_ENABLED = 0x01;\\nuint8 constant zASSET_DISABLED = 0x02;\\nuint8 constant zASSET_UNKNOWN = 0x00;\\n\\n// UTXO data (opening values - encrypted and public) formats\\nuint8 constant UTXO_DATA_TYPE5 = 0x00; // for zero UTXO (no data to provide)\\nuint8 constant UTXO_DATA_TYPE1 = 0x01; // for UTXO w/ zero tokenId\\nuint8 constant UTXO_DATA_TYPE3 = 0x02; // for UTXO w/ non-zero tokenId\\n\\n// Grant Types\\n// bytes4(keccak256('panther-onboarding-grantor'))\\nbytes4 constant GT_ONBOARDING = 0x93b212ae;\\n// The \\\"prp grant type\\\" for the \\\"release and bridge\\\" ZKPs\\n// bytes4(keccak256(\\\"panther-zkp-release\\\"))\\nbytes4 constant GT_ZKP_RELEASE = 0x53a1eb85;\\n\\n// Number of 32-bit words of the CiphertextMsg for UTXO_DATA_TYPE1\\n// (ephemeral key (packed) - 32 bytes, encrypted `random` - 32 bytes)\\nuint256 constant CIPHERTEXT1_WORDS = 2;\\n\\n// Number of 32-bit words in the (uncompressed) spending PubKey\\nuint256 constant PUBKEY_WORDS = 2;\\n// Number of elements in `pathElements`\\nuint256 constant PATH_ELEMENTS_NUM = 16;\\n\\n// @dev Unusable on public network address, which is useful for simulations\\n//  in forked test env, e.g. for bypassing SNARK proof verification like this:\\n// `require(isValidProof || tx.origin == DEAD_CODE_ADDRESS)`\\naddress constant DEAD_CODE_ADDRESS = address(uint160(0xDEADC0DE));\\n\\n// 100% expressed in 1/100th of 1% (\\\"pips\\\")\\nuint256 constant HUNDRED_PERCENT = 100 * 100;\\n\",\"keccak256\":\"0x90e1f3e6c9547a0d320e69d419fbf68935c811f8c68c294875761edc59a7dd4a\",\"license\":\"BUSL-1.1\"},\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title ImmutableOwnable\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x06d3e09256c510bd1a5c8f6f05cc99fbc0d51919f2a64e022395bc169c349d90\",\"license\":\"MIT\"},\"contracts/common/PullWithSaltHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"../protocol/vault/StealthExec.sol\\\";\\nimport \\\"../protocol/vault/StealthEthPull.sol\\\";\\n\\nstring constant ERR_BALANCE_MISMATCH = \\\"PWS:E01\\\";\\nstring constant ERR_UNEXPECTED_NONZERO_NFT_BALANCE = \\\"PWS:E02\\\";\\nstring constant ERR_UNEXPECTED_OWNER = \\\"PWS:E03\\\";\\n\\n/// @title PullWithSaltHelper library\\n/// @dev Helpers for \\\"pulling\\\" tokens from a \\\"stealth\\\" account linked to a \\\"salt\\\".\\n/// See `StealthExec` and `StealthEthPull` libraries for details on \\\"stealth\\\" accounts.\\n/// The ERC-20, ERC-721, ERC-721 tokens and the native token (ETH) supported.\\nlibrary PullWithSaltHelper {\\n    using StealthExec for bytes32;\\n    using StealthEthPull for bytes32;\\n    using TransferHelper for address;\\n\\n    uint256 private constant ZERO_WEI = 0;\\n\\n    /// @dev Pull from the address `from` to the `address(this)` the ERC-20 token `amount`.\\n    /// The `from` should have approved spending of the `amount` by the \\\"stealth\\\" account\\n    /// deterministically defined by the `salt`.\\n    function pullWithSaltErc20(\\n        bytes32 salt,\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        uint256 oldBalance = token.safeBalanceOf(address(this));\\n\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"transferFrom(address,address,uint256)\\\",\\n            from,\\n            address(this),\\n            amount\\n        );\\n        salt.stealthCall(token, callData, ZERO_WEI);\\n\\n        _matchBalance(amount, oldBalance, token.safeBalanceOf(address(this)));\\n    }\\n\\n    /// @dev Pull from the address `from` to the `address(this)` the ERC-721 token.\\n    /// The `from` should have approved spending of the token by the \\\"stealth\\\" account\\n    /// deterministically defined by the `salt`.\\n    function pullWithSaltErc721(\\n        bytes32 salt,\\n        address token,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            token.safe721OwnerOf(tokenId) != address(this),\\n            ERR_UNEXPECTED_OWNER\\n        );\\n\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"safeTransferFrom(address,address,uint256)\\\",\\n            from,\\n            address(this),\\n            tokenId\\n        );\\n        salt.stealthCall(token, callData, ZERO_WEI);\\n\\n        require(\\n            token.safe721OwnerOf(tokenId) == address(this),\\n            ERR_UNEXPECTED_OWNER\\n        );\\n    }\\n\\n    /// @dev Pull from the address `from` to the `address(this)` the ERC-1155 token `amount`.\\n    /// The `from` should have approved spending of the `amount` by the \\\"stealth\\\" account\\n    /// deterministically defined by the `salt`.\\n    function pullWithSaltErc1155(\\n        bytes32 salt,\\n        address token,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        uint256 oldBalance = token.safe1155BalanceOf(address(this), tokenId);\\n\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\",\\n            from,\\n            address(this),\\n            tokenId,\\n            amount,\\n            new bytes(0)\\n        );\\n        salt.stealthCall(token, callData, ZERO_WEI);\\n\\n        _matchBalance(\\n            amount,\\n            oldBalance,\\n            token.safe1155BalanceOf(address(this), tokenId)\\n        );\\n    }\\n\\n    /// @dev Pull to the `address(this)` the `value` (in Wei) from the \\\"stealth\\\" account\\n    /// deterministically defined by the `salt`. This account must hold exactly `value`\\n    /// Wei on its balance.\\n    function pullEthWithSalt(bytes32 salt, uint256 value) internal {\\n        uint256 oldBalance = address(this).balance;\\n        pullEthBalanceWithSalt(salt);\\n        _matchBalance(value, oldBalance, address(this).balance);\\n    }\\n\\n    /// @dev Pull to the `address(this)` the ETH balance the \\\"stealth\\\" account holds.\\n    /// The \\\"stealth\\\" account is deterministically defined by the `salt`.\\n    function pullEthBalanceWithSalt(bytes32 salt) internal {\\n        salt.stealthPullEthBalance();\\n    }\\n\\n    function _matchBalance(\\n        uint256 increase,\\n        uint256 oldBalance,\\n        uint256 newBalance\\n    ) private pure {\\n        uint256 expValue = newBalance - oldBalance;\\n        require(increase == expValue, ERR_BALANCE_MISMATCH);\\n    }\\n}\\n\",\"keccak256\":\"0xcc1285cb5145354f94eeab9d4c15bc712c84e89c32627ca54de320647ce24726\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title TransferHelper library\\n/// @dev Helper methods for interacting with ERC20, ERC721, ERC1155 tokens and sending ETH\\n/// Based on the Uniswap/solidity-lib/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n    /// @dev Throws if the deployed code of the `token` is empty.\\n    // Low-level CALL to a non-existing contract returns `success` of 1 and empty `data`.\\n    // It may be misinterpreted as a successful call to a deployed token contract.\\n    // So, the code calling a token contract must insure the contract code exists.\\n    modifier onlyDeployedToken(address token) {\\n        require(isDeployedContract(token), \\\"TransferHelper: zero codesize\\\");\\n        _;\\n    }\\n\\n    /// @dev Return true if the given account has deployed code\\n    function isDeployedContract(address account) internal view returns (bool) {\\n        uint256 codeSize;\\n        // slither-disable-next-line assembly\\n        assembly {\\n            codeSize := extcodesize(account)\\n        }\\n        return codeSize > 0;\\n    }\\n\\n    /// @dev Approve the `operator` to spend all of ERC720 tokens on behalf of `owner`.\\n    function safeSetApprovalForAll(\\n        address token,\\n        address operator,\\n        bool approved\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('setApprovalForAll(address,bool)'));\\n            abi.encodeWithSelector(0xa22cb465, operator, approved)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Get the ERC20 balance of `account`\\n    function safeBalanceOf(\\n        address token,\\n        address account\\n    ) internal returns (uint256 balance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('balanceOf(address)')));\\n            abi.encodeWithSelector(0x70a08231, account)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: balanceOf call failed\\\"\\n        );\\n\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the owner of the ERC-721 token\\n    function safe721OwnerOf(\\n        address token,\\n        uint256 tokenId\\n    ) internal returns (address owner) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('ownerOf(uint256)')));\\n            abi.encodeWithSelector(0x6352211e, tokenId)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: ownerOf call failed\\\"\\n        );\\n        owner = abi.decode(data, (address));\\n    }\\n\\n    /// @dev Get the ERC-1155 token balance of `account`\\n    function safe1155BalanceOf(\\n        address token,\\n        address account,\\n        uint256 tokenId\\n    ) internal returns (uint256 balance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('balanceOf(address,uint256)')));\\n            abi.encodeWithSelector(0x00fdd58e, account, tokenId)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: balanceOf call failed\\\"\\n        );\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the ERC20 allowance of `spender`\\n    function safeAllowance(\\n        address token,\\n        address owner,\\n        address spender\\n    ) internal onlyDeployedToken(token) returns (uint256 allowance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n            abi.encodeWithSelector(0xdd62ed3e, owner, spender)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: allowance call failed\\\"\\n        );\\n\\n        allowance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Approve the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('approve(address,uint256)'));\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Increase approval of the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    function safeIncreaseAllowance(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"increaseAllowance(address,uint256)\\\"));\\n            abi.encodeWithSelector(0x39509351, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens from caller to `to`.\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transfer(address,uint256)'));\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens on behalf of `from` to `to`.\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer an ERC721 token with id of `tokenId` on behalf of `from` to `to`.\\n    function erc721SafeTransferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x42842e0e, from, to, tokenId)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `amount` ERC1155 token with id of `tokenId` on behalf of `from` to `to`.\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)'));\\n            abi.encodeWithSelector(0xf242432a, from, to, tokenId, amount, _data)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` Ether from caller to `to`.\\n    function safeTransferETH(address to, uint256 value) internal {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH transfer failed\\\");\\n    }\\n\\n    function _requireSuccess(bool success, bytes memory res) private pure {\\n        require(\\n            success && (res.length == 0 || abi.decode(res, (bool))),\\n            \\\"TransferHelper: token contract call failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x99384813b8e99545ffc4f760081f88a7bfcc6da8177336a6287231fbefa820d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\n// Encoding of field elements is: X[0] * z + X[1]\\nstruct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n}\\n\\n// Verification key for SNARK\\nstruct VerifyingKey {\\n    G1Point alfa1;\\n    G2Point beta2;\\n    G2Point gamma2;\\n    G2Point delta2;\\n    G1Point[] ic;\\n}\\n\\nstruct SnarkProof {\\n    G1Point a;\\n    G2Point b;\\n    G1Point c;\\n}\\n\\nstruct PluginData {\\n    address contractAddress;\\n    bytes callData;\\n}\\n\\nstruct ElGamalCiphertext {\\n    G1Point c1;\\n    G1Point c2;\\n}\\n\\n// For MASP V0 and V1\\nstruct ZAsset {\\n    // reserved (for networkId, tokenIdPolicy. etc..)\\n    uint64 _unused;\\n    // 0x00 by default\\n    uint8 version;\\n    // Refer to Constants.sol\\n    uint8 status;\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // 0x00 - no scaling\\n    uint8 scale;\\n    // token contract address\\n    address token;\\n}\\n\\nstruct LockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint96 extAmount;\\n}\\n\\nstruct SaltedLockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The salt to use w/ CREATE2\\n    bytes32 salt;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint256 extAmount;\\n}\\n\",\"keccak256\":\"0xb086580b8c0d95db80863b6775cc19ba85206cc3197e1577592872e2fee610e7\",\"license\":\"MIT\"},\"contracts/common/UtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.16;\\n\\nlibrary UtilsLib {\\n    function safe24(uint256 n) internal pure returns (uint24) {\\n        require(n < 2 ** 24, \\\"UNSAFE24\\\");\\n        return uint24(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2 ** 32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe40(uint256 n) internal pure returns (uint40) {\\n        require(n < 2 ** 40, \\\"UNSAFE40\\\");\\n        return uint40(n);\\n    }\\n\\n    function safe64(uint256 n) internal pure returns (uint64) {\\n        require(n < 2 ** 64, \\\"UNSAFE64\\\");\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2 ** 96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2 ** 128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2 ** 160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        uint256 t = block.timestamp;\\n        require(t < 2 ** 32, \\\"UNSAFE32TIME\\\");\\n        return uint32(t);\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        uint256 b = block.number;\\n        require(b < 2 ** 32, \\\"UNSAFE32BLOCK\\\");\\n        return uint32(b);\\n    }\\n\\n    function revertZeroAddress(address account) internal pure {\\n        require(account != address(0), \\\"UNEXPECTED_ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1c3aaef98d25b0e694bff9ec693d4d22586b21a197bc004ef1e8c8b12882516b\",\"license\":\"MIT\"},\"contracts/protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity 0.8.16;\\n\\nimport { ERC20_TOKEN_TYPE, ERC721_TOKEN_TYPE, ERC1155_TOKEN_TYPE, NATIVE_TOKEN_TYPE } from \\\"../common/Constants.sol\\\";\\nimport { LockData, SaltedLockData } from \\\"../common/Types.sol\\\";\\nimport \\\"../common/ImmutableOwnable.sol\\\";\\nimport \\\"../common/TransferHelper.sol\\\";\\nimport \\\"../common/PullWithSaltHelper.sol\\\";\\nimport \\\"../common/UtilsLib.sol\\\";\\nimport \\\"./errMsgs/VaultErrMsgs.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./vault/OnERC1155Received.sol\\\";\\nimport \\\"./vault/OnERC721Received.sol\\\";\\nimport \\\"./vault/EthEscrow.sol\\\";\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * @title Vault\\n * @author Pantherprotocol Contributors\\n * @notice Holder of assets (tokens) for `PantherPool` contract\\n * @dev It transfers assets from user to itself (Lock) and vice versa (Unlock).\\n * `PantherPool` is assumed to be the only `owner` who is authorized to trigger\\n * locking/unlocking assets.\\n */\\ncontract Vault is\\n    ImmutableOwnable,\\n    OnERC721Received,\\n    OnERC1155Received,\\n    EthEscrow,\\n    IVault\\n{\\n    using TransferHelper for address;\\n    using TransferHelper for address payable;\\n    using PullWithSaltHelper for bytes32;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _owner) ImmutableOwnable(_owner) {\\n        // Proxy-friendly: no storage initialization\\n    }\\n\\n    // For functions `lockAsset`, `lockAssetWithSalt` and `UnlockAsset`\\n    // the caller (owner) MUST care of reentrancy guard.\\n    // If an adversarial \\\"token\\\" this contract calls re-enters directly,\\n    // `onlyOwner` will revert as `msg.sender` won't be `owner`.\\n\\n    /// @inheritdoc IVault\\n    function lockAssetWithSalt(\\n        SaltedLockData calldata slData\\n    ) external payable override onlyOwner {\\n        LockData memory lData = _desaltLockData(slData);\\n        _checkLockData(lData);\\n\\n        bytes32 salt = slData.salt;\\n        if (lData.tokenType == NATIVE_TOKEN_TYPE) {\\n            if (msg.value == 0) {\\n                // ETH supposed to be in the escrow - pull it from there\\n                pullEthFromEscrow(salt, lData.extAccount, lData.extAmount);\\n            }\\n            // if msg.value == !0, then ETH is in the contract balance already.\\n            // BUT the calling code must ensure it is the depositor who sends non-zero\\n            // msg.value (we can't check it here: inside this function, the owner is\\n            // msg.sender, not the depositor), like this:\\n            // require(msg.value == 0 || msg.sender == lData.extAccount);\\n        } else if (lData.tokenType == ERC20_TOKEN_TYPE) {\\n            salt.pullWithSaltErc20(\\n                lData.token,\\n                lData.extAccount,\\n                lData.extAmount\\n            );\\n        } else if (lData.tokenType == ERC721_TOKEN_TYPE) {\\n            salt.pullWithSaltErc721(\\n                lData.token,\\n                lData.extAccount,\\n                lData.tokenId\\n            );\\n        } else if (lData.tokenType == ERC1155_TOKEN_TYPE) {\\n            salt.pullWithSaltErc1155(\\n                lData.token,\\n                lData.extAccount,\\n                lData.tokenId,\\n                lData.extAmount\\n            );\\n        } else revert(ERR_INVALID_TOKEN_TYPE);\\n\\n        emit Locked(lData);\\n        emit SaltUsed(salt);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function lockAsset(LockData calldata lData) external override onlyOwner {\\n        _checkLockData(lData);\\n\\n        if (lData.tokenType == ERC20_TOKEN_TYPE) {\\n            // Owner, who only may call this code, is trusted to protect\\n            // against \\\"Arbitrary from in transferFrom\\\" vulnerability\\n            // slither-disable-next-line arbitrary-send-erc20,reentrancy-benign,reentrancy-events\\n            lData.token.safeTransferFrom(\\n                lData.extAccount,\\n                address(this),\\n                lData.extAmount\\n            );\\n        } else if (lData.tokenType == ERC721_TOKEN_TYPE) {\\n            // slither-disable-next-line reentrancy-benign,reentrancy-events\\n            lData.token.erc721SafeTransferFrom(\\n                lData.tokenId,\\n                lData.extAccount,\\n                address(this)\\n            );\\n        } else if (lData.tokenType == ERC1155_TOKEN_TYPE) {\\n            // slither-disable-next-line reentrancy-benign,reentrancy-events\\n            lData.token.erc1155SafeTransferFrom(\\n                lData.extAccount,\\n                address(this),\\n                lData.tokenId,\\n                uint256(lData.extAmount),\\n                new bytes(0)\\n            );\\n        } else {\\n            revert(ERR_INVALID_TOKEN_TYPE);\\n        }\\n        emit Locked(lData);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function unlockAsset(LockData calldata lData) external override onlyOwner {\\n        _checkLockData(lData);\\n\\n        if (lData.tokenType == NATIVE_TOKEN_TYPE) {\\n            payable(lData.extAccount).safeTransferETH(lData.extAmount);\\n        } else if (lData.tokenType == ERC20_TOKEN_TYPE) {\\n            // slither-disable-next-line reentrancy-benign,reentrancy-events\\n            lData.token.safeTransfer(lData.extAccount, lData.extAmount);\\n        } else if (lData.tokenType == ERC721_TOKEN_TYPE) {\\n            // slither-disable-next-line reentrancy-benign,reentrancy-events\\n            lData.token.erc721SafeTransferFrom(\\n                lData.tokenId,\\n                address(this),\\n                lData.extAccount\\n            );\\n        } else if (lData.tokenType == ERC1155_TOKEN_TYPE) {\\n            // slither-disable-next-line reentrancy-benign,reentrancy-events\\n            lData.token.erc1155SafeTransferFrom(\\n                address(this),\\n                lData.extAccount,\\n                lData.tokenId,\\n                lData.extAmount,\\n                new bytes(0)\\n            );\\n        } else {\\n            revert(ERR_INVALID_TOKEN_TYPE);\\n        }\\n        emit Unlocked(lData);\\n    }\\n\\n    function _checkLockData(LockData memory lData) private view {\\n        require(lData.extAmount > 0, ERR_ZERO_EXT_AMOUNT);\\n        require(lData.extAccount != address(0), ERR_ZERO_EXT_ACCOUNT_ADDR);\\n\\n        if (lData.tokenType == NATIVE_TOKEN_TYPE) {\\n            require(lData.token == address(0), ERR_NONZERO_LOCK_TOKEN_ADDR);\\n            require(lData.tokenId == 0, ERR_NONZERO_LOCK_TOKEN_ID);\\n            require(\\n                msg.value == 0 || msg.value == lData.extAmount,\\n                ERR_MISMATCHING_MSG_VALUE\\n            );\\n            return;\\n        }\\n\\n        // Here the token can't be ETH (with `address` to be 0)\\n        require(msg.value == 0, ERR_NON_ZERO_MSG_VALUE);\\n        require(lData.token != address(0), ERR_ZERO_LOCK_TOKEN_ADDR);\\n\\n        if (lData.tokenType == ERC20_TOKEN_TYPE) {\\n            require(lData.tokenId == 0, ERR_NONZERO_LOCK_TOKEN_ID);\\n            return;\\n        }\\n\\n        if (lData.tokenType == ERC721_TOKEN_TYPE) {\\n            require(lData.extAmount == 1, ERR_UNEXPECTED_NFT_AMOUNT);\\n            return;\\n        }\\n\\n        // Here, ERC-1155 may be the only remaining supported token type\\n        require(lData.tokenType == ERC1155_TOKEN_TYPE, ERR_INVALID_TOKEN_TYPE);\\n    }\\n\\n    function _desaltLockData(\\n        SaltedLockData memory saltedData\\n    ) private pure returns (LockData memory lData) {\\n        lData = LockData(\\n            saltedData.tokenType,\\n            saltedData.token,\\n            saltedData.tokenId,\\n            saltedData.extAccount,\\n            UtilsLib.safe96(saltedData.extAmount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x437c8665d68aa02f64ef18244c6e461a2aa37579278f2052cdb47e3261d576fd\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/EthEscrowErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nstring constant ERR_ZERO_MSG_VALUE = \\\"VE:E1\\\";\\nstring constant ERR_ZERO_ETH_BALANCE = \\\"VE:E2\\\";\\nstring constant ERR_ZERO_SALT = \\\"VE:E3\\\";\\nstring constant ERR_ZERO_DEPOSITOR_ADDR = \\\"VE:E4\\\";\\n\",\"keccak256\":\"0x4ccfa21751ffd03c36f896490e46d03b63727c23fca58e4c740b534800de015c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/VaultErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nstring constant ERR_INVALID_TOKEN_TYPE = \\\"VA:E1\\\";\\nstring constant ERR_ZERO_LOCK_TOKEN_ADDR = \\\"VA:E2\\\";\\nstring constant ERR_ZERO_EXT_ACCOUNT_ADDR = \\\"VA:E3\\\";\\nstring constant ERR_ZERO_EXT_AMOUNT = \\\"VA:E4\\\";\\n\\nstring constant ERR_NONZERO_LOCK_TOKEN_ADDR = \\\"VA1:E5\\\";\\nstring constant ERR_NONZERO_LOCK_TOKEN_ID = \\\"VA1:E6\\\";\\nstring constant ERR_MISMATCHING_MSG_VALUE = \\\"VA1:E7\\\";\\nstring constant ERR_NON_ZERO_MSG_VALUE = \\\"VA1:E8\\\";\\nstring constant ERR_UNEXPECTED_NFT_AMOUNT = \\\"VA1:E9\\\";\\n// string constant ERR_UNEXPECTED_SENDER = \\\"VA1:EA\\\";\\n\",\"keccak256\":\"0x2d749208fa9eab051f1fd3999d907ec791f549c996fdcd1eddcc593b0b03851b\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IEthEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity 0.8.16;\\n\\n/**\\n * @title EthEscrow interface\\n * @author Pantherprotocol Contributors\\n */\\ninterface IEthEscrow {\\n    event DepositedToEscrow(\\n        address depositor,\\n        uint256 value,\\n        bytes32 salt,\\n        address escrow\\n    );\\n    event FundedFromEscrow(\\n        address depositor,\\n        uint256 value,\\n        bytes32 salt,\\n        address escrow\\n    );\\n    event ReturnedFromEscrow(\\n        address depositor,\\n        uint256 value,\\n        bytes32 salt,\\n        address escrow\\n    );\\n\\n    function sendEthToEscrow(bytes32 salt) external payable;\\n\\n    function withdrawEthFromEscrow(bytes32 salt) external;\\n\\n    function getEscrowAddress(\\n        bytes32 salt,\\n        address depositor\\n    ) external view returns (address escrowAddr);\\n}\\n\",\"keccak256\":\"0xae2c00ff744d01f77e0fb5c36e10a055a22038b428b2c792ada248bb1d4dfa47\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { LockData, SaltedLockData } from \\\"../../common/Types.sol\\\";\\nimport { IEthEscrow } from \\\"./IEthEscrow.sol\\\";\\n\\ninterface IVault is IEthEscrow {\\n    /***\\n      @notice Transfers token from account defined by `salt` to this contract.\\n      Only the owner may call.\\n      @dev \\\"Salt\\\" protects against front-runners (if used properly). Refer to\\n      PullWithSaltHelper for details.\\n      @dev The caller (owner) MUST guard against the re-entrance attack.\\n      If an attacker (via a malicious token contract this contract calls) enters\\n      this function directly, it reverts since `msg.sender` won't be `owner`.\\n     */\\n    function lockAssetWithSalt(SaltedLockData calldata slData) external payable;\\n\\n    /***\\n      @notice Transfers token from the given account to this contract\\n      @dev It does not use \\\"salt\\\" and is prune to front-running attacks.\\n      May only be used if other means/contracts provide the adequate protection.\\n      @dev The comment above on the re-entrance is applicable for this function.\\n     */\\n    function lockAsset(LockData calldata lData) external;\\n\\n    /***\\n      @notice Transfers token from this contract to the given account.\\n      Only the owner may call.\\n      @dev The comment above on the re-entrance is applicable for this function.\\n     */\\n    function unlockAsset(LockData calldata lData) external;\\n\\n    event Locked(LockData data);\\n    event Unlocked(LockData data);\\n    event SaltUsed(bytes32 salt);\\n}\\n\",\"keccak256\":\"0x1b338813d9745d6930e247ad3cd9fd9f4c5af1b690db8ade6e4d8dc45ceb657b\",\"license\":\"MIT\"},\"contracts/protocol/vault/EthEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IEthEscrow.sol\\\";\\nimport \\\"../../common/PullWithSaltHelper.sol\\\";\\nimport \\\"../../common/UtilsLib.sol\\\";\\nimport \\\"../errMsgs/EthEscrowErrMsgs.sol\\\";\\n\\n/**\\n * @title EthEscrow\\n * @author Pantherprotocol Contributors\\n * @notice Handler of ETH users put in escrow for further depositing to MASP\\n * @dev IT heavily uses \\\"stealth pull\\\" from `StealthEthPull`.\\n */\\nabstract contract EthEscrow is IEthEscrow {\\n    using StealthEthPull for bytes32;\\n    using PullWithSaltHelper for bytes32;\\n\\n    function sendEthToEscrow(bytes32 salt) external payable override {\\n        require(msg.value != 0, ERR_ZERO_MSG_VALUE);\\n        bytes32 escrowSalt = _getEscrowSalt(salt, msg.sender);\\n        address escrowAddr = escrowSalt.getStealthAddr();\\n\\n        // Reentrancy impossible as escrowAddr never has a bytecode\\n        payable(escrowAddr).transfer(msg.value);\\n\\n        emit DepositedToEscrow(msg.sender, msg.value, salt, escrowAddr);\\n    }\\n\\n    function withdrawEthFromEscrow(bytes32 salt) external override {\\n        bytes32 escrowSalt = _getEscrowSalt(salt, msg.sender);\\n        address escrowAddr = escrowSalt.getStealthAddr();\\n\\n        uint256 value = escrowAddr.balance;\\n        require(value != 0, ERR_ZERO_ETH_BALANCE);\\n\\n        escrowSalt.pullEthBalanceWithSalt();\\n        // Reentrancy impossible since only 2300 gas allocated\\n        payable(msg.sender).transfer(value);\\n\\n        emit ReturnedFromEscrow(msg.sender, value, salt, escrowAddr);\\n    }\\n\\n    function getEscrowAddress(\\n        bytes32 salt,\\n        address depositor\\n    ) public view override returns (address escrowAddr) {\\n        bytes32 escrowSalt = _getEscrowSalt(salt, depositor);\\n        escrowAddr = _getEscrowAddress(escrowSalt);\\n    }\\n\\n    /// @dev Pull to `address(this)` the ETH `value` from the escrow address defined\\n    /// by `depositor` and `salt`. The escrow is supposed to be a \\\"stealth\\\" account\\n    /// holding exactly `value` ETH on its balance.\\n    function pullEthFromEscrow(\\n        bytes32 salt,\\n        address depositor,\\n        uint256 value\\n    ) internal {\\n        bytes32 escrowSalt = _getEscrowSalt(salt, depositor);\\n        address escrowAddr = escrowSalt.getStealthAddr();\\n        escrowSalt.pullEthWithSalt(value);\\n\\n        emit FundedFromEscrow(depositor, value, salt, escrowAddr);\\n    }\\n\\n    function _getEscrowSalt(\\n        bytes32 salt,\\n        address depositor\\n    ) private pure returns (bytes32) {\\n        require(uint256(salt) != 0, ERR_ZERO_SALT);\\n        require(depositor != address(0), ERR_ZERO_DEPOSITOR_ADDR);\\n        return keccak256(abi.encode(salt, depositor));\\n    }\\n\\n    // Zero input checks omitted as _getEscrowSalt is supposed to have it checked\\n    function _getEscrowAddress(\\n        bytes32 escrowSalt\\n    ) private view returns (address escrowAddr) {\\n        escrowAddr = address(escrowSalt.getStealthAddr());\\n    }\\n}\\n\",\"keccak256\":\"0xae5c63e3b1611f4ffa13ea67f075976544db38753acc07c7894fa2da1f0118fd\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/vault/OnERC1155Received.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n/// @dev Implementation of ERC1155:onERC1155Received interface\\nabstract contract OnERC1155Received {\\n    // It accepts all tokens\\n    function onERC1155Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* id */,\\n        uint256 /* value */,\\n        bytes calldata /* data */\\n    ) external pure virtual returns (bytes4) {\\n        // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n        return 0xf23a6e61;\\n    }\\n}\\n\",\"keccak256\":\"0x03a1a9ad4651a2947d2797038b562ebe29c217684a22cab25a195899e46f4649\",\"license\":\"MIT\"},\"contracts/protocol/vault/OnERC721Received.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n/// @dev Implementation of the ERC721TokenReceiver interface\\nabstract contract OnERC721Received {\\n    // It accepts all tokens\\n    function onERC721Received(\\n        address, // operator\\n        address, // from\\n        uint256, // tokenId\\n        bytes memory // data\\n    ) external virtual returns (bytes4) {\\n        // bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n        return 0x150b7a02;\\n    }\\n}\\n\",\"keccak256\":\"0x66fd309d54b5f49fe249654968fc208b69bc379f44c1309032418dabc8f3cb71\",\"license\":\"MIT\"},\"contracts/protocol/vault/StealthEthPull.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\n/***\\n  @titile StealthEthPull library\\n  @notice Library to \\\"pull\\\" the entire ETH balance from a deterministic \\\"stealth\\\" account.\\n\\n  @dev In order to \\\"pull\\\" ETH from a deterministically defined address, it deploys at that\\n  address the \\\"SelfDestructor\\\" contract. The later self-destructs, causing transfer of ETH\\n  (remained before the deployment) from that address to the \\\"deployer\\\".\\n  The SelfDestructor is not a \\\"normal\\\" contract - it \\\"vanishes\\\" during its deployment. It\\n  has no runtime code at all. Its creation code (init code) does nothing but self-destroys\\n  own context. The context destruction causes the transfer, which is the sole purpose of\\n  the SelfDestructor \\\"deployment\\\".\\n  Thanks to CREATE2 invoking the creation code, the SelfDestructor address may be computed\\n  in advance.\\n  */\\nlibrary StealthEthPull {\\n    uint256 private constant ZERO_ETH = 0;\\n\\n    /// @dev Pull to the msg.sender the ETH balance from the address defined by the salt\\n    /// @param salt The salt (that deterministically derives the \\\"from\\\" address)\\n    /// @return The address the ETH balance is pulled from\\n    function stealthPullEthBalance(bytes32 salt) internal returns (address) {\\n        bytes memory initCode = _getSelfDestructorInitCode();\\n        // Execute `initCode` in the context of the newly created contract\\n        return Create2.deploy(ZERO_ETH, salt, initCode);\\n    }\\n\\n    /// @dev Compute the address, defined by the salt, the ETH balance is pulled from\\n    /// (`this` contract is assumed to call `function stealthPullEthBalance`)\\n    /// @param salt The salt (that deterministically derives the \\\"from\\\" address)\\n    function getStealthAddr(bytes32 salt) internal view returns (address) {\\n        return _getStealthAddr(salt, address(this));\\n    }\\n\\n    /// @dev Compute the address, defined by the salt, the ETH balance is pulled from\\n    /// (`deployer` address is assumed to call `function stealthPullEthBalance`)\\n    /// @param salt The salt (that deterministically derives the \\\"from\\\" address)\\n    function getStealthAddr(\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address) {\\n        return _getStealthAddr(salt, deployer);\\n    }\\n\\n    // It returns the creation code (init code) of the SelfDestructor \\\"contract\\\".\\n    // This creation code is to be invoked via the `CREATE2` opcode (`CREATE` works\\n    // also, but the SelfDestructor address can't be computed upfront then).\\n    // Being invoked, the creation code does nothing but executes the `SELFDESTRUCT`,\\n    // which moves the ETH balance from the SelfDestructor address to the contract that\\n    // invokes the creation code (i.e. calls the `CREATE2`).\\n    function _getSelfDestructorInitCode() private pure returns (bytes memory) {\\n        // =Bytecode   =Opcode\\n        // 33          CALLER\\n        // FF          SELFDESTRUCT\\n        // 00          STOP\\n        return hex\\\"33ff00\\\";\\n    }\\n\\n    function _getStealthAddr(\\n        bytes32 salt,\\n        address deployer\\n    ) private pure returns (address) {\\n        bytes32 initCodeHash = keccak256(_getSelfDestructorInitCode());\\n        return Create2.computeAddress(salt, initCodeHash, deployer);\\n    }\\n}\\n\",\"keccak256\":\"0xa327004f92edc5a01906863450b6aa21387ce797774713f2e1d2deab9eb13eec\",\"license\":\"UNLICENSED\"},\"contracts/protocol/vault/StealthExec.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\n/***\\n  @title StealthExec library\\n  @notice Library to execute the `CALL` from a \\\"stealth\\\" account defined by the \\\"salt\\\".\\n\\n  @dev In order to execute the CALL with the caller address (`msg.sender`) different than\\n  the account invoking this library, the library code \\\"deploys\\\" at that address a special\\n  contract, \\\"StealthCaller\\\", the creation code (\\\"init code\\\") of which executes the CALL.\\n  The StealthCaller is an unusual (\\\"stealth\\\") contract. Its runtime code (\\\"deployed code\\\")\\n  does not exist - the creation code leaves no bytecode at all to deploy on the chain. The\\n  `CALL` execution, rather than the runtime code deployment, is the sole purpose of the\\n  creation code invocation.\\n  The caller (`msg.sender`) inside the `CALL` is the address of the StealthCaller. This\\n  address is computable upfront and linked to the address to be CALLed and the call data -\\n  thanks to the `CREATE2` that invokes the creation code.\\n  Precisely, this address is a function of the following known in advance params:\\n  - the hash of the creation code (which the `CALL` address and data is a part of)\\n  - contract address that calls the `function callWithSalt`\\n  - (user-defined) `salt` provided on the `callWithSalt` function call.\\n  */\\nlibrary StealthExec {\\n    /// @dev Execute the CALL with given params and from the deterministic `msg.sender`\\n    /// @param salt The salt (to deterministically derive the unique `msg.sender`)\\n    /// @param to The contract (address) to CALL to\\n    /// @param data The call data to CALL with\\n    /// @param value Wei amount to CALL with\\n    /// @return Caller address (`msg.sender` inside the CALL)\\n    function stealthCall(\\n        bytes32 salt,\\n        address to,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (address) {\\n        bytes memory initCode = _getStealthCallerInitCode(to, data);\\n        // Execute `initCode` in the context of the newly created contract\\n        return Create2.deploy(value, salt, initCode);\\n    }\\n\\n    /// @dev Compute the deterministic `msg.sender` for the params given\\n    /// @param salt The salt (to deterministically derive a unique `msg.sender`)\\n    /// @param to The contract address to CALL to\\n    /// @param data The call data to CALL with\\n    /// @return Caller address (`msg.sender` inside the CALL)\\n    function getStealthAddr(\\n        bytes32 salt,\\n        address to,\\n        bytes memory data\\n    ) internal view returns (address) {\\n        bytes32 initCodeHash = keccak256(_getStealthCallerInitCode(to, data));\\n        return Create2.computeAddress(salt, initCodeHash);\\n    }\\n\\n    // It returns the creation code of the StealthCaller \\\"contract\\\" with given params.\\n    //  Being invoked via CREATE2 this creation code subsequently executes:\\n    //  - `CALL` to the given address with the given call data from the context of the\\n    //    \\\"contract\\\" being created (as `msg.sender`), passing all `GAS` and `CALLVALUE`\\n    //  - return without generating the runtime code to deploy.\\n    // (`CREATE` would also work, but `msg.sender` is not deterministic then)\\n    function _getStealthCallerInitCode(\\n        address to,\\n        bytes memory data\\n    ) private pure returns (bytes memory) {\\n        /*\\n        =Offs =Bytecode =Opcode          =Stack                                      =Memory\\n\\n        // Copy <addr> from code to stack\\n        [00]  3d        RETURNDATASIZE   0                                           -\\n        [01]  6014      PUSH1 14         14,0                                        -\\n        [03]  602a      PUSH1 addrOffs   addrOffs,14,0                               -\\n        [05]  3d        RETURNDATASIZE   0,addrOffs,14,0                             -\\n                                         // stack_expected:destOffs,ofs,size\\n        [06]  39        CODECOPY         0                                           [0,14]=addr<<60\\n                                         // stack_expected:offset\\n        [07]  51        MLOAD            addr<<60                                    [0,14]=addr<<60\\n        [08]  6060      PUSH 60          60,addr<<60                                 [0,14]=addr<<60\\n        [0a]  1C        SHR              addr                                        [0,14]=addr<<60\\n        // Add 0,0 to stack bottom (optimization)\\n        [0b]  3d        RETURNDATASIZE   0,addr                                      [0,14]=addr<<60\\n        [0c]  3d        RETURNDATASIZE   0,0,addr                                    [0,14]=addr<<60\\n        // Put <data> size to stack and copy <data> to memory\\n        [0d]  603e      PUSH1 dataOffs   dataOffs,0,0,addr                           [0,14]=addr<<60\\n        [0f]  80        DUP1             dataOffs,dataOffs,0,0,addr                  [0,14]=addr<<60\\n        [10]  38        CODESIZE         cs,dataOffs,dataOffs,0,0,addr               [0,14]=addr<<60\\n        [11]  03        SUB              cs-dataOffs,dataOffs,0,0,addr               [0,14]=addr<<60\\n        [12]  80        DUP1             cs-dataOffs,cs-dataOffs,dataOffs,0,0,addr   [0,14]=addr<<60\\n        [13]  91        SWAP2            dataOffs,cs-dataOffs,cs-dataOffs,0,0,addr   [0,14]=addr<<60\\n        [14]  3d        RETURNDATASIZE   0,dataOffs,cs-dataOffs,cs-dataOffs,0,0,addr [0,14]=addr<<60\\n                                         // stack_expected:destOffs,ofs,size\\n        [15]  39        CODECOPY         cs-dataOffs,0,0,addr                        [0,cs-dataOffs]=data\\n        // Call <addr> with <data>\\n        [16]  3d        RETURNDATASIZE  0,cs-dataOffs,0,0,addr                       [0,cs-dataOffs]=data\\n        [17]  34        CALLVALUE       val,0,cs-dataOffs,0,0,addr                   [0,cs-dataOffs]=data\\n        [18]  3d        RETURNDATASIZE  0,val,0,cs-dataOffs,0,0,addr                 [0,cs-dataOffs]=data\\n        [19]  95        SWAP6           addr,val,0,cs-dataOffs,0,0,0                 [0,cs-dataOffs]=data\\n        [1a]  5a        GAS             gas,addr,val,0,cs-dataOffs,0,0,0             [0,cs-dataOffs]=data\\n                                        // stack_expected:gas,addr,val,argOffs,argSize,retOffs,retSize\\n        [1b]  f1        CALL            success,0                                    [0,cs-dataOffs]=data\\n        [1c]  6026      PUSH1 dest      dest,success,0                               [0,cs-dataOffs]=data\\n        [1e]  57        JUMPI           0                                            [0,cs-dataOffs]=data\\n        // Revert on !success\\n        [1f]  3d        RETURNDATASIZE  rds,0                                        [0,cs-dataOffs]=data\\n        [20]  90        SWAP1           0,rds                                        [0,cs-dataOffs]=data\\n        [21]  81        DUP2            rds,0,rds                                    [0,cs-dataOffs]=data\\n        [22]  81        DUP2            0,rds,0,rds                                  [0,cs-dataOffs]=data\\n        [23]  80        DUP1            0,0,rds,0,rds                                [0,cs-dataOffs]=data\\n                                        // stack_expected:destOffset,offset,size\\n        [24]  3e        RETURNDATACOPY  0,rds                                        [0,rds]=ret_data\\n                                        // stack_expected:offset,size\\n        [25]  fd        REVERT          \\u2013                                            [0,rds]=ret_data\\n        // Return empty runtime code on success\\n        [26]  5b        JUMPDEST        0                                            [0,cs-dataOffs]=data\\n        [27]  80        DUP1            0,0                                          [0,cs-dataOffs]=data\\n                                        // stack_expected:offset,size\\n        [28]  f3        RETURN          0                                            [0,cs-dataOffs]=data\\n        [29]  00        STOP            -                                            [0,cs-dataOffs]=data\\n\\n        // Appended 20 bytes of `to` addr and (\\\"packed\\\") `data` bytes\\n        [2a]  <addr>\\n        [3e]  <data>\\n        */\\n        return\\n            abi.encodePacked(\\n                hex\\\"3d6014602a3d395160601C3d3d603e80380380913d393d343d955af16026573d908181803efd5b80f300\\\",\\n                to,\\n                data\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xff30e330d631fa64681de2deefd9d5a9f39977c76ad89dbd544146a3b01554fa\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Pantherprotocol Contributors",
    "details": "It transfers assets from user to itself (Lock) and vice versa (Unlock). `PantherPool` is assumed to be the only `owner` who is authorized to trigger locking/unlocking assets.",
    "kind": "dev",
    "methods": {},
    "title": "Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      }
    },
    "notice": "Holder of assets (tokens) for `PantherPool` contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}