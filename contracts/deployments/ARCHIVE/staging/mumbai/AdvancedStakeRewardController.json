{
  "address": "0x1BfcC8a7d2D5AeBf31e6A993CAbE8c3b5768916E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardMaster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pantherPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zkpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "rewardingStart",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "rewardedPeriod",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstLeafId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zkp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "RewardGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "ZkpRewardLimitUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANTHER_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDING_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDING_START",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_MASTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "action",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "getRewardAdvice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "createSharesFor",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "sharesToCreate",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "redeemSharesFrom",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "sharesToRedeem",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "sendRewardTo",
              "type": "address"
            }
          ],
          "internalType": "struct IRewardAdviser.Advice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "getZkpApyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setZkpRewardsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totals",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "zkpRewards",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "prpRewards",
          "type": "uint96"
        },
        {
          "internalType": "uint24",
          "name": "nftRewards",
          "type": "uint24"
        },
        {
          "internalType": "uint40",
          "name": "scZkpStaked",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkpRewardsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xccfed581c97fb4d640e438f24294612541fc20516741f6f0ea1cf2d076cf9d2d",
  "receipt": {
    "to": null,
    "from": "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "contractAddress": "0x1BfcC8a7d2D5AeBf31e6A993CAbE8c3b5768916E",
    "transactionIndex": 24,
    "gasUsed": "1749376",
    "logsBloom": "0x
    "blockHash": "0x5e8ae74b4cbf33619a49a16a5fb0fb2005c16775e01a38ef295e8671f57476c9",
    "transactionHash": "0xccfed581c97fb4d640e438f24294612541fc20516741f6f0ea1cf2d076cf9d2d",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 26945618,
        "transactionHash": "0xccfed581c97fb4d640e438f24294612541fc20516741f6f0ea1cf2d076cf9d2d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fffdd1de35ffc2f66bfd78e064c280fed9e68de",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007c4cf6cc065f8000000000000000000000000000000000000000000000000071bbf39eeb82f50a000000000000000000000000000000000000000000001c30272b5d267e46eb6a000000000000000000000000000000000000000000000000713fa6a81f7c958a000000000000000000000000000000000000000000001c3027a7aa1d4a4d4aea",
        "logIndex": 48,
        "blockHash": "0x5e8ae74b4cbf33619a49a16a5fb0fb2005c16775e01a38ef295e8671f57476c9"
      }
    ],
    "blockNumber": 26945618,
    "cumulativeGasUsed": "2992438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "0xc56C33E68989287D321b8DEA3d055B4e1605DB5c",
    "0xD7C67c0ddd5d178C0980bD737041db8500D2938d",
    "0x3F73371cFA58F338C479928AC7B4327478Cb859f",
    "0x0000000000000000000000000000000000000000",
    1656432287,
    "7200"
  ],
  "numDeployments": 1,
  "solcInputHash": "72d77807f92fef4a2eb65550d5047151",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pantherPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zkpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"rewardingStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardedPeriod\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstLeafId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zkp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"RewardGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ZkpRewardLimitUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANTHER_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDING_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDING_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MASTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getRewardAdvice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"createSharesFor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"sharesToCreate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"redeemSharesFrom\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"sharesToRedeem\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sendRewardTo\",\"type\":\"address\"}],\"internalType\":\"struct IRewardAdviser.Advice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getZkpApyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setZkpRewardsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totals\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"zkpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"prpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint24\",\"name\":\"nftRewards\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"scZkpStaked\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkpRewardsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is supposed to run on the Polygon. Unless otherwise mentioned, other smart contracts are supposed to run on the Polygon also. As the \\\"Reward Adviser\\\" on the \\\"advanced\\\" stakes, every time a new stake is being created, it receives the `getRewardAdvice` call from the `RewardMaster` contract with the `STAKE` action type and the stake data (the `message`) being the call parameters. On the `getRewardAdvice` call received, this contract: - computes the amount of the $ZKP reward to the staker - calls `grant` on the `PantherPoolV0` with the `FOR_ADVANCED_STAKE_GRANT` as the \\\"grant type\\\",  and the staker as the \\\"grantee\\\", getting the amount of PRPs granted from the response - if the `NFT_TOKEN` is non-zero address, it calls `grantOneToken` on the NFT_TOKEN, and gets the `tokenId` of the minted NFT token - calls `generateDeposits` of the PantherPoolV0, providing amounts/parameters of $ZKP, PRP, and   optional NFT as \\\"deposits\\\", as well as \\\"spending pubKeys\\\" and \\\"secrets\\\" (explained below) - returns the \\\"zero reward advice\\\" (with zero `sharesToCreate`) to the RewardMaster. On the \\\"zero\\\" advice, the RewardMaster skips creating \\\"treasure shares\\\" for the staker. This way rewarding gets orchestrated by this contract rather than the RewardMaster. Being called `generateDeposits`, the PantherPoolV0: - requests the `Vault` to take (`transferFrom`) the $ZKP and NFT tokens from this contract - \\\"burns\\\" the PRP grant - generates \\\"UTXOs\\\" with the \\\"spending pubKeys\\\" and \\\"secrets\\\" provided (see bellow). Creating a new stake (i.e. calling the `stake`), the staker generates and provides the \\\"pubKeys\\\" and \\\"secrets\\\" to the Staking. Both the Staking on the mainnet and the Staking on the Polygon encodes them into the STAKE message and passes to the RewardMaster, which passes the message to this contract with the `getRewardAdvice` call. So this contracts get pubKeys and secrets needed for the `generateDeposits`. For stakes on the Polygon, when all contracts (i.e. Staking, RewardMaster and this contract) run on the same network, the RewardMaster on the Polygon calls this contract directly. For stakes made on the mainnet, where the Staking and the RewardMaster run, but this contract is on the Polygon, the RewardMaster on the mainnet sends the STAKE message to the RewardMaster on the Polygon via the PoS bridge and mediator contracts. The RewardMaster on the Polygon handles a bridged STAKE message (calling the `getRewardAdvice`) as if the message had been sent by the Staking on the Polygon. As a prerequisite: - this contract shall be authorized as: -- \\\"RewardAdviser\\\" with the RewardMaster on Polygon for advanced stakes -- \\\"Curator\\\" of the FOR_ADVANCED_STAKE_GRANT with the PantherPoolV0 -- \\\"Minter\\\" (or \\\"grantor\\\") with the NFT_TOKEN contract - this contract shall hold enough $ZKP balance to reward stakers - the Vault contract shall be approved to transfer $ZKPs and the NFT tokens from this contract - the $ZKP and the NFT tokens shall be registered as zAssets on the PantherPoolV0.\",\"events\":{\"RewardGenerated(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the reward for a stake is generated\"},\"ZkpRewardLimitUpdate(uint256)\":{\"details\":\"Emitted when new $ZKPs are allocated to reward stakers\"}},\"kind\":\"dev\",\"methods\":{\"getRewardAdvice(bytes4,bytes)\":{\"details\":\"To be called by the {RewardMaster} contract on \\\"advanced\\\" `STAKE` and `UNSTAKE` actions. The caller is trusted to never call w/ the STAKE acton: - twice for the same stake - after the rewarded period has ended\"},\"rescueErc20(address,address,uint256)\":{\"details\":\"May be only called by the {OWNER}\"},\"setZkpRewardsLimit()\":{\"details\":\"Anyone may call it\"}},\"stateVariables\":{\"zkpRewardsLimit\":{\"details\":\"Unlike $ZKPs, PRPs and NFTs are unlimited (not allocated in advance)\"}},\"title\":\"AdvancedStakeRewardController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"PANTHER_POOL()\":{\"notice\":\"PantherPoolV0 contract instance\"},\"REWARDING_END()\":{\"notice\":\"(UNIX) Time when staking rewards accruals end\"},\"REWARDING_START()\":{\"notice\":\"(UNIX) Time when staking rewards start to accrue\"},\"REWARD_MASTER()\":{\"notice\":\"RewardMaster contract instance\"},\"START_BLOCK()\":{\"notice\":\"Block when this contract is deployed\"},\"getZkpApyAt(uint256)\":{\"notice\":\"Return the APY for the $ZKP reward at a given time\"},\"rescueErc20(address,address,uint256)\":{\"notice\":\"Withdraws unclaimed rewards or accidentally sent token from this contract\"},\"setZkpRewardsLimit()\":{\"notice\":\"Allocate the $ZKP amount, which this contract holds, for rewards\"},\"totals()\":{\"notice\":\"Total amounts of $ZKP, PRP and NFT rewarded so far\"},\"zkpRewardsLimit()\":{\"notice\":\"Amount of $ZKPs allocated for rewards\"}},\"notice\":\"It generates UTXOs in the MASP as rewards to stakers for the \\\"Advanced Staking\\\"\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdvancedStakeRewardController.sol\":\"AdvancedStakeRewardController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/AdvancedStakeRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"./actions/AdvancedStakingDataDecoder.sol\\\";\\nimport \\\"./actions/Constants.sol\\\";\\nimport \\\"./actions/StakingMsgProcessor.sol\\\";\\nimport { PRP_VIRTUAL_CONTRACT } from \\\"./common/Constants.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/INftGrantor.sol\\\";\\nimport \\\"./interfaces/IPantherPoolV0.sol\\\";\\nimport \\\"./interfaces/IRewardAdviser.sol\\\";\\nimport \\\"./utils/Claimable.sol\\\";\\nimport \\\"./utils/ImmutableOwnable.sol\\\";\\nimport \\\"./utils/NonReentrant.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\n\\n/**\\n * @title AdvancedStakeRewardController\\n * @notice It generates UTXOs in the MASP as rewards to stakers for the \\\"Advanced Staking\\\"\\n * @dev This contract is supposed to run on the Polygon. Unless otherwise mentioned, other smart\\n * contracts are supposed to run on the Polygon also.\\n * As the \\\"Reward Adviser\\\" on the \\\"advanced\\\" stakes, every time a new stake is being created, it\\n * receives the `getRewardAdvice` call from the `RewardMaster` contract with the `STAKE` action\\n * type and the stake data (the `message`) being the call parameters.\\n * On the `getRewardAdvice` call received, this contract:\\n * - computes the amount of the $ZKP reward to the staker\\n * - calls `grant` on the `PantherPoolV0` with the `FOR_ADVANCED_STAKE_GRANT` as the \\\"grant type\\\",\\n *  and the staker as the \\\"grantee\\\", getting the amount of PRPs granted from the response\\n * - if the `NFT_TOKEN` is non-zero address, it calls `grantOneToken` on the NFT_TOKEN, and gets\\n * the `tokenId` of the minted NFT token\\n * - calls `generateDeposits` of the PantherPoolV0, providing amounts/parameters of $ZKP, PRP, and\\n *   optional NFT as \\\"deposits\\\", as well as \\\"spending pubKeys\\\" and \\\"secrets\\\" (explained below)\\n * - returns the \\\"zero reward advice\\\" (with zero `sharesToCreate`) to the RewardMaster.\\n *\\n * On the \\\"zero\\\" advice, the RewardMaster skips creating \\\"treasure shares\\\" for the staker. This way\\n * rewarding gets orchestrated by this contract rather than the RewardMaster.\\n *\\n * Being called `generateDeposits`, the PantherPoolV0:\\n * - requests the `Vault` to take (`transferFrom`) the $ZKP and NFT tokens from this contract\\n * - \\\"burns\\\" the PRP grant\\n * - generates \\\"UTXOs\\\" with the \\\"spending pubKeys\\\" and \\\"secrets\\\" provided (see bellow).\\n *\\n * Creating a new stake (i.e. calling the `stake`), the staker generates and provides the \\\"pubKeys\\\"\\n * and \\\"secrets\\\" to the Staking. Both the Staking on the mainnet and the Staking on the Polygon\\n * encodes them into the STAKE message and passes to the RewardMaster, which passes the message to\\n * this contract with the `getRewardAdvice` call. So this contracts get pubKeys and secrets needed\\n * for the `generateDeposits`.\\n * For stakes on the Polygon, when all contracts (i.e. Staking, RewardMaster and this contract) run\\n * on the same network, the RewardMaster on the Polygon calls this contract directly.\\n * For stakes made on the mainnet, where the Staking and the RewardMaster run, but this contract is\\n * on the Polygon, the RewardMaster on the mainnet sends the STAKE message to the RewardMaster on\\n * the Polygon via the PoS bridge and mediator contracts. The RewardMaster on the Polygon handles a\\n * bridged STAKE message (calling the `getRewardAdvice`) as if the message had been sent by the\\n * Staking on the Polygon.\\n *\\n * As a prerequisite:\\n * - this contract shall be authorized as:\\n * -- \\\"RewardAdviser\\\" with the RewardMaster on Polygon for advanced stakes\\n * -- \\\"Curator\\\" of the FOR_ADVANCED_STAKE_GRANT with the PantherPoolV0\\n * -- \\\"Minter\\\" (or \\\"grantor\\\") with the NFT_TOKEN contract\\n * - this contract shall hold enough $ZKP balance to reward stakers\\n * - the Vault contract shall be approved to transfer $ZKPs and the NFT tokens from this contract\\n * - the $ZKP and the NFT tokens shall be registered as zAssets on the PantherPoolV0.\\n */\\ncontract AdvancedStakeRewardController is\\n    ImmutableOwnable,\\n    NonReentrant,\\n    StakingMsgProcessor,\\n    AdvancedStakingDataDecoder,\\n    Utils,\\n    Claimable,\\n    IERC721Receiver,\\n    IRewardAdviser\\n{\\n    /// @dev Total amount of $ZKPs, PRPd and NFTs (ever) rewarded and staked\\n    struct Totals {\\n        uint96 zkpRewards;\\n        uint96 prpRewards;\\n        uint24 nftRewards;\\n        // Accumulated amount of $ZKP (ever) staked, scaled (divided) by 1e15\\n        uint40 scZkpStaked;\\n    }\\n\\n    // solhint-disable var-name-mixedcase\\n\\n    /// @notice RewardMaster contract instance\\n    address public immutable REWARD_MASTER;\\n    /// @notice PantherPoolV0 contract instance\\n    address public immutable PANTHER_POOL;\\n\\n    // Address of the $ZKP token contract\\n    address private immutable ZKP_TOKEN;\\n    // Address of the NFT token contract\\n    address private immutable NFT_TOKEN;\\n\\n    /// @notice (UNIX) Time when staking rewards start to accrue\\n    uint256 public immutable REWARDING_START;\\n    // Period (seconds since REWARDING_START) when stakes are rewarded\\n    // (this period shall not yet be in the past on the contract deployment)\\n    uint256 private immutable REWARDED_PERIOD;\\n    /// @notice (UNIX) Time when staking rewards accruals end\\n    uint256 public immutable REWARDING_END;\\n\\n    // $ZKP APY at REWARDING_START (the APY declines from this value)\\n    uint256 private constant START_ZKP_APY = 70;\\n    // $ZKP APY at the end of (and after) the REWARDED_PERIOD\\n    // (the APY declines to this value)\\n    uint256 private constant FINAL_ZKP_APY = 40;\\n    // $ZKP APY drop (scaled by 1e9) per second of REWARDED_PERIOD\\n    uint256 private immutable sc_ZKP_APY_PER_SECOND_DROP;\\n\\n    uint256 private constant ZKP_RESCUE_FORBIDDEN_PERIOD = 90 days;\\n\\n    /// @notice Block when this contract is deployed\\n    uint256 public immutable START_BLOCK;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /// @notice Amount of $ZKPs allocated for rewards\\n    /// @dev Unlike $ZKPs, PRPs and NFTs are unlimited (not allocated in advance)\\n    uint256 public zkpRewardsLimit;\\n\\n    /// @notice Total amounts of $ZKP, PRP and NFT rewarded so far\\n    Totals public totals;\\n\\n    uint8 private _reentrancyStatus;\\n\\n    /// @dev Emitted when new $ZKPs are allocated to reward stakers\\n    event ZkpRewardLimitUpdate(uint256 newLimit);\\n\\n    /// @dev Emitted when the reward for a stake is generated\\n    event RewardGenerated(\\n        address indexed staker,\\n        uint256 firstLeafId,\\n        uint256 zkp,\\n        uint256 prp,\\n        uint256 nft\\n    );\\n\\n    // It does not change contract storage (only `immutable` values changed).\\n    constructor(\\n        address _owner,\\n        address rewardMaster,\\n        address pantherPool,\\n        address zkpToken,\\n        address nftToken,\\n        uint32 rewardingStart,\\n        uint32 rewardedPeriod\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            // nftToken may be zero address\\n            rewardMaster != address(0) &&\\n                pantherPool != address(0) &&\\n                zkpToken != address(0),\\n            \\\"ARC:E1\\\"\\n        );\\n\\n        REWARD_MASTER = rewardMaster;\\n        PANTHER_POOL = pantherPool;\\n\\n        ZKP_TOKEN = zkpToken;\\n        NFT_TOKEN = nftToken;\\n\\n        require(\\n            uint256(rewardingStart) + uint256(rewardedPeriod) > timeNow(),\\n            \\\"ARC:E4\\\"\\n        );\\n        REWARDING_START = uint256(rewardingStart);\\n        REWARDED_PERIOD = uint256(rewardedPeriod);\\n        REWARDING_END = uint256(rewardingStart) + uint256(rewardedPeriod);\\n\\n        sc_ZKP_APY_PER_SECOND_DROP =\\n            ((START_ZKP_APY - FINAL_ZKP_APY) * 1e9) /\\n            uint256(rewardedPeriod);\\n\\n        START_BLOCK = block.number;\\n    }\\n\\n    /// @dev To be called by the {RewardMaster} contract on \\\"advanced\\\" `STAKE` and `UNSTAKE` actions.\\n    /// The caller is trusted to never call w/ the STAKE acton:\\n    /// - twice for the same stake\\n    /// - after the rewarded period has ended\\n    function getRewardAdvice(bytes4 action, bytes memory message)\\n        external\\n        override\\n        returns (Advice memory)\\n    {\\n        require(msg.sender == REWARD_MASTER, \\\"ARC: unauthorized\\\");\\n\\n        if (action == ADVANCED_STAKE) {\\n            _generateRewards(message);\\n        } else {\\n            require(action == ADVANCED_UNSTAKE, \\\"ARC: unsupported action\\\");\\n        }\\n\\n        // Return \\\"zero\\\" advice\\n        return\\n            Advice(\\n                address(0), // createSharesFor\\n                0, // sharesToCreate\\n                address(0), // redeemSharesFrom\\n                0, // sharesToRedeem\\n                address(0) // sendRewardTo\\n            );\\n    }\\n\\n    /// @notice Return the APY for the $ZKP reward at a given time\\n    function getZkpApyAt(uint256 time) public view returns (uint256) {\\n        if (time < REWARDING_START) return 0;\\n\\n        // overflow/underflow impossible due to uint32 input and `if` above\\n        unchecked {\\n            uint256 duration = time - REWARDING_START;\\n            if (duration >= REWARDED_PERIOD) return FINAL_ZKP_APY;\\n\\n            return\\n                START_ZKP_APY - (sc_ZKP_APY_PER_SECOND_DROP * duration) / 1e9;\\n        }\\n    }\\n\\n    /// @notice Allocate the $ZKP amount, which this contract holds, for rewards\\n    /// @dev Anyone may call it\\n    function setZkpRewardsLimit() external {\\n        // External calls here are to trusted contracts only - reentrancy guard unneeded\\n\\n        // TODO: replace low-levels using with `library TransferHelper` in `panther-core`\\n        uint256 balance;\\n        {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory data) = ZKP_TOKEN.call(\\n                // bytes4(keccak256(bytes('balanceOf(address)')));\\n                abi.encodeWithSelector(0x70a08231, address(this))\\n            );\\n            require(success && (data.length != 0), \\\"ARC:E5\\\");\\n            balance = abi.decode(data, (uint256));\\n        }\\n\\n        uint256 limit = zkpRewardsLimit;\\n        uint256 rewarded = uint256(totals.zkpRewards);\\n        uint256 remaining = limit - rewarded;\\n\\n        if (balance > remaining) {\\n            // Update the limit and approve the Vault to spend from this contract balance\\n            uint256 newAllocation = balance - remaining;\\n            uint256 newLimit = limit + newAllocation;\\n\\n            address vault = IPantherPoolV0(PANTHER_POOL).VAULT();\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory data) = ZKP_TOKEN.call(\\n                // bytes4(keccak256('approve(address,uint256)'));\\n                abi.encodeWithSelector(0x095ea7b3, vault, newLimit)\\n            );\\n            require(\\n                success && (data.length == 0 || abi.decode(data, (bool))),\\n                \\\"TransferHelper::safeApprove: approve failed\\\"\\n            );\\n\\n            zkpRewardsLimit = limit + newAllocation;\\n            emit ZkpRewardLimitUpdate(zkpRewardsLimit);\\n        }\\n    }\\n\\n    /// @notice Withdraws unclaimed rewards or accidentally sent token from this contract\\n    /// @dev May be only called by the {OWNER}\\n    function rescueErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(_reentrancyStatus != 1, \\\"ARC: can't be re-entered\\\");\\n        _reentrancyStatus = 1;\\n\\n        require(OWNER == msg.sender, \\\"ARC: unauthorized\\\");\\n        require(\\n            (token != ZKP_TOKEN) ||\\n                (block.timestamp >=\\n                    (REWARDING_START + ZKP_RESCUE_FORBIDDEN_PERIOD)),\\n            \\\"ARC: too early withdrawal\\\"\\n        );\\n\\n        _claimErc20(token, to, amount);\\n        _reentrancyStatus = 2;\\n    }\\n\\n    // Implementation of the {IERC721Receiver}. It accepts NFT_TOKEN transfers only.\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external view override returns (bytes4) {\\n        return\\n            msg.sender == NFT_TOKEN\\n                ? this.onERC721Received.selector // accepted\\n                : bytes4(0); // rejected\\n    }\\n\\n    /// Private and internal functions follow\\n    // Some of them declared `internal` rather than `private` to ease testing\\n\\n    function _generateRewards(bytes memory message) internal {\\n        (\\n            address staker,\\n            uint96 stakeAmount, // stake id (irrelevant)\\n            ,\\n            uint32 stakedAt,\\n            uint32 lockedTill, // claimedAt (irrelevant)\\n            ,\\n            bytes memory data\\n        ) = _unpackStakingActionMsg(message);\\n\\n        require(stakeAmount != 0, \\\"ARC: unexpected zero stakeAmount\\\");\\n        require(stakedAt >= REWARDING_START, \\\"ARC: unexpected stakedAt\\\");\\n        require(lockedTill > stakedAt, \\\"ARC: unexpected lockedTill\\\");\\n\\n        uint256 zkpAmount = 0;\\n        uint256 prpAmount = 0;\\n        uint256 nftAmount = 0;\\n        uint256 nftTokenId = 0;\\n        {\\n            Totals memory _totals = totals;\\n\\n            // Compute amount of the $ZKP reward  and check the limit\\n            {\\n                zkpAmount = _computeZkpReward(\\n                    stakeAmount,\\n                    lockedTill,\\n                    stakedAt\\n                );\\n\\n                uint256 newTotalZkpReward = uint256(_totals.zkpRewards) +\\n                    zkpAmount;\\n                require(\\n                    zkpRewardsLimit >= newTotalZkpReward,\\n                    \\\"ARC: too less rewards available\\\"\\n                );\\n                _totals.zkpRewards = safe96(newTotalZkpReward);\\n\\n                uint256 newScZkpStaked = uint256(_totals.scZkpStaked) +\\n                    uint256(stakeAmount) /\\n                    1e15;\\n                // Risk of overflow ignored as the $ZKP max total supply is 1e9 tokens\\n                _totals.scZkpStaked = uint40(newScZkpStaked);\\n            }\\n\\n            // Register PRP grant to this contract (it will be \\\"burnt\\\" for PRP UTXO)\\n            prpAmount = IPantherPoolV0(PANTHER_POOL).grant(\\n                address(this),\\n                FOR_ADVANCED_STAKE_GRANT\\n            );\\n            // `prpAmount` values assumed to be too small to cause overflow\\n            _totals.prpRewards += uint96(prpAmount);\\n\\n            // TODO: enhance PRP granting to save gas\\n            // Grant the total just once (for all stakes), then use a part (for every stake),\\n            // and finally burn unused grant amount, if it remains, in the end\\n\\n            // If the NFT token contract defined, mint the NFT\\n            if (NFT_TOKEN != address(0)) {\\n                // trusted contract called - no reentrancy guard needed\\n                nftTokenId = INftGrantor(NFT_TOKEN).grantOneToken(\\n                    address(this)\\n                );\\n                nftAmount = 1;\\n                _totals.nftRewards += 1;\\n            }\\n\\n            totals = _totals;\\n        }\\n\\n        // Extract public spending keys and \\\"secrets\\\"\\n        (\\n            G1Point[OUT_UTXOs] memory pubSpendingKeys,\\n            uint256[CIPHERTEXT1_WORDS][OUT_UTXOs] memory secrets\\n        ) = unpackStakingData(data);\\n\\n        // Finally, generate deposits (i.e. UTXOs with the MASP)\\n        address[OUT_UTXOs] memory tokens = [\\n            ZKP_TOKEN,\\n            PRP_VIRTUAL_CONTRACT,\\n            NFT_TOKEN\\n        ];\\n        uint256[OUT_UTXOs] memory tokenIds = [0, 0, nftTokenId];\\n        uint256[OUT_UTXOs] memory extAmounts = [\\n            zkpAmount,\\n            prpAmount,\\n            nftAmount\\n        ];\\n        uint32 createdAt = safe32TimeNow();\\n        uint256 leftLeafId = IPantherPoolV0(PANTHER_POOL).generateDeposits(\\n            tokens,\\n            tokenIds,\\n            extAmounts,\\n            pubSpendingKeys,\\n            secrets,\\n            createdAt\\n        );\\n\\n        emit RewardGenerated(\\n            staker,\\n            leftLeafId,\\n            zkpAmount,\\n            prpAmount,\\n            nftAmount\\n        );\\n    }\\n\\n    // Declared `internal` for testing\\n    // The calling code is assumed to ensure `lockedTill > stakedAt`\\n    function _computeZkpReward(\\n        uint256 stakeAmount,\\n        uint256 lockedTill,\\n        uint256 stakedAt\\n    ) internal view returns (uint256 zkpAmount) {\\n        // No rewarding after the REWARDING_END\\n        if (stakedAt > REWARDING_END) return 0;\\n        uint256 rewardedTill = lockedTill > REWARDING_END\\n            ? REWARDING_END\\n            : lockedTill;\\n\\n        uint256 period = rewardedTill - stakedAt;\\n        uint256 apy = getZkpApyAt(stakedAt);\\n        // 3153600000 = 365 * 24 * 3600 seconds * 100 percents\\n        zkpAmount = (stakeAmount * apy * period) / 3153600000;\\n    }\\n}\\n\",\"keccak256\":\"0x918b8264e0fb5428f5dd286b20f2ad79a375f39c0337404ec45284a620af1b97\",\"license\":\"UNLICENSED\"},\"contracts/actions/AdvancedStakingDataDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport { CIPHERTEXT1_WORDS, OUT_UTXOs, PUBKEY_WORDS } from \\\"../common/Constants.sol\\\";\\nimport { G1Point } from \\\"../common/Types.sol\\\";\\n\\n/***\\n * @title AdvancedStakingDataDecoder\\n * @dev It decodes (unpack) `bytes data` of the 'STAKED' message for \\\"advanced staking\\\"\\n */\\nabstract contract AdvancedStakingDataDecoder {\\n    // in bytes\\n    uint256 private constant DATA_LENGTH =\\n        OUT_UTXOs * (PUBKEY_WORDS + CIPHERTEXT1_WORDS) * 32;\\n    // in 32-byte memory slots\\n    uint256 private constant NUM_DATA_SLOTS =\\n        (DATA_LENGTH / 32) + ((DATA_LENGTH % 32) & 1);\\n\\n    // For efficiency we use \\\"packed\\\" (rather than \\\"ABI\\\") encoding.\\n    // It results in shorter data, but requires custom unpack function.\\n    function unpackStakingData(bytes memory data)\\n        internal\\n        pure\\n        returns (\\n            G1Point[OUT_UTXOs] memory pubSpendingKeys,\\n            uint256[CIPHERTEXT1_WORDS][OUT_UTXOs] memory secrets\\n        )\\n    {\\n        require(data.length == DATA_LENGTH, \\\"SMP: unexpected msg length\\\");\\n\\n        // Let's read bytes as uint256 values\\n        uint256[NUM_DATA_SLOTS + 1] memory words;\\n        // the 1st slot is `data.length`, then slots with values follow\\n        for (uint256 i = 1; i <= NUM_DATA_SLOTS; ++i) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let offset := mul(i, 0x20)\\n                let word := mload(add(data, offset))\\n                mstore(add(words, offset), word)\\n            }\\n        }\\n        /*\\n            `bytes memory sample = 0x00010203..1f2021` stored in the memory like this:\\n            slot #0: 0x22 - length (34 bytes)\\n            slot #1: 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\\n            slot #2: 0x2021000000000000000000000000000000000000000000000000000000000000\\n\\n            `bytes memory data` expected to be:\\n            concatenate( // each element is 32-bit long\\n                pubSpendingKeys[0].x, pubSpendingKeys[0].y,\\n                pubSpendingKeys[1].x, pubSpendingKeys[1].y,\\n                pubSpendingKeys[2].x, pubSpendingKeys[2].y,\\n                (secrets[0])[0], (secrets[0])[1], (secrets[0])[2],\\n                (secrets[1])[0], (secrets[1])[1], (secrets[1])[2],\\n                (secrets[2])[0], (secrets[2])[1], (secrets[2])[2],\\n            )\\n        */\\n        for (uint256 i = 0; i < OUT_UTXOs; i++) {\\n            pubSpendingKeys[i].x = words[i * PUBKEY_WORDS + 1];\\n            pubSpendingKeys[i].y = words[i * PUBKEY_WORDS + 2];\\n            for (uint256 k = 0; k < CIPHERTEXT1_WORDS; k++) {\\n                secrets[i][k] = words[\\n                    PUBKEY_WORDS * OUT_UTXOs + CIPHERTEXT1_WORDS * i + k + 1\\n                ];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52c8e18b195c79c46514d013353458e03d8ac6a3aa6fe1d561117db4977a9f51\",\"license\":\"UNLICENSED\"},\"contracts/actions/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// solhint-disable var-name-mixedcase\\n\\n// The \\\"stake type\\\" for the \\\"classic staking\\\"\\n// bytes4(keccak256(\\\"classic\\\"))\\nbytes4 constant CLASSIC_STAKE_TYPE = 0x4ab0941a;\\n\\n// STAKE \\\"action type\\\" for the \\\"classic staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"stake\\\"), CLASSIC_STAKE_TYPE)))\\nbytes4 constant CLASSIC_STAKE = 0x1e4d02b5;\\n\\n// UNSTAKE \\\"action type\\\" for the \\\"classic staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"unstake\\\"), CLASSIC_STAKE_TYPE)))\\nbytes4 constant CLASSIC_UNSTAKE = 0x493bdf45;\\n\\n// The \\\"stake type\\\" for the \\\"advance staking\\\"\\n// bytes4(keccak256(\\\"advanced\\\"))\\nbytes4 constant ADVANCED_STAKE_TYPE = 0x7ec13a06;\\n\\n// STAKE \\\"action type\\\" for the \\\"advanced staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"stake\\\"), ADVANCED_STAKE_TYPE)))\\nbytes4 constant ADVANCED_STAKE = 0xcc995ce8;\\n\\n// UNSTAKE \\\"action type\\\" for the \\\"advanced staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"unstake\\\"), ADVANCED_STAKE_TYPE)))\\nbytes4 constant ADVANCED_UNSTAKE = 0xb8372e55;\\n\\n// PRP grant type for the \\\"advanced\\\" stake\\n// bytes4(keccak256(\\\"forAdvancedStakeGrant\\\"))\\nbytes4 constant FOR_ADVANCED_STAKE_GRANT = 0x31a180d4;\\n\\n// solhint-enable var-name-mixedcase\\n\",\"keccak256\":\"0x7f32586a16909cafe991fa12fa56ca3339962b62b94b3f2ff3ef7076be72fc67\",\"license\":\"MIT\"},\"contracts/actions/StakingMsgProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IStakingTypes.sol\\\";\\n\\nabstract contract StakingMsgProcessor {\\n    bytes4 internal constant STAKE_ACTION = bytes4(keccak256(\\\"stake\\\"));\\n    bytes4 internal constant UNSTAKE_ACTION = bytes4(keccak256(\\\"unstake\\\"));\\n\\n    function _encodeStakeActionType(bytes4 stakeType)\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return bytes4(keccak256(abi.encodePacked(STAKE_ACTION, stakeType)));\\n    }\\n\\n    function _encodeUnstakeActionType(bytes4 stakeType)\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return bytes4(keccak256(abi.encodePacked(UNSTAKE_ACTION, stakeType)));\\n    }\\n\\n    function _packStakingActionMsg(\\n        address staker,\\n        IStakingTypes.Stake memory stake,\\n        bytes calldata data\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                staker, // address\\n                stake.amount, // uint96\\n                stake.id, // uint32\\n                stake.stakedAt, // uint32\\n                stake.lockedTill, // uint32\\n                stake.claimedAt, // uint32\\n                data // bytes\\n            );\\n    }\\n\\n    // For efficiency we use \\\"packed\\\" (rather than \\\"ABI\\\") encoding.\\n    // It results in shorter data, but requires custom unpack function.\\n    function _unpackStakingActionMsg(bytes memory message)\\n        internal\\n        pure\\n        returns (\\n            address staker,\\n            uint96 amount,\\n            uint32 id,\\n            uint32 stakedAt,\\n            uint32 lockedTill,\\n            uint32 claimedAt,\\n            bytes memory data\\n        )\\n    {\\n        // staker, amount, id and 3 timestamps occupy exactly 48 bytes\\n        // (`data` may be of zero length)\\n        require(message.length >= 48, \\\"SMP: unexpected msg length\\\");\\n\\n        uint256 stakerAndAmount;\\n        uint256 idAndStamps;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // the 1st word (32 bytes) contains the `message.length`\\n            // we need the (entire) 2nd word ..\\n            stakerAndAmount := mload(add(message, 0x20))\\n            // .. and (16 bytes of) the 3rd word\\n            idAndStamps := mload(add(message, 0x40))\\n        }\\n\\n        staker = address(uint160(stakerAndAmount >> 96));\\n        amount = uint96(stakerAndAmount & 0xFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        id = uint32((idAndStamps >> 224) & 0xFFFFFFFF);\\n        stakedAt = uint32((idAndStamps >> 192) & 0xFFFFFFFF);\\n        lockedTill = uint32((idAndStamps >> 160) & 0xFFFFFFFF);\\n        claimedAt = uint32((idAndStamps >> 128) & 0xFFFFFFFF);\\n\\n        uint256 dataLength = message.length - 48;\\n        data = new bytes(dataLength);\\n        for (uint256 i = 0; i < dataLength; i++) {\\n            data[i] = message[i + 48];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7262083031b3f49a56ede1d53de2b3a6f113eb868dd8b65845f1d019180c317c\",\"license\":\"UNLICENSED\"},\"contracts/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// TODO: Remove duplicated declaration after merge w/ `panther-core`\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\n\\n// Number of 32-bit words in the (uncompressed) spending PubKey\\nuint256 constant PUBKEY_WORDS = 2;\\n\\n// Number of 32-bit words in the ciphertext in the \\\"type 1\\\" message\\nuint256 constant CIPHERTEXT1_WORDS = 3;\\n\\n// Number of elements in `pathElements`\\nuint256 constant PATH_ELEMENTS_NUM = 16;\\n\\n// Address of the \\\"virtual token contract\\\" for PRPs.\\n// Calculated as `keccak256('Privacy Reward Point') >> 96`.\\naddress constant PRP_VIRTUAL_CONTRACT = 0x1afa2212970b809aE15D51AF00C502D5c8eB3bAf;\\n\",\"keccak256\":\"0xbc2e6287dc51facc4ac308b51750f45698c89b64b42d2de3c4980c2e965ee219\",\"license\":\"MIT\"},\"contracts/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// TODO: Remove duplicated declaration after merge w/ `panther-core`\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\",\"keccak256\":\"0xb51a25ce045e6dec9f4372a15260ed5cff2735cb581f819c2087c80a5e1cd6c1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient,\\n     * the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x816dc3eaab013914d21d8e075c5f83ad6829a9228e415a340a017fed61de10a3\",\"license\":\"MIT\"},\"contracts/interfaces/INftGrantor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface INftGrantor {\\n    function grantOneToken(address to) external returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x3f57fc6c33adedc12afacf81c519aff46c3363daecacda3f918693cab04b21cc\",\"license\":\"MIT\"},\"contracts/interfaces/IPantherPoolV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { G1Point } from \\\"../common/Types.sol\\\";\\nimport { CIPHERTEXT1_WORDS, OUT_UTXOs, PATH_ELEMENTS_NUM } from \\\"../common/Constants.sol\\\";\\n\\n/**\\n * @notice (Truncated) Interface of the PantherPoolV0\\n * @dev Only those functions and events included which the `AdvancedStakeRewardController` contract uses\\n */\\ninterface IPantherPoolV0 {\\n    /**\\n     * @notice Increase the \\\"unused grants\\\" amount (in PRPs) of the given grantee by the amount\\n     * defined by the given \\\"grant type\\\"\\n     * @return prpAmount The amount (in PRPs) of the grant\\n     * @dev An authorized \\\"curator\\\" may call with the enabled (added) \\\"grant type\\\" only\\n     */\\n    function grant(address grantee, bytes4 grantType)\\n        external\\n        returns (uint256 prpAmount);\\n\\n    /**\\n     * @notice Transfer assets from the msg.sender to the VAULT and generate UTXOs in the MASP\\n     * @param tokens Address of the token contract for every UTXO\\n     * @dev For PRP granted the address ot this contract (proxy) is supposed to be used\\n     * @param tokenIds For ERC-721 and ERC-1155 - token ID or subId of the token, 0 for ERC-20\\n     * @param extAmounts Token amounts (external) to be deposited\\n     * @param pubSpendingKeys Public Spending Key for every UTXO\\n     * @param secrets Encrypted opening values for every UTXO\\n     * @param  createdAt Optional, if 0 network time used\\n     * @dev createdAt must be less (or equal) the network time\\n     * @return leftLeafId The `leafId` of the first UTXO (leaf) in the batch\\n     */\\n    function generateDeposits(\\n        address[OUT_UTXOs] calldata tokens,\\n        uint256[OUT_UTXOs] calldata tokenIds,\\n        uint256[OUT_UTXOs] calldata extAmounts,\\n        G1Point[OUT_UTXOs] calldata pubSpendingKeys,\\n        uint256[CIPHERTEXT1_WORDS][OUT_UTXOs] calldata secrets,\\n        uint32 createdAt\\n    ) external returns (uint256 leftLeafId);\\n\\n    function exit(\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint32 creationTime,\\n        uint256 privSpendingKey,\\n        uint256 leafId,\\n        bytes32[PATH_ELEMENTS_NUM] calldata pathElements,\\n        bytes32 merkleRoot,\\n        uint256 cacheIndexHint\\n    ) external;\\n\\n    /**\\n     * @return Address of the Vault\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VAULT() external view returns (address);\\n\\n    /**\\n     * @dev Emitted on a new batch of Commitments\\n     * @param leftLeafId The `leafId` of the first leaf in the batch\\n     * @dev `leafId = leftLeafId + 1` for the 2nd leaf (`leftLeafId + 2` for the 3rd leaf)\\n     * @param commitments Commitments hashes\\n     * @param utxoData opening values (encrypted and public) for UTXOs\\n     */\\n    event NewCommitments(\\n        uint256 indexed leftLeafId,\\n        uint256 creationTime,\\n        bytes32[OUT_UTXOs] commitments,\\n        bytes utxoData\\n    );\\n\\n    /**\\n     * @dev PRP grant issued\\n     * @param grantType \\\"Type\\\" of the PRP grant\\n     * @param grantee User to whom the grant is issued\\n     * @param prpAmount Amount of the grant in PRP\\n     */\\n    event PrpGrantIssued(\\n        bytes4 indexed grantType,\\n        address grantee,\\n        uint256 prpAmount\\n    );\\n\\n    /**\\n     * Nullifier is seen (i.e. UTXO is spent)\\n     */\\n    event Nullifier(bytes32 nullifier);\\n}\\n\",\"keccak256\":\"0x37bf346827223d599c5738ff836c280f1900b8f7e7dfe50c6952b4ca6fa7ff12\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardAdviser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardAdviser {\\n    struct Advice {\\n        // advice on new \\\"shares\\\" (in the reward pool) to create\\n        address createSharesFor;\\n        uint96 sharesToCreate;\\n        // advice on \\\"shares\\\" to redeem\\n        address redeemSharesFrom;\\n        uint96 sharesToRedeem;\\n        // advice on address the reward against redeemed shares to send to\\n        address sendRewardTo;\\n    }\\n\\n    function getRewardAdvice(bytes4 action, bytes memory message)\\n        external\\n        returns (Advice memory);\\n}\\n\",\"keccak256\":\"0x9ecf725af20a11f29d94406fc335d3b20afd60dfb9e398a409966e0568ac1bbb\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\ninterface IStakingTypes {\\n    // Stake type terms\\n    struct Terms {\\n        // if stakes of this kind allowed\\n        bool isEnabled;\\n        // if messages on stakes to be sent to the {RewardMaster}\\n        bool isRewarded;\\n        // limit on the minimum amount staked, no limit if zero\\n        uint32 minAmountScaled;\\n        // limit on the maximum amount staked, no limit if zero\\n        uint32 maxAmountScaled;\\n        // Stakes not accepted before this time, has no effect if zero\\n        uint32 allowedSince;\\n        // Stakes not accepted after this time, has no effect if zero\\n        uint32 allowedTill;\\n        // One (at least) of the following three params must be non-zero\\n        // if non-zero, overrides both `exactLockPeriod` and `minLockPeriod`\\n        uint32 lockedTill;\\n        // ignored if non-zero `lockedTill` defined, overrides `minLockPeriod`\\n        uint32 exactLockPeriod;\\n        // has effect only if both `lockedTill` and `exactLockPeriod` are zero\\n        uint32 minLockPeriod;\\n    }\\n\\n    struct Stake {\\n        // index in the `Stake[]` array of `stakes`\\n        uint32 id;\\n        // defines Terms\\n        bytes4 stakeType;\\n        // time this stake was created at\\n        uint32 stakedAt;\\n        // time this stake can be claimed at\\n        uint32 lockedTill;\\n        // time this stake was claimed at (unclaimed if 0)\\n        uint32 claimedAt;\\n        // amount of tokens on this stake (assumed to be less 1e27)\\n        uint96 amount;\\n        // address stake voting power is delegated to\\n        address delegatee;\\n    }\\n}\\n\",\"keccak256\":\"0xdb6f4a5e54fedb85152a6c80104f98a87713b194e3fd157565c4bd20058864be\",\"license\":\"MIT\"},\"contracts/utils/Claimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Claimable\\n * @notice It withdraws accidentally sent tokens from this contract.\\n */\\ncontract Claimable {\\n    bytes4 private constant SELECTOR_TRANSFER =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    /// @dev Withdraws ERC20 tokens from this contract\\n    /// (take care of reentrancy attack risk mitigation)\\n    function _claimErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(SELECTOR_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"claimErc20: TRANSFER_FAILED\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x702e63e7eef33ed5490abd4a58db7074a1bcf1b055057cbbbdbeaa4112f5c437\",\"license\":\"MIT\"},\"contracts/utils/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xa7fcff1c9e37b9c757c39cf83b9149b440de47f72a1fb77426a75520fedead5c\",\"license\":\"MIT\"},\"contracts/utils/NonReentrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title NonReentrant\\n * @notice It provides reentrancy guard.\\n * The code borrowed from openzeppelin-contracts.\\n * Unlike original, this version requires neither `constructor` no `init` call.\\n */\\nabstract contract NonReentrant {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _reentrancyStatus;\\n\\n    modifier nonReentrant() {\\n        // Being called right after deployment, when _reentrancyStatus is 0 ,\\n        // it does not revert (which is expected behaviour)\\n        require(_reentrancyStatus != _ENTERED, \\\"claimErc20: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _reentrancyStatus = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _reentrancyStatus = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xbf71fedcb5a991cc9142ec5f8260ddfd30da2d17f0fe9171ea276901835a53fa\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nabstract contract Utils {\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x792e9324cc764dbd45210aa817127d67fae28bee7dc9b91e98cd1253617b04e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b50604051620022e5380380620022e583398101604081905262000035916200022f565b866001600160a01b038116620000925760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b60601b6001600160601b0319166080526001600160a01b03861615801590620000c357506001600160a01b03851615155b8015620000d857506001600160a01b03841615155b6200010f5760405162461bcd60e51b81526020600482015260066024820152654152433a453160d01b604482015260640162000089565b6001600160601b0319606087811b821660a05286811b821660c05285811b821660e05284901b1661010052620001424290565b6200015763ffffffff808416908516620002c3565b116200018f5760405162461bcd60e51b8152602060048201526006602482015265105490ce914d60d21b604482015260640162000089565b63ffffffff808316610120819052908216610140819052620001b191620002c3565b6101605263ffffffff8116620001ca6028604662000321565b620001da90633b9aca00620002ff565b620001e69190620002de565b610180525050436101a05250620003519350505050565b80516001600160a01b03811681146200021557600080fd5b919050565b805163ffffffff811681146200021557600080fd5b600080600080600080600060e0888a0312156200024a578283fd5b6200025588620001fd565b96506200026560208901620001fd565b95506200027560408901620001fd565b94506200028560608901620001fd565b93506200029560808901620001fd565b9250620002a560a089016200021a565b9150620002b560c089016200021a565b905092959891949750929550565b60008219821115620002d957620002d96200033b565b500190565b600082620002fa57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156200031c576200031c6200033b565b500290565b6000828210156200033657620003366200033b565b500390565b634e487b7160e01b600052601160045260246000fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c610120516101405161016051610180516101a051611e8c6200045960003960006101a301526000610af801526000818161012d015281816114f201528181611524015261155101526000610ac30152600081816101f1015281816104b901528181610a7001528181610aa00152610ce801526000818161035601528181610faf01528181610ff101526111b30152600081816104760152818161058e015281816107570152611170015260008181610218015281816106c101528181610f09015261121f0152600081816101ca015261094601526000818160e901526103fe0152611e8c6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806374b71e0c1161008c578063dddb87d011610066578063dddb87d0146102b2578063e29dd0e8146102ba578063e9cb0324146102c3578063f3d17c691461033657600080fd5b806374b71e0c146101ec5780638f3e52de14610213578063c038a38e1461023a57600080fd5b8063243feb99116100bd578063243feb991461018957806339b3e8261461019e578063576eadd2146101c557600080fd5b8063117803e3146100e45780631350f06a14610128578063150b7a021461015d575b600080fd5b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161011f565b61017061016b366004611b01565b610349565b6040516001600160e01b0319909116815260200161011f565b61019c610197366004611ac1565b610394565b005b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b600254610276906001600160601b0380821691600160601b810490911690600160c01b810462ffffff1690600160d81b900464ffffffffff1684565b604080516001600160601b03958616815294909316602085015262ffffff9091169183019190915264ffffffffff16606082015260800161011f565b61019c61054a565b61014f60015481565b6102d66102d1366004611b8b565b610910565b60405161011f9190600060a0820190506001600160a01b0380845116835260208401516001600160601b03808216602086015282604087015116604086015280606087015116606086015250508060808501511660808401525092915050565b61014f610344366004611be5565b610a6c565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038257600061038b565b630a85bd0160e11b5b95945050505050565b60035460ff16600114156103ef5760405162461bcd60e51b815260206004820152601860248201527f4152433a2063616e27742062652072652d656e7465726564000000000000000060448201526064015b60405180910390fd5b6003805460ff191660011790557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104745760405162461bcd60e51b815260206004820152601160248201527f4152433a20756e617574686f72697a656400000000000000000000000000000060448201526064016103e6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415806104e157506104dd6276a7007f0000000000000000000000000000000000000000000000000000000000000000611d72565b4210155b61052d5760405162461bcd60e51b815260206004820152601960248201527f4152433a20746f6f206561726c79207769746864726177616c0000000000000060448201526064016103e6565b610538838383610b24565b50506003805460ff1916600217905550565b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b1790529051600091829182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916105c19190611c66565b6000604051808303816000865af19150503d80600081146105fe576040519150601f19603f3d011682016040523d82523d6000602084013e610603565b606091505b50915091508180156106155750805115155b6106615760405162461bcd60e51b815260206004820152600660248201527f4152433a4535000000000000000000000000000000000000000000000000000060448201526064016103e6565b808060200190518101906106759190611bfd565b60015460025491945092506001600160601b0316905060006106978284611ddf565b90508084111561090a5760006106ad8286611ddf565b905060006106bb8286611d72565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663411557d16040518163ffffffff1660e01b815260040160206040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190611aa5565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b384866040516024016107ab9291906001600160a01b03929092168252602082015260400190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516107e49190611c66565b6000604051808303816000865af19150503d8060008114610821576040519150601f19603f3d011682016040523d82523d6000602084013e610826565b606091505b50915091508180156108505750805115806108505750808060200190518101906108509190611b6b565b6108c25760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c656400000000000000000000000000000000000000000060648201526084016103e6565b6108cc8589611d72565b60018190556040519081527fa72045fa6ef5b69550d4eb374b18eb4e41e60daa0e09e01828db6e7e465e067a9060200160405180910390a150505050505b50505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109b35760405162461bcd60e51b815260206004820152601160248201527f4152433a20756e617574686f72697a656400000000000000000000000000000060448201526064016103e6565b6001600160e01b031983166319932b9d60e31b14156109da576109d582610c6f565b610a3a565b6001600160e01b0319831663b8372e5560e01b14610a3a5760405162461bcd60e51b815260206004820152601760248201527f4152433a20756e737570706f7274656420616374696f6e00000000000000000060448201526064016103e6565b506040805160a08101825260008082526020820181905291810182905260608101829052608081019190915292915050565b60007f0000000000000000000000000000000000000000000000000000000000000000821015610a9e57506000919050565b7f000000000000000000000000000000000000000000000000000000000000000082037f00000000000000000000000000000000000000000000000000000000000000008110610af15750602892915050565b633b9aca007f00000000000000000000000000000000000000000000000000000000000000008202046046039392505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691610bb09190611c66565b6000604051808303816000865af19150503d8060008114610bed576040519150601f19603f3d011682016040523d82523d6000602084013e610bf2565b606091505b5091509150818015610c1c575080511580610c1c575080806020019051810190610c1c9190611b6b565b610c685760405162461bcd60e51b815260206004820152601b60248201527f636c61696d45726332303a205452414e534645525f4641494c4544000000000060448201526064016103e6565b5050505050565b6000806000806000610c8086611337565b965050955095505094509450836001600160601b031660001415610ce65760405162461bcd60e51b815260206004820181905260248201527f4152433a20756e6578706563746564207a65726f207374616b65416d6f756e7460448201526064016103e6565b7f00000000000000000000000000000000000000000000000000000000000000008363ffffffff161015610d5c5760405162461bcd60e51b815260206004820152601860248201527f4152433a20756e6578706563746564207374616b65644174000000000000000060448201526064016103e6565b8263ffffffff168263ffffffff1611610db75760405162461bcd60e51b815260206004820152601a60248201527f4152433a20756e6578706563746564206c6f636b656454696c6c00000000000060448201526064016103e6565b604080516080810182526002546001600160601b038082168352600160601b820481166020840152600160c01b820462ffffff1693830193909352600160d81b900464ffffffffff16606082015260009182918291829190610e25908a1663ffffffff898116908b166114ee565b945060008582600001516001600160601b0316610e429190611d72565b9050806001541015610e965760405162461bcd60e51b815260206004820152601f60248201527f4152433a20746f6f206c657373207265776172647320617661696c61626c650060448201526064016103e6565b610e9f816115bf565b6001600160601b039081168352600090610ec39066038d7ea4c68000908d16611dac565b836060015164ffffffffff16610ed99190611d72565b64ffffffffff166060840152505060405163095ddc0360e01b8152306004820152630c68603560e21b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063095ddc0390604401602060405180830381600087803b158015610f5557600080fd5b505af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190611bfd565b93508381602001818151610fa19190611d8a565b6001600160601b03169052507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156110975760405163d17c93bf60e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d17c93bf90602401602060405180830381600087803b15801561103d57600080fd5b505af1158015611051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110759190611bfd565b91506001925060018160400181815161108e9190611d4b565b62ffffff169052505b8051600280546020840151604085015160609095015164ffffffffff16600160d81b027affffffffffffffffffffffffffffffffffffffffffffffffffffff62ffffff909616600160c01b029590951677ffffffffffffffffffffffffffffffffffffffffffffffff6001600160601b03928316600160601b027fffffffffffffffff000000000000000000000000000000000000000000000000909416929095169190911791909117929092169190911791909117905560008061115b87611618565b60408051606080820183526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168352731afa2212970b809ae15d51af00c502d5c8eb3baf6020808501919091527f0000000000000000000000000000000000000000000000000000000000000000909116838501528351808301855260008082528183018190528186018b9052855193840186528d84529183018c90529382018a905294965092945092909190611219611915565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302e9b8eb8686868b8b886040518763ffffffff1660e01b815260040161127396959493929190611c9f565b602060405180830381600087803b15801561128d57600080fd5b505af11580156112a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c59190611bfd565b90508f6001600160a01b03167fddec0656213960e0ac0e474ef653acbb176c235a6490a17417050ff0ae105372828d8d8d60405161131c949392919093845260208401929092526040830152606082015260800190565b60405180910390a25050505050505050505050505050505050565b60008060008060008060606030885110156113945760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e67746800000000000060448201526064016103e6565b602088015160408901518951606083901c99506001600160601b038316985060e082901c975063ffffffff60c083901c8116975060a083901c81169650608083901c1694506000906113e890603090611ddf565b90508067ffffffffffffffff81111561141157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561143b576020820181803683370190505b50935060005b818110156114df578b611455826030611d72565b8151811061147357634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b85828151811061149e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806114d781611df6565b915050611441565b50505050919395979092949650565b60007f0000000000000000000000000000000000000000000000000000000000000000821115611520575060006115b8565b60007f0000000000000000000000000000000000000000000000000000000000000000841161154f5783611571565b7f00000000000000000000000000000000000000000000000000000000000000005b9050600061157f8483611ddf565b9050600061158c85610a6c565b905063bbf81e008261159e838a611dc0565b6115a89190611dc0565b6115b29190611dac565b93505050505b9392505050565b6000600160601b82106116145760405162461bcd60e51b815260206004820152600860248201527f554e53414645393600000000000000000000000000000000000000000000000060448201526064016103e6565b5090565b61162061197b565b6116286119b4565b61163460036002611d72565b61164060016002611d72565b61164a9190611dc0565b611655906020611dc0565b8351146116a45760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e67746800000000000060448201526064016103e6565b6116ac6119e1565b60015b60206116bd60036002611d72565b6116c960016002611d72565b6116d39190611dc0565b6116de906020611dc0565b6116e89190611e11565b60011660206116f960036002611d72565b61170560016002611d72565b61170f9190611dc0565b61171a906020611dc0565b6117249190611dac565b61172e9190611d72565b81116117505760208102858101519083015261174981611df6565b90506116af565b5060005b61176060016002611d72565b81101561190e5781611773600283611dc0565b61177e906001611d72565b6010811061179c57634e487b7160e01b600052603260045260246000fd5b60200201518482600381106117c157634e487b7160e01b600052603260045260246000fd5b602002015152816117d3600283611dc0565b6117de906002611d72565b601081106117fc57634e487b7160e01b600052603260045260246000fd5b602002015184826003811061182157634e487b7160e01b600052603260045260246000fd5b6020020151602001818152505060005b60038110156118fb578281611847846003611dc0565b61185360016002611d72565b61185e906002611dc0565b6118689190611d72565b6118729190611d72565b61187d906001611d72565b6010811061189b57634e487b7160e01b600052603260045260246000fd5b60200201518483600381106118c057634e487b7160e01b600052603260045260246000fd5b602002015182600381106118e457634e487b7160e01b600052603260045260246000fd5b6020020152806118f381611df6565b915050611831565b508061190681611df6565b915050611754565b5050915091565b600061192042611925565b905090565b600064010000000082106116145760405162461bcd60e51b815260206004820152600860248201527f554e53414645333200000000000000000000000000000000000000000000000060448201526064016103e6565b60405180606001604052806003905b604080518082019091526000808252602082015281526020019060019003908161198a5790505090565b60405180606001604052806003905b6119cb611a00565b8152602001906001900390816119c35790505090565b6040518061020001604052806010906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b600082601f830112611a2e578081fd5b813567ffffffffffffffff80821115611a4957611a49611e51565b604051601f8301601f19908116603f01168101908282118183101715611a7157611a71611e51565b81604052838152866020858801011115611a89578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611ab6578081fd5b81516115b881611e67565b600080600060608486031215611ad5578182fd5b8335611ae081611e67565b92506020840135611af081611e67565b929592945050506040919091013590565b60008060008060808587031215611b16578081fd5b8435611b2181611e67565b93506020850135611b3181611e67565b925060408501359150606085013567ffffffffffffffff811115611b53578182fd5b611b5f87828801611a1e565b91505092959194509250565b600060208284031215611b7c578081fd5b815180151581146115b8578182fd5b60008060408385031215611b9d578182fd5b82356001600160e01b031981168114611bb4578283fd5b9150602083013567ffffffffffffffff811115611bcf578182fd5b611bdb85828601611a1e565b9150509250929050565b600060208284031215611bf6578081fd5b5035919050565b600060208284031215611c0e578081fd5b5051919050565b8060005b600381101561090a57611c2d848351611c43565b6060939093019260209190910190600101611c19565b8060005b600381101561090a578151845260209384019390910190600101611c47565b60008251815b81811015611c865760208186018101518583015201611c6c565b81811115611c945782828501525b509190910192915050565b6103208101818860005b6003811015611cd15781516001600160a01b0316835260209283019290910190600101611ca9565b505050611ce16060830188611c43565b611cee60c0830187611c43565b61012082018560005b6003811015611d22578151805184526020908101518185015260409093019290910190600101611cf7565b505050611d336101e0830185611c15565b63ffffffff8316610300830152979650505050505050565b600062ffffff808316818516808303821115611d6957611d69611e25565b01949350505050565b60008219821115611d8557611d85611e25565b500190565b60006001600160601b03808316818516808303821115611d6957611d69611e25565b600082611dbb57611dbb611e3b565b500490565b6000816000190483118215151615611dda57611dda611e25565b500290565b600082821015611df157611df1611e25565b500390565b6000600019821415611e0a57611e0a611e25565b5060010190565b600082611e2057611e20611e3b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611e7c57600080fd5b5056fea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806374b71e0c1161008c578063dddb87d011610066578063dddb87d0146102b2578063e29dd0e8146102ba578063e9cb0324146102c3578063f3d17c691461033657600080fd5b806374b71e0c146101ec5780638f3e52de14610213578063c038a38e1461023a57600080fd5b8063243feb99116100bd578063243feb991461018957806339b3e8261461019e578063576eadd2146101c557600080fd5b8063117803e3146100e45780631350f06a14610128578063150b7a021461015d575b600080fd5b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161011f565b61017061016b366004611b01565b610349565b6040516001600160e01b0319909116815260200161011f565b61019c610197366004611ac1565b610394565b005b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b600254610276906001600160601b0380821691600160601b810490911690600160c01b810462ffffff1690600160d81b900464ffffffffff1684565b604080516001600160601b03958616815294909316602085015262ffffff9091169183019190915264ffffffffff16606082015260800161011f565b61019c61054a565b61014f60015481565b6102d66102d1366004611b8b565b610910565b60405161011f9190600060a0820190506001600160a01b0380845116835260208401516001600160601b03808216602086015282604087015116604086015280606087015116606086015250508060808501511660808401525092915050565b61014f610344366004611be5565b610a6c565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038257600061038b565b630a85bd0160e11b5b95945050505050565b60035460ff16600114156103ef5760405162461bcd60e51b815260206004820152601860248201527f4152433a2063616e27742062652072652d656e7465726564000000000000000060448201526064015b60405180910390fd5b6003805460ff191660011790557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104745760405162461bcd60e51b815260206004820152601160248201527f4152433a20756e617574686f72697a656400000000000000000000000000000060448201526064016103e6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415806104e157506104dd6276a7007f0000000000000000000000000000000000000000000000000000000000000000611d72565b4210155b61052d5760405162461bcd60e51b815260206004820152601960248201527f4152433a20746f6f206561726c79207769746864726177616c0000000000000060448201526064016103e6565b610538838383610b24565b50506003805460ff1916600217905550565b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b1790529051600091829182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916105c19190611c66565b6000604051808303816000865af19150503d80600081146105fe576040519150601f19603f3d011682016040523d82523d6000602084013e610603565b606091505b50915091508180156106155750805115155b6106615760405162461bcd60e51b815260206004820152600660248201527f4152433a4535000000000000000000000000000000000000000000000000000060448201526064016103e6565b808060200190518101906106759190611bfd565b60015460025491945092506001600160601b0316905060006106978284611ddf565b90508084111561090a5760006106ad8286611ddf565b905060006106bb8286611d72565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663411557d16040518163ffffffff1660e01b815260040160206040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190611aa5565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b384866040516024016107ab9291906001600160a01b03929092168252602082015260400190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516107e49190611c66565b6000604051808303816000865af19150503d8060008114610821576040519150601f19603f3d011682016040523d82523d6000602084013e610826565b606091505b50915091508180156108505750805115806108505750808060200190518101906108509190611b6b565b6108c25760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c656400000000000000000000000000000000000000000060648201526084016103e6565b6108cc8589611d72565b60018190556040519081527fa72045fa6ef5b69550d4eb374b18eb4e41e60daa0e09e01828db6e7e465e067a9060200160405180910390a150505050505b50505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109b35760405162461bcd60e51b815260206004820152601160248201527f4152433a20756e617574686f72697a656400000000000000000000000000000060448201526064016103e6565b6001600160e01b031983166319932b9d60e31b14156109da576109d582610c6f565b610a3a565b6001600160e01b0319831663b8372e5560e01b14610a3a5760405162461bcd60e51b815260206004820152601760248201527f4152433a20756e737570706f7274656420616374696f6e00000000000000000060448201526064016103e6565b506040805160a08101825260008082526020820181905291810182905260608101829052608081019190915292915050565b60007f0000000000000000000000000000000000000000000000000000000000000000821015610a9e57506000919050565b7f000000000000000000000000000000000000000000000000000000000000000082037f00000000000000000000000000000000000000000000000000000000000000008110610af15750602892915050565b633b9aca007f00000000000000000000000000000000000000000000000000000000000000008202046046039392505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691610bb09190611c66565b6000604051808303816000865af19150503d8060008114610bed576040519150601f19603f3d011682016040523d82523d6000602084013e610bf2565b606091505b5091509150818015610c1c575080511580610c1c575080806020019051810190610c1c9190611b6b565b610c685760405162461bcd60e51b815260206004820152601b60248201527f636c61696d45726332303a205452414e534645525f4641494c4544000000000060448201526064016103e6565b5050505050565b6000806000806000610c8086611337565b965050955095505094509450836001600160601b031660001415610ce65760405162461bcd60e51b815260206004820181905260248201527f4152433a20756e6578706563746564207a65726f207374616b65416d6f756e7460448201526064016103e6565b7f00000000000000000000000000000000000000000000000000000000000000008363ffffffff161015610d5c5760405162461bcd60e51b815260206004820152601860248201527f4152433a20756e6578706563746564207374616b65644174000000000000000060448201526064016103e6565b8263ffffffff168263ffffffff1611610db75760405162461bcd60e51b815260206004820152601a60248201527f4152433a20756e6578706563746564206c6f636b656454696c6c00000000000060448201526064016103e6565b604080516080810182526002546001600160601b038082168352600160601b820481166020840152600160c01b820462ffffff1693830193909352600160d81b900464ffffffffff16606082015260009182918291829190610e25908a1663ffffffff898116908b166114ee565b945060008582600001516001600160601b0316610e429190611d72565b9050806001541015610e965760405162461bcd60e51b815260206004820152601f60248201527f4152433a20746f6f206c657373207265776172647320617661696c61626c650060448201526064016103e6565b610e9f816115bf565b6001600160601b039081168352600090610ec39066038d7ea4c68000908d16611dac565b836060015164ffffffffff16610ed99190611d72565b64ffffffffff166060840152505060405163095ddc0360e01b8152306004820152630c68603560e21b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063095ddc0390604401602060405180830381600087803b158015610f5557600080fd5b505af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190611bfd565b93508381602001818151610fa19190611d8a565b6001600160601b03169052507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156110975760405163d17c93bf60e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d17c93bf90602401602060405180830381600087803b15801561103d57600080fd5b505af1158015611051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110759190611bfd565b91506001925060018160400181815161108e9190611d4b565b62ffffff169052505b8051600280546020840151604085015160609095015164ffffffffff16600160d81b027affffffffffffffffffffffffffffffffffffffffffffffffffffff62ffffff909616600160c01b029590951677ffffffffffffffffffffffffffffffffffffffffffffffff6001600160601b03928316600160601b027fffffffffffffffff000000000000000000000000000000000000000000000000909416929095169190911791909117929092169190911791909117905560008061115b87611618565b60408051606080820183526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168352731afa2212970b809ae15d51af00c502d5c8eb3baf6020808501919091527f0000000000000000000000000000000000000000000000000000000000000000909116838501528351808301855260008082528183018190528186018b9052855193840186528d84529183018c90529382018a905294965092945092909190611219611915565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302e9b8eb8686868b8b886040518763ffffffff1660e01b815260040161127396959493929190611c9f565b602060405180830381600087803b15801561128d57600080fd5b505af11580156112a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c59190611bfd565b90508f6001600160a01b03167fddec0656213960e0ac0e474ef653acbb176c235a6490a17417050ff0ae105372828d8d8d60405161131c949392919093845260208401929092526040830152606082015260800190565b60405180910390a25050505050505050505050505050505050565b60008060008060008060606030885110156113945760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e67746800000000000060448201526064016103e6565b602088015160408901518951606083901c99506001600160601b038316985060e082901c975063ffffffff60c083901c8116975060a083901c81169650608083901c1694506000906113e890603090611ddf565b90508067ffffffffffffffff81111561141157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561143b576020820181803683370190505b50935060005b818110156114df578b611455826030611d72565b8151811061147357634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b85828151811061149e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806114d781611df6565b915050611441565b50505050919395979092949650565b60007f0000000000000000000000000000000000000000000000000000000000000000821115611520575060006115b8565b60007f0000000000000000000000000000000000000000000000000000000000000000841161154f5783611571565b7f00000000000000000000000000000000000000000000000000000000000000005b9050600061157f8483611ddf565b9050600061158c85610a6c565b905063bbf81e008261159e838a611dc0565b6115a89190611dc0565b6115b29190611dac565b93505050505b9392505050565b6000600160601b82106116145760405162461bcd60e51b815260206004820152600860248201527f554e53414645393600000000000000000000000000000000000000000000000060448201526064016103e6565b5090565b61162061197b565b6116286119b4565b61163460036002611d72565b61164060016002611d72565b61164a9190611dc0565b611655906020611dc0565b8351146116a45760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e67746800000000000060448201526064016103e6565b6116ac6119e1565b60015b60206116bd60036002611d72565b6116c960016002611d72565b6116d39190611dc0565b6116de906020611dc0565b6116e89190611e11565b60011660206116f960036002611d72565b61170560016002611d72565b61170f9190611dc0565b61171a906020611dc0565b6117249190611dac565b61172e9190611d72565b81116117505760208102858101519083015261174981611df6565b90506116af565b5060005b61176060016002611d72565b81101561190e5781611773600283611dc0565b61177e906001611d72565b6010811061179c57634e487b7160e01b600052603260045260246000fd5b60200201518482600381106117c157634e487b7160e01b600052603260045260246000fd5b602002015152816117d3600283611dc0565b6117de906002611d72565b601081106117fc57634e487b7160e01b600052603260045260246000fd5b602002015184826003811061182157634e487b7160e01b600052603260045260246000fd5b6020020151602001818152505060005b60038110156118fb578281611847846003611dc0565b61185360016002611d72565b61185e906002611dc0565b6118689190611d72565b6118729190611d72565b61187d906001611d72565b6010811061189b57634e487b7160e01b600052603260045260246000fd5b60200201518483600381106118c057634e487b7160e01b600052603260045260246000fd5b602002015182600381106118e457634e487b7160e01b600052603260045260246000fd5b6020020152806118f381611df6565b915050611831565b508061190681611df6565b915050611754565b5050915091565b600061192042611925565b905090565b600064010000000082106116145760405162461bcd60e51b815260206004820152600860248201527f554e53414645333200000000000000000000000000000000000000000000000060448201526064016103e6565b60405180606001604052806003905b604080518082019091526000808252602082015281526020019060019003908161198a5790505090565b60405180606001604052806003905b6119cb611a00565b8152602001906001900390816119c35790505090565b6040518061020001604052806010906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b600082601f830112611a2e578081fd5b813567ffffffffffffffff80821115611a4957611a49611e51565b604051601f8301601f19908116603f01168101908282118183101715611a7157611a71611e51565b81604052838152866020858801011115611a89578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611ab6578081fd5b81516115b881611e67565b600080600060608486031215611ad5578182fd5b8335611ae081611e67565b92506020840135611af081611e67565b929592945050506040919091013590565b60008060008060808587031215611b16578081fd5b8435611b2181611e67565b93506020850135611b3181611e67565b925060408501359150606085013567ffffffffffffffff811115611b53578182fd5b611b5f87828801611a1e565b91505092959194509250565b600060208284031215611b7c578081fd5b815180151581146115b8578182fd5b60008060408385031215611b9d578182fd5b82356001600160e01b031981168114611bb4578283fd5b9150602083013567ffffffffffffffff811115611bcf578182fd5b611bdb85828601611a1e565b9150509250929050565b600060208284031215611bf6578081fd5b5035919050565b600060208284031215611c0e578081fd5b5051919050565b8060005b600381101561090a57611c2d848351611c43565b6060939093019260209190910190600101611c19565b8060005b600381101561090a578151845260209384019390910190600101611c47565b60008251815b81811015611c865760208186018101518583015201611c6c565b81811115611c945782828501525b509190910192915050565b6103208101818860005b6003811015611cd15781516001600160a01b0316835260209283019290910190600101611ca9565b505050611ce16060830188611c43565b611cee60c0830187611c43565b61012082018560005b6003811015611d22578151805184526020908101518185015260409093019290910190600101611cf7565b505050611d336101e0830185611c15565b63ffffffff8316610300830152979650505050505050565b600062ffffff808316818516808303821115611d6957611d69611e25565b01949350505050565b60008219821115611d8557611d85611e25565b500190565b60006001600160601b03808316818516808303821115611d6957611d69611e25565b600082611dbb57611dbb611e3b565b500490565b6000816000190483118215151615611dda57611dda611e25565b500290565b600082821015611df157611df1611e25565b500390565b6000600019821415611e0a57611e0a611e25565b5060010190565b600082611e2057611e20611e3b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611e7c57600080fd5b5056fea164736f6c6343000804000a",
  "devdoc": {
    "details": "This contract is supposed to run on the Polygon. Unless otherwise mentioned, other smart contracts are supposed to run on the Polygon also. As the \"Reward Adviser\" on the \"advanced\" stakes, every time a new stake is being created, it receives the `getRewardAdvice` call from the `RewardMaster` contract with the `STAKE` action type and the stake data (the `message`) being the call parameters. On the `getRewardAdvice` call received, this contract: - computes the amount of the $ZKP reward to the staker - calls `grant` on the `PantherPoolV0` with the `FOR_ADVANCED_STAKE_GRANT` as the \"grant type\",  and the staker as the \"grantee\", getting the amount of PRPs granted from the response - if the `NFT_TOKEN` is non-zero address, it calls `grantOneToken` on the NFT_TOKEN, and gets the `tokenId` of the minted NFT token - calls `generateDeposits` of the PantherPoolV0, providing amounts/parameters of $ZKP, PRP, and   optional NFT as \"deposits\", as well as \"spending pubKeys\" and \"secrets\" (explained below) - returns the \"zero reward advice\" (with zero `sharesToCreate`) to the RewardMaster. On the \"zero\" advice, the RewardMaster skips creating \"treasure shares\" for the staker. This way rewarding gets orchestrated by this contract rather than the RewardMaster. Being called `generateDeposits`, the PantherPoolV0: - requests the `Vault` to take (`transferFrom`) the $ZKP and NFT tokens from this contract - \"burns\" the PRP grant - generates \"UTXOs\" with the \"spending pubKeys\" and \"secrets\" provided (see bellow). Creating a new stake (i.e. calling the `stake`), the staker generates and provides the \"pubKeys\" and \"secrets\" to the Staking. Both the Staking on the mainnet and the Staking on the Polygon encodes them into the STAKE message and passes to the RewardMaster, which passes the message to this contract with the `getRewardAdvice` call. So this contracts get pubKeys and secrets needed for the `generateDeposits`. For stakes on the Polygon, when all contracts (i.e. Staking, RewardMaster and this contract) run on the same network, the RewardMaster on the Polygon calls this contract directly. For stakes made on the mainnet, where the Staking and the RewardMaster run, but this contract is on the Polygon, the RewardMaster on the mainnet sends the STAKE message to the RewardMaster on the Polygon via the PoS bridge and mediator contracts. The RewardMaster on the Polygon handles a bridged STAKE message (calling the `getRewardAdvice`) as if the message had been sent by the Staking on the Polygon. As a prerequisite: - this contract shall be authorized as: -- \"RewardAdviser\" with the RewardMaster on Polygon for advanced stakes -- \"Curator\" of the FOR_ADVANCED_STAKE_GRANT with the PantherPoolV0 -- \"Minter\" (or \"grantor\") with the NFT_TOKEN contract - this contract shall hold enough $ZKP balance to reward stakers - the Vault contract shall be approved to transfer $ZKPs and the NFT tokens from this contract - the $ZKP and the NFT tokens shall be registered as zAssets on the PantherPoolV0.",
    "events": {
      "RewardGenerated(address,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the reward for a stake is generated"
      },
      "ZkpRewardLimitUpdate(uint256)": {
        "details": "Emitted when new $ZKPs are allocated to reward stakers"
      }
    },
    "kind": "dev",
    "methods": {
      "getRewardAdvice(bytes4,bytes)": {
        "details": "To be called by the {RewardMaster} contract on \"advanced\" `STAKE` and `UNSTAKE` actions. The caller is trusted to never call w/ the STAKE acton: - twice for the same stake - after the rewarded period has ended"
      },
      "rescueErc20(address,address,uint256)": {
        "details": "May be only called by the {OWNER}"
      },
      "setZkpRewardsLimit()": {
        "details": "Anyone may call it"
      }
    },
    "stateVariables": {
      "zkpRewardsLimit": {
        "details": "Unlike $ZKPs, PRPs and NFTs are unlimited (not allocated in advance)"
      }
    },
    "title": "AdvancedStakeRewardController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "PANTHER_POOL()": {
        "notice": "PantherPoolV0 contract instance"
      },
      "REWARDING_END()": {
        "notice": "(UNIX) Time when staking rewards accruals end"
      },
      "REWARDING_START()": {
        "notice": "(UNIX) Time when staking rewards start to accrue"
      },
      "REWARD_MASTER()": {
        "notice": "RewardMaster contract instance"
      },
      "START_BLOCK()": {
        "notice": "Block when this contract is deployed"
      },
      "getZkpApyAt(uint256)": {
        "notice": "Return the APY for the $ZKP reward at a given time"
      },
      "rescueErc20(address,address,uint256)": {
        "notice": "Withdraws unclaimed rewards or accidentally sent token from this contract"
      },
      "setZkpRewardsLimit()": {
        "notice": "Allocate the $ZKP amount, which this contract holds, for rewards"
      },
      "totals()": {
        "notice": "Total amounts of $ZKP, PRP and NFT rewarded so far"
      },
      "zkpRewardsLimit()": {
        "notice": "Amount of $ZKPs allocated for rewards"
      }
    },
    "notice": "It generates UTXOs in the MASP as rewards to stakers for the \"Advanced Staking\"",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8624,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "_reentrancyStatus",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 339,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "zkpRewardsLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 343,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "totals",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Totals)304_storage"
      },
      {
        "astId": 345,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "_reentrancyStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_struct(Totals)304_storage": {
        "encoding": "inplace",
        "label": "struct AdvancedStakeRewardController.Totals",
        "members": [
          {
            "astId": 297,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "zkpRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 299,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "prpRewards",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 301,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "nftRewards",
            "offset": 24,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 303,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "scZkpStaked",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}