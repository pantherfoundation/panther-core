{
  "address": "0xc36599D03803b4587eE6b7344B193223614377aC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardMaster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pantherPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prpGrantor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zkpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstLeafId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zkp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "RewardGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "zkpRewards",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "prpRewards",
              "type": "uint96"
            },
            {
              "internalType": "uint24",
              "name": "nftRewards",
              "type": "uint24"
            }
          ],
          "indexed": false,
          "internalType": "struct AdvancedStakeRewardController.Limits",
          "name": "newLimits",
          "type": "tuple"
        }
      ],
      "name": "RewardLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "startZkpApy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "endZkpApy",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "prpPerStake",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct AdvancedStakeRewardController.RewardParams",
          "name": "newRewardParams",
          "type": "tuple"
        }
      ],
      "name": "RewardParamsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANTHER_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_MASTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "action",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "getRewardAdvice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "createSharesFor",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "sharesToCreate",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "redeemSharesFrom",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "sharesToRedeem",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "sendRewardTo",
              "type": "address"
            }
          ],
          "internalType": "struct IRewardAdviser.Advice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "getZkpApyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limits",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "zkpRewards",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "prpRewards",
          "type": "uint96"
        },
        {
          "internalType": "uint24",
          "name": "nftRewards",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardParams",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "startZkpApy",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endZkpApy",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "prpPerStake",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_desiredNftRewardsLimit",
          "type": "uint256"
        }
      ],
      "name": "setNftRewardLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totals",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "zkpRewards",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "prpRewards",
          "type": "uint96"
        },
        {
          "internalType": "uint24",
          "name": "nftRewards",
          "type": "uint24"
        },
        {
          "internalType": "uint40",
          "name": "scZkpStaked",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "startZkpApy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "endZkpApy",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "prpPerStake",
              "type": "uint32"
            }
          ],
          "internalType": "struct AdvancedStakeRewardController.RewardParams",
          "name": "_newParams",
          "type": "tuple"
        }
      ],
      "name": "updateRewardParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateZkpAndPrpRewardsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8af2bce89b62612d4b3c59612922d0dd28906701d0b491ff82f57ddc3afdc75b",
  "receipt": {
    "to": null,
    "from": "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "contractAddress": "0x3911B8D31cc16A7454265a33cB34384C1A725e36",
    "transactionIndex": 5,
    "gasUsed": "2314031",
    "logsBloom": "0x
    "blockHash": "0xc65f25cf4743b154d6a299addc64b91f8d557775574455c743fd95657885fc9e",
    "transactionHash": "0x8af2bce89b62612d4b3c59612922d0dd28906701d0b491ff82f57ddc3afdc75b",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27468527,
        "transactionHash": "0x8af2bce89b62612d4b3c59612922d0dd28906701d0b491ff82f57ddc3afdc75b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fffdd1de35ffc2f66bfd78e064c280fed9e68de",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000011a6fe2d3c4bee6000000000000000000000000000000000000000000000000360c3187eff642560000000000000000000000000000000000000000000021847497e8368598290200000000000000000000000000000000000000000000000034f1c1a51c31837000000000000000000000000000000000000000000000218475b25819595ce7e8",
        "logIndex": 29,
        "blockHash": "0xc65f25cf4743b154d6a299addc64b91f8d557775574455c743fd95657885fc9e"
      }
    ],
    "blockNumber": 27468527,
    "cumulativeGasUsed": "4257601",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "0x2E310145C9443BAdbB37245554D3B24902822671",
    "0x00cb5293882E754A23E6fF20DB6639F3302cA720",
    "0x209c092f1aCB2F1a46121e352441D779f410f078",
    "0x3F73371cFA58F338C479928AC7B4327478Cb859f",
    "0x45c7650cbE485d3c85B739799A4D2eEF9FB46d60"
  ],
  "numDeployments": 1,
  "solcInputHash": "b2f0e3dc481a3e44a4548875cb367210",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pantherPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prpGrantor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zkpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstLeafId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zkp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"RewardGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"zkpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"prpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint24\",\"name\":\"nftRewards\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct AdvancedStakeRewardController.Limits\",\"name\":\"newLimits\",\"type\":\"tuple\"}],\"name\":\"RewardLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"startZkpApy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endZkpApy\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"prpPerStake\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct AdvancedStakeRewardController.RewardParams\",\"name\":\"newRewardParams\",\"type\":\"tuple\"}],\"name\":\"RewardParamsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANTHER_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MASTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getRewardAdvice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"createSharesFor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"sharesToCreate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"redeemSharesFrom\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"sharesToRedeem\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sendRewardTo\",\"type\":\"address\"}],\"internalType\":\"struct IRewardAdviser.Advice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getZkpApyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"zkpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"prpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint24\",\"name\":\"nftRewards\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardParams\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"startZkpApy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endZkpApy\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"prpPerStake\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_desiredNftRewardsLimit\",\"type\":\"uint256\"}],\"name\":\"setNftRewardLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totals\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"zkpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"prpRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint24\",\"name\":\"nftRewards\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"scZkpStaked\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"startZkpApy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endZkpApy\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"prpPerStake\",\"type\":\"uint32\"}],\"internalType\":\"struct AdvancedStakeRewardController.RewardParams\",\"name\":\"_newParams\",\"type\":\"tuple\"}],\"name\":\"updateRewardParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateZkpAndPrpRewardsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is supposed to run on the Polygon. Unless otherwise mentioned, other smart contracts are supposed to run on the Polygon also. As the \\\"Reward Adviser\\\" on the \\\"advanced\\\" stakes, every time a new stake is being created, it receives the `getRewardAdvice` call from the `RewardMaster` contract with the `STAKE` action type and the stake data (the `message`) being the call parameters. On the `getRewardAdvice` call received, this contract: - computes the amounts of the $ZKP reward, the PRP reward, and the optional NFT reward - if the `NFT_TOKEN` is non-zero address, it calls `grantOneToken` on the NFT_TOKEN, and gets the `tokenId` of the minted NFT token - calls `generateDeposits` of the PantherPoolV0, providing amounts/parameters of $ZKP, PRP, and   optional NFT as \\\"deposits\\\", as well as \\\"spending pubKeys\\\" and \\\"secrets\\\" (explained below) - returns the \\\"zero reward advice\\\" (with zero `sharesToCreate`) to the RewardMaster. On the \\\"zero\\\" advice, the RewardMaster skips creating \\\"treasure shares\\\" for the staker. This way rewarding gets orchestrated by this contract rather than the RewardMaster. Being called `generateDeposits`, the PantherPoolV0: - requests the `Vault` to take (`transferFrom`) the $ZKP and NFT tokens from this contract - \\\"burns\\\" the PRP grant - generates \\\"UTXOs\\\" with the \\\"spending pubKeys\\\" and \\\"secrets\\\" provided (see bellow). Creating a new stake (i.e. calling the `stake`), the staker generates and provides the \\\"pubKeys\\\" and \\\"secrets\\\" to the Staking. Both the Staking on the mainnet and the Staking on the Polygon encodes them into the STAKE message and passes to the RewardMaster, which passes the message to this contract with the `getRewardAdvice` call. So this contracts get pubKeys and secrets needed for the `generateDeposits`. For stakes on the Polygon, when all contracts (i.e. Staking, RewardMaster and this contract) run on the same network, the RewardMaster on the Polygon calls this contract directly. For stakes made on the mainnet, where the Staking and the RewardMaster run, but this contract is on the Polygon, the RewardMaster on the mainnet sends the STAKE message to the RewardMaster on the Polygon via the PoS bridge and mediator contracts. The RewardMaster on the Polygon handles a bridged STAKE message (calling the `getRewardAdvice`) as if the message had been sent by the Staking on the Polygon. As a prerequisite: - this contract shall: -- be authorized as the \\\"RewardAdviser\\\" with the RewardMaster on the Polygon for advanced stakes -- be authorized as \\\"Minter\\\" (aka \\\"grantor\\\") with the NFT_TOKEN contract -- hold enough $ZKP to reward stakers -- be given a PRP grant of the size enough to reward stakers - the Vault contract shall be approved to transfer $ZKPs and the NFT tokens from this contract - the $ZKP and the NFT tokens shall be registered as zAssets on the PantherPoolV0.\",\"events\":{\"RewardGenerated(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the reward for a stake is generated\"},\"RewardLimitUpdated((uint96,uint96,uint24))\":{\"details\":\"Emitted when new amounts are allocated to reward stakers\"},\"RewardParamsUpdated((uint32,uint32,uint8,uint8,uint32))\":{\"details\":\"Emitted when rewarding params updated\"}},\"kind\":\"dev\",\"methods\":{\"getRewardAdvice(bytes4,bytes)\":{\"details\":\"To be called by the {RewardMaster} contract on \\\"advanced\\\" `STAKE` and `UNSTAKE` actions. The caller is trusted to never call w/ the STAKE acton: - twice for the same stake - after the rewarded period has ended\"},\"rescueErc20(address,address,uint256)\":{\"details\":\"May be only called by the {OWNER}\"},\"setNftRewardLimit(uint256)\":{\"details\":\"Only owner may call it.\"},\"updateZkpAndPrpRewardsLimit()\":{\"details\":\"Anyone may call it.\"}},\"title\":\"AdvancedStakeRewardController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"PANTHER_POOL()\":{\"notice\":\"PantherPoolV0 contract instance\"},\"REWARD_MASTER()\":{\"notice\":\"RewardMaster contract instance\"},\"START_BLOCK()\":{\"notice\":\"Block when this contract is deployed\"},\"getZkpApyAt(uint256)\":{\"notice\":\"Return the APY for the $ZKP reward at a given time\"},\"limits()\":{\"notice\":\"Amounts of $ZKP, PRP and NFT allocated for rewards\"},\"rescueErc20(address,address,uint256)\":{\"notice\":\"Withdraws unclaimed rewards or accidentally sent token from this contract\"},\"rewardParams()\":{\"notice\":\"Reward parameters (start and end point for time and APY)\"},\"setNftRewardLimit(uint256)\":{\"notice\":\"Allocate NFT rewards and approve the Vault to transfer them\"},\"totals()\":{\"notice\":\"Total amounts of $ZKP, PRP and NFT rewarded so far\"},\"updateZkpAndPrpRewardsLimit()\":{\"notice\":\"Allocate for rewards the entire $ZKP balance and the PRP grant amount this contract has and approve the Vault to transfer $ZKP from this contract.\"}},\"notice\":\"It generates UTXOs in the MASP as rewards to stakers for the \\\"Advanced Staking\\\"\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdvancedStakeRewardController.sol\":\"AdvancedStakeRewardController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/AdvancedStakeRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"./actions/AdvancedStakingDataDecoder.sol\\\";\\nimport \\\"./actions/Constants.sol\\\";\\nimport \\\"./actions/StakingMsgProcessor.sol\\\";\\nimport { PRP_VIRTUAL_CONTRACT } from \\\"./common/Constants.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/INftGrantor.sol\\\";\\nimport \\\"./interfaces/IPrpGrantor.sol\\\";\\nimport \\\"./interfaces/IPantherPoolV0.sol\\\";\\nimport \\\"./interfaces/IRewardAdviser.sol\\\";\\nimport \\\"./utils/Claimable.sol\\\";\\nimport \\\"./utils/ImmutableOwnable.sol\\\";\\nimport \\\"./utils/NonReentrant.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\nimport \\\"./common/TransferHelper.sol\\\";\\n\\n/**\\n * @title AdvancedStakeRewardController\\n * @notice It generates UTXOs in the MASP as rewards to stakers for the \\\"Advanced Staking\\\"\\n * @dev This contract is supposed to run on the Polygon. Unless otherwise mentioned, other smart\\n * contracts are supposed to run on the Polygon also.\\n * As the \\\"Reward Adviser\\\" on the \\\"advanced\\\" stakes, every time a new stake is being created, it\\n * receives the `getRewardAdvice` call from the `RewardMaster` contract with the `STAKE` action\\n * type and the stake data (the `message`) being the call parameters.\\n * On the `getRewardAdvice` call received, this contract:\\n * - computes the amounts of the $ZKP reward, the PRP reward, and the optional NFT reward\\n * - if the `NFT_TOKEN` is non-zero address, it calls `grantOneToken` on the NFT_TOKEN, and gets\\n * the `tokenId` of the minted NFT token\\n * - calls `generateDeposits` of the PantherPoolV0, providing amounts/parameters of $ZKP, PRP, and\\n *   optional NFT as \\\"deposits\\\", as well as \\\"spending pubKeys\\\" and \\\"secrets\\\" (explained below)\\n * - returns the \\\"zero reward advice\\\" (with zero `sharesToCreate`) to the RewardMaster.\\n *\\n * On the \\\"zero\\\" advice, the RewardMaster skips creating \\\"treasure shares\\\" for the staker. This way\\n * rewarding gets orchestrated by this contract rather than the RewardMaster.\\n *\\n * Being called `generateDeposits`, the PantherPoolV0:\\n * - requests the `Vault` to take (`transferFrom`) the $ZKP and NFT tokens from this contract\\n * - \\\"burns\\\" the PRP grant\\n * - generates \\\"UTXOs\\\" with the \\\"spending pubKeys\\\" and \\\"secrets\\\" provided (see bellow).\\n *\\n * Creating a new stake (i.e. calling the `stake`), the staker generates and provides the \\\"pubKeys\\\"\\n * and \\\"secrets\\\" to the Staking. Both the Staking on the mainnet and the Staking on the Polygon\\n * encodes them into the STAKE message and passes to the RewardMaster, which passes the message to\\n * this contract with the `getRewardAdvice` call. So this contracts get pubKeys and secrets needed\\n * for the `generateDeposits`.\\n * For stakes on the Polygon, when all contracts (i.e. Staking, RewardMaster and this contract) run\\n * on the same network, the RewardMaster on the Polygon calls this contract directly.\\n * For stakes made on the mainnet, where the Staking and the RewardMaster run, but this contract is\\n * on the Polygon, the RewardMaster on the mainnet sends the STAKE message to the RewardMaster on\\n * the Polygon via the PoS bridge and mediator contracts. The RewardMaster on the Polygon handles a\\n * bridged STAKE message (calling the `getRewardAdvice`) as if the message had been sent by the\\n * Staking on the Polygon.\\n *\\n * As a prerequisite:\\n * - this contract shall:\\n * -- be authorized as the \\\"RewardAdviser\\\" with the RewardMaster on the Polygon for advanced stakes\\n * -- be authorized as \\\"Minter\\\" (aka \\\"grantor\\\") with the NFT_TOKEN contract\\n * -- hold enough $ZKP to reward stakers\\n * -- be given a PRP grant of the size enough to reward stakers\\n * - the Vault contract shall be approved to transfer $ZKPs and the NFT tokens from this contract\\n * - the $ZKP and the NFT tokens shall be registered as zAssets on the PantherPoolV0.\\n */\\ncontract AdvancedStakeRewardController is\\n    ImmutableOwnable,\\n    NonReentrant,\\n    StakingMsgProcessor,\\n    AdvancedStakingDataDecoder,\\n    Utils,\\n    Claimable,\\n    IERC721Receiver,\\n    IRewardAdviser\\n{\\n    using TransferHelper for address;\\n\\n    /// @dev Total amount of $ZKPs, PRPs and NFTs (ever) rewarded and staked\\n    struct Totals {\\n        uint96 zkpRewards;\\n        uint96 prpRewards;\\n        uint24 nftRewards;\\n        // Accumulated amount of $ZKP (ever) staked, scaled (divided) by 1e15\\n        uint40 scZkpStaked;\\n    }\\n\\n    /// @dev Maximum amounts of $ZKPs, PRPs and NFTs which may be rewarded\\n    struct Limits {\\n        uint96 zkpRewards;\\n        uint96 prpRewards;\\n        uint24 nftRewards;\\n    }\\n\\n    /// @dev Reward Timestamps and APYs\\n    struct RewardParams {\\n        /// @param (UNIX) Time when $ZKP rewards start to accrue\\n        uint32 startTime;\\n        /// @param (UNIX) Time when $ZKP rewards accruals end\\n        uint32 endTime;\\n        /// @param $ZKP reward APY at startTime (APY declines from this value)\\n        uint8 startZkpApy;\\n        /// @param $ZKP reward APY at endTime (APY declines to this value)\\n        uint8 endZkpApy;\\n        /// @param Amount of PRP reward (per a stake)\\n        uint32 prpPerStake;\\n    }\\n\\n    // solhint-disable var-name-mixedcase\\n\\n    /// @notice RewardMaster contract instance\\n    address public immutable REWARD_MASTER;\\n    /// @notice PantherPoolV0 contract instance\\n    address public immutable PANTHER_POOL;\\n    /// @notice PrpGrantor contract instance\\n    address private immutable PRP_GRANTOR;\\n\\n    // Address of the $ZKP token contract\\n    address private immutable ZKP_TOKEN;\\n    // Address of the NFT token contract\\n    address private immutable NFT_TOKEN;\\n\\n    /// @notice Block when this contract is deployed\\n    uint256 public immutable START_BLOCK;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    uint8 private _reentrancyStatus;\\n\\n    /// @notice Amounts of $ZKP, PRP and NFT allocated for rewards\\n    Limits public limits;\\n\\n    /// @notice Total amounts of $ZKP, PRP and NFT rewarded so far\\n    Totals public totals;\\n\\n    /// @notice Reward parameters (start and end point for time and APY)\\n    RewardParams public rewardParams;\\n\\n    /// @dev Emitted when new amounts are allocated to reward stakers\\n    event RewardLimitUpdated(Limits newLimits);\\n\\n    /// @dev Emitted when rewarding params updated\\n    event RewardParamsUpdated(RewardParams newRewardParams);\\n\\n    /// @dev Emitted when the reward for a stake is generated\\n    event RewardGenerated(\\n        address indexed staker,\\n        uint256 firstLeafId,\\n        uint256 zkp,\\n        uint256 prp,\\n        uint256 nft\\n    );\\n\\n    constructor(\\n        address _owner,\\n        address rewardMaster,\\n        address pantherPool,\\n        address prpGrantor,\\n        address zkpToken,\\n        address nftToken\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            // nftToken may be zero address\\n            rewardMaster != address(0) &&\\n                pantherPool != address(0) &&\\n                prpGrantor != address(0) &&\\n                zkpToken != address(0),\\n            \\\"ARC:E1\\\"\\n        );\\n\\n        REWARD_MASTER = rewardMaster;\\n        PANTHER_POOL = pantherPool;\\n        PRP_GRANTOR = prpGrantor;\\n\\n        ZKP_TOKEN = zkpToken;\\n        NFT_TOKEN = nftToken;\\n\\n        START_BLOCK = block.number;\\n    }\\n\\n    /// @dev To be called by the {RewardMaster} contract on \\\"advanced\\\" `STAKE` and `UNSTAKE` actions.\\n    /// The caller is trusted to never call w/ the STAKE acton:\\n    /// - twice for the same stake\\n    /// - after the rewarded period has ended\\n    function getRewardAdvice(bytes4 action, bytes memory message)\\n        external\\n        override\\n        returns (Advice memory)\\n    {\\n        require(msg.sender == REWARD_MASTER, \\\"ARC: unauthorized\\\");\\n\\n        if (action == ADVANCED_STAKE) {\\n            _generateRewards(message);\\n        } else {\\n            require(action == ADVANCED_UNSTAKE, \\\"ARC: unsupported action\\\");\\n        }\\n\\n        // Return \\\"zero\\\" advice\\n        return\\n            Advice(\\n                address(0), // createSharesFor\\n                0, // sharesToCreate\\n                address(0), // redeemSharesFrom\\n                0, // sharesToRedeem\\n                address(0) // sendRewardTo\\n            );\\n    }\\n\\n    /// @notice Return the APY for the $ZKP reward at a given time\\n    function getZkpApyAt(uint256 time) external view returns (uint256) {\\n        RewardParams memory _rewardParams = rewardParams;\\n        if (time < _rewardParams.startTime || time > _rewardParams.endTime)\\n            return 0;\\n\\n        return _getZkpApyWithinRewardedPeriod(_rewardParams, time);\\n    }\\n\\n    function updateRewardParams(RewardParams memory _newParams)\\n        external\\n        onlyOwner\\n    {\\n        _setRewardParams(_newParams);\\n    }\\n\\n    /// @notice Allocate NFT rewards and approve the Vault to transfer them\\n    /// @dev Only owner may call it.\\n    function setNftRewardLimit(uint256 _desiredNftRewardsLimit)\\n        external\\n        onlyOwner\\n    {\\n        if (NFT_TOKEN == address(0)) return;\\n\\n        Totals memory _totals = totals;\\n        Limits memory _limits = limits;\\n\\n        require(\\n            _desiredNftRewardsLimit > _totals.nftRewards,\\n            \\\"ARC: low nft rewards limit\\\"\\n        );\\n\\n        address vault = IPantherPoolV0(PANTHER_POOL).VAULT();\\n\\n        bool isUpdated = _updateNftRewardsLimitAndAllowance(\\n            _desiredNftRewardsLimit,\\n            _limits,\\n            _totals,\\n            vault\\n        );\\n\\n        if (isUpdated) {\\n            limits = _limits;\\n            emit RewardLimitUpdated(_limits);\\n        }\\n    }\\n\\n    /// @notice Allocate for rewards the entire $ZKP balance and the PRP grant amount\\n    /// this contract has and approve the Vault to transfer $ZKP from this contract.\\n    /// @dev Anyone may call it.\\n    function updateZkpAndPrpRewardsLimit() external {\\n        Limits memory _limits = limits;\\n        Totals memory _totals = totals;\\n        address vault = IPantherPoolV0(PANTHER_POOL).VAULT();\\n\\n        // Updating the rewards limits\\n        bool isUpdated;\\n        isUpdated = _updateZkpRewardsLimitAndAllowance(_limits, _totals, vault);\\n        isUpdated = _updatePrpRewardsLimit(_limits, _totals) || isUpdated;\\n\\n        if (isUpdated) {\\n            limits = _limits;\\n            emit RewardLimitUpdated(_limits);\\n        }\\n    }\\n\\n    /// @notice Withdraws unclaimed rewards or accidentally sent token from this contract\\n    /// @dev May be only called by the {OWNER}\\n    function rescueErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(_reentrancyStatus != 1, \\\"ARC: can't be re-entered\\\");\\n        _reentrancyStatus = 1;\\n\\n        RewardParams memory _rewardParams = rewardParams;\\n\\n        require(OWNER == msg.sender, \\\"ARC: unauthorized\\\");\\n        require(\\n            (token != ZKP_TOKEN) || (block.timestamp > _rewardParams.endTime),\\n            \\\"ARC: too early withdrawal\\\"\\n        );\\n\\n        _claimErc20(token, to, amount);\\n        _reentrancyStatus = 2;\\n    }\\n\\n    // Implementation of the {IERC721Receiver}. It accepts NFT_TOKEN transfers only.\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external view override returns (bytes4) {\\n        return\\n            msg.sender == NFT_TOKEN\\n                ? this.onERC721Received.selector // accepted\\n                : bytes4(0); // rejected\\n    }\\n\\n    // Private functions follow\\n    // Some of them declared `internal` rather than `private` to ease testing\\n\\n    function _generateRewards(bytes memory message) internal {\\n        // (stakeId and claimedAt are irrelevant)\\n        (\\n            address staker,\\n            uint96 stakeAmount,\\n            ,\\n            uint32 stakedAt,\\n            uint32 lockedTill,\\n            ,\\n            bytes memory data\\n        ) = _unpackStakingActionMsg(message);\\n\\n        require(stakeAmount != 0, \\\"ARC: unexpected zero stakeAmount\\\");\\n        require(lockedTill > stakedAt, \\\"ARC: unexpected lockedTill\\\");\\n\\n        uint256 zkpAmount = 0;\\n        uint256 prpAmount = 0;\\n        uint256 nftAmount = 0;\\n        uint256 nftTokenId = 0;\\n        {\\n            Totals memory _totals = totals;\\n            Limits memory _limits = limits;\\n            RewardParams memory _rewardParams = rewardParams;\\n\\n            // Compute amount of the $ZKP reward  and check the limit\\n            {\\n                zkpAmount = _computeZkpReward(\\n                    stakeAmount,\\n                    lockedTill,\\n                    stakedAt,\\n                    _rewardParams\\n                );\\n\\n                if (zkpAmount > 0) {\\n                    uint256 newTotalZkpReward = uint256(_totals.zkpRewards) +\\n                        zkpAmount;\\n                    require(\\n                        _limits.zkpRewards >= newTotalZkpReward,\\n                        \\\"ARC: too less rewards available\\\"\\n                    );\\n                    // Can't exceed uint96 here due to the `require` above\\n                    _totals.zkpRewards = uint96(newTotalZkpReward);\\n\\n                    uint256 newScZkpStaked = uint256(_totals.scZkpStaked) +\\n                        uint256(stakeAmount) /\\n                        1e15;\\n                    // Overflow risk ignored as $ZKP max total supply is 1e9 tokens\\n                    _totals.scZkpStaked = uint40(newScZkpStaked);\\n                }\\n            }\\n\\n            // `prpPerStake` is too small to cause overflow\\n            uint96 newPrpTotal = _totals.prpRewards + _rewardParams.prpPerStake;\\n            if (newPrpTotal <= _limits.prpRewards) {\\n                prpAmount = _rewardParams.prpPerStake;\\n                _totals.prpRewards = newPrpTotal;\\n            }\\n\\n            if (_totals.nftRewards < _limits.nftRewards) {\\n                // `_limits.nftRewards > 0` therefore `NFT_TOKEN != address(0)`\\n                // trusted contract called - no reentrancy guard needed\\n                nftTokenId = INftGrantor(NFT_TOKEN).grantOneToken(\\n                    address(this)\\n                );\\n\\n                nftAmount = 1;\\n                _totals.nftRewards += 1;\\n            }\\n\\n            totals = _totals;\\n        }\\n\\n        // Extract public spending keys and \\\"secrets\\\"\\n        (\\n            G1Point[OUT_UTXOs] memory pubSpendingKeys,\\n            uint256[CIPHERTEXT1_WORDS][OUT_UTXOs] memory secrets\\n        ) = unpackStakingData(data);\\n\\n        // Finally, generate deposits (i.e. UTXOs in the MASP)\\n        address[OUT_UTXOs] memory tokens = [\\n            // PantherPool reverts if non-zero address provided for zero amount\\n            zkpAmount == 0 ? address(0) : ZKP_TOKEN,\\n            prpAmount == 0 ? address(0) : PRP_VIRTUAL_CONTRACT,\\n            nftAmount == 0 ? address(0) : NFT_TOKEN\\n        ];\\n\\n        uint256[OUT_UTXOs] memory subIds = [0, 0, nftTokenId];\\n        uint256[OUT_UTXOs] memory extAmounts = [\\n            zkpAmount,\\n            prpAmount,\\n            nftAmount\\n        ];\\n\\n        uint32 createdAt = safe32TimeNow();\\n        uint256 leftLeafId = IPantherPoolV0(PANTHER_POOL).generateDeposits(\\n            tokens,\\n            subIds,\\n            extAmounts,\\n            pubSpendingKeys,\\n            secrets,\\n            createdAt\\n        );\\n\\n        emit RewardGenerated(\\n            staker,\\n            leftLeafId,\\n            zkpAmount,\\n            prpAmount,\\n            nftAmount\\n        );\\n    }\\n\\n    // The calling code is assumed to ensure `lockedTill > stakedAt`\\n    function _computeZkpReward(\\n        uint256 stakeAmount,\\n        uint256 lockedTill,\\n        uint256 stakedAt,\\n        RewardParams memory _rewardParams\\n    ) internal pure returns (uint256 zkpAmount) {\\n        // No rewarding after `endTime`\\n        if (stakedAt >= _rewardParams.endTime) return 0;\\n        // No rewarding before `startTime`\\n        if (lockedTill <= _rewardParams.startTime) return 0;\\n\\n        uint256 rewardedSince = _rewardParams.startTime > stakedAt\\n            ? _rewardParams.startTime\\n            : stakedAt;\\n\\n        uint256 rewardedTill = lockedTill > _rewardParams.endTime\\n            ? _rewardParams.endTime\\n            : lockedTill;\\n\\n        uint256 period = rewardedTill - rewardedSince;\\n        uint256 apy = _getZkpApyWithinRewardedPeriod(\\n            _rewardParams,\\n            rewardedSince\\n        );\\n\\n        // 3153600000 = 365 * 24 * 3600 seconds * 100 percents\\n        zkpAmount = (stakeAmount * apy * period) / 3153600000;\\n    }\\n\\n    // The calling code is assumed to ensure that\\n    // `startTime < time < endTime` and `startZkpApy >= endZkpApy`\\n    function _getZkpApyWithinRewardedPeriod(\\n        RewardParams memory _rewardParams,\\n        uint256 time\\n    ) private pure returns (uint256 apy) {\\n        unchecked {\\n            uint256 fullDrop = uint256(\\n                _rewardParams.startZkpApy - _rewardParams.endZkpApy\\n            );\\n            apy = uint256(_rewardParams.startZkpApy);\\n\\n            if (fullDrop > 0) {\\n                uint256 dropDuration = time - _rewardParams.startTime;\\n                uint256 fullDuration = uint256(\\n                    _rewardParams.endTime - _rewardParams.startTime\\n                );\\n                uint256 apyDrop = (fullDrop * dropDuration) / fullDuration;\\n\\n                apy -= apyDrop;\\n            }\\n        }\\n    }\\n\\n    // Allocate for rewards the entire $ZKP balance this contract holds,\\n    // and update allowance for the VAULT to spend for $ZKP from the balance\\n    function _updateZkpRewardsLimitAndAllowance(\\n        Limits memory _limits,\\n        Totals memory _totals,\\n        address vault\\n    ) private returns (bool isUpdated) {\\n        // Reentrancy guard unneeded for the trusted contract call\\n        uint256 balance = ZKP_TOKEN.safeBalanceOf(address(this));\\n\\n        uint96 newLimit;\\n        (isUpdated, newLimit) = _getUpdatedLimit(\\n            balance,\\n            _limits.zkpRewards,\\n            _totals.zkpRewards\\n        );\\n\\n        if (isUpdated) {\\n            _limits.zkpRewards = newLimit;\\n\\n            // Approve the vault to transfer tokens from this contract\\n            // Reentrancy guard unneeded for the trusted contract call\\n            ZKP_TOKEN.safeApprove(vault, uint256(newLimit));\\n        }\\n    }\\n\\n    // Allocate for rewards the PRP amount this contract has been granted with\\n    function _updatePrpRewardsLimit(\\n        Limits memory _limits,\\n        Totals memory _totals\\n    ) private view returns (bool isUpdated) {\\n        // Reentrancy guard unneeded for the trusted contract call\\n        uint256 unusedPrps = IPrpGrantor(PRP_GRANTOR).getUnusedGrantAmount(\\n            address(this)\\n        );\\n\\n        uint96 newLimit;\\n        (isUpdated, newLimit) = _getUpdatedLimit(\\n            unusedPrps,\\n            _limits.prpRewards,\\n            _totals.prpRewards\\n        );\\n\\n        if (isUpdated) _limits.prpRewards = newLimit;\\n    }\\n\\n    // Allocate for rewards the entire NFT amount this contract can mint,\\n    // and update allowance for the VAULT to spend that NFT\\n    function _updateNftRewardsLimitAndAllowance(\\n        uint256 _desiredNftRewardsLimit,\\n        Limits memory _limits,\\n        Totals memory _totals,\\n        address vault\\n    ) private returns (bool isUpdated) {\\n        uint96 newLimit;\\n        (isUpdated, newLimit) = _getUpdatedLimit(\\n            _desiredNftRewardsLimit,\\n            _limits.nftRewards,\\n            _totals.nftRewards\\n        );\\n\\n        if (isUpdated) {\\n            bool isAllowanceToBeUpdated = _limits.nftRewards == 0;\\n\\n            // Overflow is unrealistic and therefore ignored\\n            _limits.nftRewards = uint24(newLimit);\\n\\n            if (isAllowanceToBeUpdated)\\n                // Approve the vault to transfer tokens from this contract\\n                // Reentrancy guard unneeded for the trusted contract call\\n                NFT_TOKEN.safeSetApprovalForAll(vault, true);\\n        }\\n    }\\n\\n    // Calculates and returns the updated reward limit\\n    function _getUpdatedLimit(\\n        uint256 available,\\n        uint96 currentLimit,\\n        uint96 usedLimit\\n    ) internal pure returns (bool isUpdated, uint96 limit) {\\n        uint256 unusedLimit = uint256(currentLimit) - uint256(usedLimit);\\n\\n        if (available == unusedLimit) return (false, currentLimit);\\n\\n        isUpdated = true;\\n        // underflow is impossible due to `if` checks\\n        unchecked {\\n            if (available > unusedLimit) {\\n                // new tokens for rewarding have been provided\\n                uint256 newAllocation = available - unusedLimit;\\n                limit = safe96(newAllocation + currentLimit);\\n            } else {\\n                // gracefully handle this unexpected situation\\n                uint96 shortage = safe96(unusedLimit - available);\\n                limit = currentLimit > shortage ? currentLimit - shortage : 0;\\n            }\\n        }\\n    }\\n\\n    // Set the rewarding params\\n    function _setRewardParams(RewardParams memory newParams) private {\\n        require(\\n            newParams.startTime != 0 &&\\n                newParams.endTime > newParams.startTime &&\\n                newParams.endTime > timeNow(),\\n            \\\"ARC: invalid time\\\"\\n        );\\n        require(\\n            newParams.startZkpApy >= newParams.endZkpApy,\\n            \\\"ARC: invalid APY\\\"\\n        );\\n\\n        rewardParams = newParams;\\n        emit RewardParamsUpdated(newParams);\\n    }\\n}\\n\",\"keccak256\":\"0x9d380e4bfc588456737bbff1af89a027b0b6852132fd34ff70b13e1c74a72c43\",\"license\":\"UNLICENSED\"},\"contracts/actions/AdvancedStakingDataDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport { CIPHERTEXT1_WORDS, OUT_UTXOs, PUBKEY_WORDS } from \\\"../common/Constants.sol\\\";\\nimport { G1Point } from \\\"../common/Types.sol\\\";\\n\\n/***\\n * @title AdvancedStakingDataDecoder\\n * @dev It decodes (unpack) `bytes data` of the 'STAKED' message for \\\"advanced staking\\\"\\n */\\nabstract contract AdvancedStakingDataDecoder {\\n    // in bytes\\n    uint256 private constant DATA_LENGTH =\\n        OUT_UTXOs * (PUBKEY_WORDS + CIPHERTEXT1_WORDS) * 32;\\n    // in 32-byte memory slots\\n    uint256 private constant NUM_DATA_SLOTS =\\n        (DATA_LENGTH / 32) + ((DATA_LENGTH % 32) & 1);\\n\\n    // For efficiency we use \\\"packed\\\" (rather than \\\"ABI\\\") encoding.\\n    // It results in shorter data, but requires custom unpack function.\\n    function unpackStakingData(bytes memory data)\\n        internal\\n        pure\\n        returns (\\n            G1Point[OUT_UTXOs] memory pubSpendingKeys,\\n            uint256[CIPHERTEXT1_WORDS][OUT_UTXOs] memory secrets\\n        )\\n    {\\n        require(data.length == DATA_LENGTH, \\\"SMP: unexpected msg length\\\");\\n\\n        // Let's read bytes as uint256 values\\n        uint256[NUM_DATA_SLOTS + 1] memory words;\\n        // the 1st slot is `data.length`, then slots with values follow\\n        for (uint256 i = 1; i <= NUM_DATA_SLOTS; ++i) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let offset := mul(i, 0x20)\\n                let word := mload(add(data, offset))\\n                mstore(add(words, offset), word)\\n            }\\n        }\\n        /*\\n            `bytes memory sample = 0x00010203..1f2021` stored in the memory like this:\\n            slot #0: 0x22 - length (34 bytes)\\n            slot #1: 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\\n            slot #2: 0x2021000000000000000000000000000000000000000000000000000000000000\\n\\n            `bytes memory data` expected to be:\\n            concatenate( // each element is 32-bit long\\n                pubSpendingKeys[0].x, pubSpendingKeys[0].y,\\n                pubSpendingKeys[1].x, pubSpendingKeys[1].y,\\n                pubSpendingKeys[2].x, pubSpendingKeys[2].y,\\n                (secrets[0])[0], (secrets[0])[1], (secrets[0])[2],\\n                (secrets[1])[0], (secrets[1])[1], (secrets[1])[2],\\n                (secrets[2])[0], (secrets[2])[1], (secrets[2])[2],\\n            )\\n        */\\n        for (uint256 i = 0; i < OUT_UTXOs; i++) {\\n            pubSpendingKeys[i].x = words[i * PUBKEY_WORDS + 1];\\n            pubSpendingKeys[i].y = words[i * PUBKEY_WORDS + 2];\\n            for (uint256 k = 0; k < CIPHERTEXT1_WORDS; k++) {\\n                secrets[i][k] = words[\\n                    PUBKEY_WORDS * OUT_UTXOs + CIPHERTEXT1_WORDS * i + k + 1\\n                ];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52c8e18b195c79c46514d013353458e03d8ac6a3aa6fe1d561117db4977a9f51\",\"license\":\"UNLICENSED\"},\"contracts/actions/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// solhint-disable var-name-mixedcase\\n\\n// The \\\"stake type\\\" for the \\\"classic staking\\\"\\n// bytes4(keccak256(\\\"classic\\\"))\\nbytes4 constant CLASSIC_STAKE_TYPE = 0x4ab0941a;\\n\\n// STAKE \\\"action type\\\" for the \\\"classic staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"stake\\\"), CLASSIC_STAKE_TYPE)))\\nbytes4 constant CLASSIC_STAKE = 0x1e4d02b5;\\n\\n// UNSTAKE \\\"action type\\\" for the \\\"classic staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"unstake\\\"), CLASSIC_STAKE_TYPE)))\\nbytes4 constant CLASSIC_UNSTAKE = 0x493bdf45;\\n\\n// The \\\"stake type\\\" for the \\\"advance staking\\\"\\n// bytes4(keccak256(\\\"advanced\\\"))\\nbytes4 constant ADVANCED_STAKE_TYPE = 0x7ec13a06;\\n\\n// STAKE \\\"action type\\\" for the \\\"advanced staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"stake\\\"), ADVANCED_STAKE_TYPE)))\\nbytes4 constant ADVANCED_STAKE = 0xcc995ce8;\\n\\n// UNSTAKE \\\"action type\\\" for the \\\"advanced staking\\\"\\n// bytes4(keccak256(abi.encodePacked(bytes4(keccak256(\\\"unstake\\\"), ADVANCED_STAKE_TYPE)))\\nbytes4 constant ADVANCED_UNSTAKE = 0xb8372e55;\\n\\n// PRP grant type for the \\\"advanced\\\" stake\\n// bytes4(keccak256(\\\"forAdvancedStakeGrant\\\"))\\nbytes4 constant FOR_ADVANCED_STAKE_GRANT = 0x31a180d4;\\n\\n// solhint-enable var-name-mixedcase\\n\",\"keccak256\":\"0x7f32586a16909cafe991fa12fa56ca3339962b62b94b3f2ff3ef7076be72fc67\",\"license\":\"MIT\"},\"contracts/actions/StakingMsgProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IStakingTypes.sol\\\";\\n\\nabstract contract StakingMsgProcessor {\\n    bytes4 internal constant STAKE_ACTION = bytes4(keccak256(\\\"stake\\\"));\\n    bytes4 internal constant UNSTAKE_ACTION = bytes4(keccak256(\\\"unstake\\\"));\\n\\n    function _encodeStakeActionType(bytes4 stakeType)\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return bytes4(keccak256(abi.encodePacked(STAKE_ACTION, stakeType)));\\n    }\\n\\n    function _encodeUnstakeActionType(bytes4 stakeType)\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return bytes4(keccak256(abi.encodePacked(UNSTAKE_ACTION, stakeType)));\\n    }\\n\\n    function _packStakingActionMsg(\\n        address staker,\\n        IStakingTypes.Stake memory stake,\\n        bytes calldata data\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                staker, // address\\n                stake.amount, // uint96\\n                stake.id, // uint32\\n                stake.stakedAt, // uint32\\n                stake.lockedTill, // uint32\\n                stake.claimedAt, // uint32\\n                data // bytes\\n            );\\n    }\\n\\n    // For efficiency we use \\\"packed\\\" (rather than \\\"ABI\\\") encoding.\\n    // It results in shorter data, but requires custom unpack function.\\n    function _unpackStakingActionMsg(bytes memory message)\\n        internal\\n        pure\\n        returns (\\n            address staker,\\n            uint96 amount,\\n            uint32 id,\\n            uint32 stakedAt,\\n            uint32 lockedTill,\\n            uint32 claimedAt,\\n            bytes memory data\\n        )\\n    {\\n        // staker, amount, id and 3 timestamps occupy exactly 48 bytes\\n        // (`data` may be of zero length)\\n        require(message.length >= 48, \\\"SMP: unexpected msg length\\\");\\n\\n        uint256 stakerAndAmount;\\n        uint256 idAndStamps;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // the 1st word (32 bytes) contains the `message.length`\\n            // we need the (entire) 2nd word ..\\n            stakerAndAmount := mload(add(message, 0x20))\\n            // .. and (16 bytes of) the 3rd word\\n            idAndStamps := mload(add(message, 0x40))\\n        }\\n\\n        staker = address(uint160(stakerAndAmount >> 96));\\n        amount = uint96(stakerAndAmount & 0xFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        id = uint32((idAndStamps >> 224) & 0xFFFFFFFF);\\n        stakedAt = uint32((idAndStamps >> 192) & 0xFFFFFFFF);\\n        lockedTill = uint32((idAndStamps >> 160) & 0xFFFFFFFF);\\n        claimedAt = uint32((idAndStamps >> 128) & 0xFFFFFFFF);\\n\\n        uint256 dataLength = message.length - 48;\\n        data = new bytes(dataLength);\\n        for (uint256 i = 0; i < dataLength; i++) {\\n            data[i] = message[i + 48];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7262083031b3f49a56ede1d53de2b3a6f113eb868dd8b65845f1d019180c317c\",\"license\":\"UNLICENSED\"},\"contracts/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// TODO: Remove duplicated declaration after merge w/ `panther-core`\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\n\\n// Number of 32-bit words in the (uncompressed) spending PubKey\\nuint256 constant PUBKEY_WORDS = 2;\\n\\n// Number of 32-bit words in the ciphertext in the \\\"type 1\\\" message\\nuint256 constant CIPHERTEXT1_WORDS = 3;\\n\\n// Number of elements in `pathElements`\\nuint256 constant PATH_ELEMENTS_NUM = 16;\\n\\n// Address of the \\\"virtual token contract\\\" for PRPs.\\n// Calculated as `keccak256('Privacy Reward Point') >> 96`.\\naddress constant PRP_VIRTUAL_CONTRACT = 0x1afa2212970b809aE15D51AF00C502D5c8eB3bAf;\\n\",\"keccak256\":\"0xbc2e6287dc51facc4ac308b51750f45698c89b64b42d2de3c4980c2e965ee219\",\"license\":\"MIT\"},\"contracts/common/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\npragma solidity ^0.8.0;\\n\\n/// @title TransferHelper library\\n/// @dev Helper methods for interacting with ERC20, ERC721, ERC1155 tokens and sending ETH\\n/// Based on the Uniswap/solidity-lib/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n    /// @dev Approve the `operator` to spend all of ERC720 tokens on behalf of `owner`.\\n    function safeSetApprovalForAll(\\n        address token,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('setApprovalForAll(address,bool)'));\\n            abi.encodeWithSelector(0xa22cb465, operator, approved)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    /// @dev Get the ERC20 balance of `account`\\n    function safeBalanceOf(address token, address account)\\n        internal\\n        returns (uint256 balance)\\n    {\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('balanceOf(address)')));\\n            abi.encodeWithSelector(0x70a08231, account)\\n        );\\n        require(\\n            success && (data.length != 0),\\n            \\\"TransferHelper::safeBalanceOf: get balance failed\\\"\\n        );\\n\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Approve the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256('approve(address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens from caller to `to`.\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256('transfer(address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens on behalf of `from` to `to`.\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256('transferFrom(address,address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        _requireTransferSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer an ERC721 token with id of `tokenId` on behalf of `from` to `to`.\\n    function erc721SafeTransferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal {\\n        // bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x42842e0e, from, to, tokenId)\\n        );\\n        _requireTransferSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `amount` ERC1155 token with id of `tokenId` on behalf of `from` to `to`.\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal {\\n        // bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)'));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xf242432a, from, to, tokenId, amount, _data)\\n        );\\n        _requireTransferSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` Ether from caller to `to`.\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\"\\n        );\\n    }\\n\\n    function _requireTransferSuccess(bool success, bytes memory res)\\n        private\\n        pure\\n    {\\n        require(\\n            success && (res.length == 0 || abi.decode(res, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xae2241019627495976c0e5a785c54bf9308d14122ab4f2492aae9608e931f9f5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// TODO: Remove duplicated declaration after merge w/ `panther-core`\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\",\"keccak256\":\"0xb51a25ce045e6dec9f4372a15260ed5cff2735cb581f819c2087c80a5e1cd6c1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient,\\n     * the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x816dc3eaab013914d21d8e075c5f83ad6829a9228e415a340a017fed61de10a3\",\"license\":\"MIT\"},\"contracts/interfaces/INftGrantor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface INftGrantor {\\n    function grantOneToken(address to) external returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x3f57fc6c33adedc12afacf81c519aff46c3363daecacda3f918693cab04b21cc\",\"license\":\"MIT\"},\"contracts/interfaces/IPantherPoolV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { G1Point } from \\\"../common/Types.sol\\\";\\nimport { CIPHERTEXT1_WORDS, OUT_UTXOs, PATH_ELEMENTS_NUM } from \\\"../common/Constants.sol\\\";\\n\\n/**\\n * @notice (Truncated) Interface of the PantherPoolV0\\n * @dev Only those functions and events included which the `AdvancedStakeRewardController` contract uses\\n */\\ninterface IPantherPoolV0 {\\n    /**\\n     * @notice Increase the \\\"unused grants\\\" amount (in PRPs) of the given grantee by the amount\\n     * defined by the given \\\"grant type\\\"\\n     * @return prpAmount The amount (in PRPs) of the grant\\n     * @dev An authorized \\\"curator\\\" may call with the enabled (added) \\\"grant type\\\" only\\n     */\\n    function grant(address grantee, bytes4 grantType)\\n        external\\n        returns (uint256 prpAmount);\\n\\n    /**\\n     * @notice Transfer assets from the msg.sender to the VAULT and generate UTXOs in the MASP\\n     * @param tokens Address of the token contract for every UTXO\\n     * @dev For PRP granted the address ot this contract (proxy) is supposed to be used\\n     * @param tokenIds For ERC-721 and ERC-1155 - token ID or subId of the token, 0 for ERC-20\\n     * @param extAmounts Token amounts (external) to be deposited\\n     * @param pubSpendingKeys Public Spending Key for every UTXO\\n     * @param secrets Encrypted opening values for every UTXO\\n     * @param  createdAt Optional, if 0 network time used\\n     * @dev createdAt must be less (or equal) the network time\\n     * @return leftLeafId The `leafId` of the first UTXO (leaf) in the batch\\n     */\\n    function generateDeposits(\\n        address[OUT_UTXOs] calldata tokens,\\n        uint256[OUT_UTXOs] calldata tokenIds,\\n        uint256[OUT_UTXOs] calldata extAmounts,\\n        G1Point[OUT_UTXOs] calldata pubSpendingKeys,\\n        uint256[CIPHERTEXT1_WORDS][OUT_UTXOs] calldata secrets,\\n        uint32 createdAt\\n    ) external returns (uint256 leftLeafId);\\n\\n    function exit(\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint32 creationTime,\\n        uint256 privSpendingKey,\\n        uint256 leafId,\\n        bytes32[PATH_ELEMENTS_NUM] calldata pathElements,\\n        bytes32 merkleRoot,\\n        uint256 cacheIndexHint\\n    ) external;\\n\\n    /**\\n     * @return Address of the Vault\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VAULT() external view returns (address);\\n\\n    /**\\n     * @dev Emitted on a new batch of Commitments\\n     * @param leftLeafId The `leafId` of the first leaf in the batch\\n     * @dev `leafId = leftLeafId + 1` for the 2nd leaf (`leftLeafId + 2` for the 3rd leaf)\\n     * @param commitments Commitments hashes\\n     * @param utxoData opening values (encrypted and public) for UTXOs\\n     */\\n    event NewCommitments(\\n        uint256 indexed leftLeafId,\\n        uint256 creationTime,\\n        bytes32[OUT_UTXOs] commitments,\\n        bytes utxoData\\n    );\\n\\n    /**\\n     * @dev PRP grant issued\\n     * @param grantType \\\"Type\\\" of the PRP grant\\n     * @param grantee User to whom the grant is issued\\n     * @param prpAmount Amount of the grant in PRP\\n     */\\n    event PrpGrantIssued(\\n        bytes4 indexed grantType,\\n        address grantee,\\n        uint256 prpAmount\\n    );\\n\\n    /**\\n     * Nullifier is seen (i.e. UTXO is spent)\\n     */\\n    event Nullifier(bytes32 nullifier);\\n}\\n\",\"keccak256\":\"0x37bf346827223d599c5738ff836c280f1900b8f7e7dfe50c6952b4ca6fa7ff12\",\"license\":\"MIT\"},\"contracts/interfaces/IPrpGrantor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title (Truncated) Interface of PrpGrantor\\n * @dev Only those functions and events included which the `AdvancedStakeRewardController` contract uses\\n */\\ninterface IPrpGrantor {\\n    /// @notice Returns the total amount (in PRPs) of unused grants for the given grantee\\n    function getUnusedGrantAmount(address grantee)\\n        external\\n        view\\n        returns (uint256 prpAmount);\\n}\\n\",\"keccak256\":\"0xf10aed429c52ab82e5d19e8abb7b4802fd3f50123a7df8d896d5ee32cf154627\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardAdviser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardAdviser {\\n    struct Advice {\\n        // advice on new \\\"shares\\\" (in the reward pool) to create\\n        address createSharesFor;\\n        uint96 sharesToCreate;\\n        // advice on \\\"shares\\\" to redeem\\n        address redeemSharesFrom;\\n        uint96 sharesToRedeem;\\n        // advice on address the reward against redeemed shares to send to\\n        address sendRewardTo;\\n    }\\n\\n    function getRewardAdvice(bytes4 action, bytes memory message)\\n        external\\n        returns (Advice memory);\\n}\\n\",\"keccak256\":\"0x9ecf725af20a11f29d94406fc335d3b20afd60dfb9e398a409966e0568ac1bbb\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\ninterface IStakingTypes {\\n    // Stake type terms\\n    struct Terms {\\n        // if stakes of this kind allowed\\n        bool isEnabled;\\n        // if messages on stakes to be sent to the {RewardMaster}\\n        bool isRewarded;\\n        // limit on the minimum amount staked, no limit if zero\\n        uint32 minAmountScaled;\\n        // limit on the maximum amount staked, no limit if zero\\n        uint32 maxAmountScaled;\\n        // Stakes not accepted before this time, has no effect if zero\\n        uint32 allowedSince;\\n        // Stakes not accepted after this time, has no effect if zero\\n        uint32 allowedTill;\\n        // One (at least) of the following three params must be non-zero\\n        // if non-zero, overrides both `exactLockPeriod` and `minLockPeriod`\\n        uint32 lockedTill;\\n        // ignored if non-zero `lockedTill` defined, overrides `minLockPeriod`\\n        uint32 exactLockPeriod;\\n        // has effect only if both `lockedTill` and `exactLockPeriod` are zero\\n        uint32 minLockPeriod;\\n    }\\n\\n    struct Stake {\\n        // index in the `Stake[]` array of `stakes`\\n        uint32 id;\\n        // defines Terms\\n        bytes4 stakeType;\\n        // time this stake was created at\\n        uint32 stakedAt;\\n        // time this stake can be claimed at\\n        uint32 lockedTill;\\n        // time this stake was claimed at (unclaimed if 0)\\n        uint32 claimedAt;\\n        // amount of tokens on this stake (assumed to be less 1e27)\\n        uint96 amount;\\n        // address stake voting power is delegated to\\n        address delegatee;\\n    }\\n}\\n\",\"keccak256\":\"0xdb6f4a5e54fedb85152a6c80104f98a87713b194e3fd157565c4bd20058864be\",\"license\":\"MIT\"},\"contracts/utils/Claimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Claimable\\n * @notice It withdraws accidentally sent tokens from this contract.\\n */\\ncontract Claimable {\\n    bytes4 private constant SELECTOR_TRANSFER =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    /// @dev Withdraws ERC20 tokens from this contract\\n    /// (take care of reentrancy attack risk mitigation)\\n    function _claimErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(SELECTOR_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"claimErc20: TRANSFER_FAILED\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x702e63e7eef33ed5490abd4a58db7074a1bcf1b055057cbbbdbeaa4112f5c437\",\"license\":\"MIT\"},\"contracts/utils/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xa7fcff1c9e37b9c757c39cf83b9149b440de47f72a1fb77426a75520fedead5c\",\"license\":\"MIT\"},\"contracts/utils/NonReentrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title NonReentrant\\n * @notice It provides reentrancy guard.\\n * The code borrowed from openzeppelin-contracts.\\n * Unlike original, this version requires neither `constructor` no `init` call.\\n */\\nabstract contract NonReentrant {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _reentrancyStatus;\\n\\n    modifier nonReentrant() {\\n        // Being called right after deployment, when _reentrancyStatus is 0 ,\\n        // it does not revert (which is expected behaviour)\\n        require(_reentrancyStatus != _ENTERED, \\\"claimErc20: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _reentrancyStatus = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _reentrancyStatus = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xbf71fedcb5a991cc9142ec5f8260ddfd30da2d17f0fe9171ea276901835a53fa\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nabstract contract Utils {\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x792e9324cc764dbd45210aa817127d67fae28bee7dc9b91e98cd1253617b04e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162002ba338038062002ba3833981016040819052620000359162000180565b856001600160a01b038116620000925760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b60601b6001600160601b0319166080526001600160a01b03851615801590620000c357506001600160a01b03841615155b8015620000d857506001600160a01b03831615155b8015620000ed57506001600160a01b03821615155b620001245760405162461bcd60e51b81526020600482015260066024820152654152433a453160d01b604482015260640162000089565b6001600160601b0319606095861b811660a05293851b841660c05291841b831660e052831b82166101005290911b166101205250436101405262000200565b80516001600160a01b03811681146200017b57600080fd5b919050565b60008060008060008060c0878903121562000199578182fd5b620001a48762000163565b9550620001b46020880162000163565b9450620001c46040880162000163565b9350620001d46060880162000163565b9250620001e46080880162000163565b9150620001f460a0880162000163565b90509295509295509295565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c610140516128d5620002ce60003960006101790152600081816103fc0152818161090301528181611255015281816115a3015261178201526000818161057201528181610e9601528181610ef9015261171401526000610f4c0152600081816102bc015281816106be01528181610a0d01526117fa0152600081816101b60152610b8e01526000818160f40152818161050301528181610807015261088b01526128d56000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063763469141161008c578063b4f708f711610066578063b4f708f7146102de578063c038a38e146102f1578063e9cb032414610369578063f3d17c69146103dc57600080fd5b806376346914146101eb578063860aefcf1461025f5780638f3e52de146102b757600080fd5b806339b3e826116100c857806339b3e82614610174578063548cc3e1146101a9578063576eadd2146101b15780635e6b9358146101d857600080fd5b8063117803e3146100ef578063150b7a0214610133578063243feb991461015f575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101466101413660046124c0565b6103ef565b6040516001600160e01b0319909116815260200161012a565b61017261016d366004612480565b61043c565b005b61019b7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161012a565b610172610624565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101726101e63660046125a4565b610805565b6004546102299063ffffffff80821691640100000000810482169160ff600160401b8304811692600160481b810490911691600160501b9091041685565b6040805163ffffffff9687168152948616602086015260ff9384169085015291166060830152909116608082015260a00161012a565b60025461028c906001600160601b0380821691600160601b810490911690600160c01b900462ffffff1683565b604080516001600160601b03948516815293909216602084015262ffffff169082015260600161012a565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101726102ec366004612631565b610889565b60035461032d906001600160601b0380821691600160601b810490911690600160c01b810462ffffff1690600160d81b900464ffffffffff1684565b604080516001600160601b03958616815294909316602085015262ffffff9091169183019190915264ffffffffff16606082015260800161012a565b61037c61037736600461254a565b610b58565b60405161012a9190600060a0820190506001600160a01b0380845116835260208401516001600160601b03808216602086015282604087015116604086015280606087015116606086015250508060808501511660808401525092915050565b61019b6103ea366004612631565b610cb4565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610428576000610431565b630a85bd0160e11b5b90505b949350505050565b6001805460ff1614156104965760405162461bcd60e51b815260206004820152601860248201527f4152433a2063616e27742062652072652d656e7465726564000000000000000060448201526064015b60405180910390fd5b6001805460ff1916811790556040805160a08101825260045463ffffffff808216835264010000000082048116602084015260ff600160401b8304811694840194909452600160481b82049093166060830152600160501b90049091166080820152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105705760405162461bcd60e51b815260206004820152601160248201527f4152433a20756e617574686f72697a6564000000000000000000000000000000604482015260640161048d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415806105ba5750806020015163ffffffff1642115b6106065760405162461bcd60e51b815260206004820152601960248201527f4152433a20746f6f206561726c79207769746864726177616c00000000000000604482015260640161048d565b610611848484610d42565b50506001805460ff191660021790555050565b60408051606080820183526002546001600160601b038082168452600160601b808304821660208087019190915262ffffff600160c01b9485900481168789015287516080810189526003548086168252938404909416848301529382049093168287015264ffffffffff600160d81b9091041692810192909252835163411557d160e01b81529351929391926000926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263411557d192600480840193829003018186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107379190612464565b90506000610746848484610e86565b90506107528484610f2a565b8061075a5750805b905080156107ff57835160028054602080880180516040808b01805162ffffff908116600160c01b0262ffffff60c01b196001600160601b03958616600160601b026001600160c01b03199099169a86169a8b1798909817979097169690961790965580519687529151169185019190915291511682820152517f636de12201a46911e0f61f41e1edd370264516bd75fd47147404798201327c699181900360600190a15b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461087d5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a6564000000000000000000000000604482015260640161048d565b61088681611000565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146109015760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a6564000000000000000000000000604482015260640161048d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109325750565b604080516080810182526003546001600160601b038082168352600160601b8083048216602080860191909152600160c01b80850462ffffff908116878901908152600160d81b90960464ffffffffff1660608089019190915288519081018952600254808716825294850490951692850192909252909104811694820194909452905191929091168311610a095760405162461bcd60e51b815260206004820152601a60248201527f4152433a206c6f77206e66742072657761726473206c696d6974000000000000604482015260640161048d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663411557d16040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6457600080fd5b505afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190612464565b90506000610aac85848685611205565b90508015610b5157825160028054602080870180516040808a01805162ffffff908116600160c01b0262ffffff60c01b196001600160601b03958616600160601b026001600160c01b03199099169a86169a8b1798909817979097169690961790965580519687529151169185019190915291511682820152517f636de12201a46911e0f61f41e1edd370264516bd75fd47147404798201327c699181900360600190a15b5050505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bfb5760405162461bcd60e51b815260206004820152601160248201527f4152433a20756e617574686f72697a6564000000000000000000000000000000604482015260640161048d565b6001600160e01b031983166319932b9d60e31b1415610c2257610c1d82611288565b610c82565b6001600160e01b0319831663b8372e5560e01b14610c825760405162461bcd60e51b815260206004820152601760248201527f4152433a20756e737570706f7274656420616374696f6e000000000000000000604482015260640161048d565b506040805160a08101825260008082526020820181905291810182905260608101829052608081019190915292915050565b6040805160a08101825260045463ffffffff80821680845264010000000083048216602085015260ff600160401b8404811695850195909552600160481b83049094166060840152600160501b909104166080820152600091831080610d235750806020015163ffffffff1683115b15610d315750600092915050565b610d3b8184611912565b9392505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691610dce91906126b2565b6000604051808303816000865af19150503d8060008114610e0b576040519150601f19603f3d011682016040523d82523d6000602084013e610e10565b606091505b5091509150818015610e3a575080511580610e3a575080806020019051810190610e3a919061252a565b610b515760405162461bcd60e51b815260206004820152601b60248201527f636c61696d45726332303a205452414e534645525f4641494c45440000000000604482015260640161048d565b600080610ebc6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630611973565b90506000610ed38287600001518760000151611ac3565b90935090508215610f21576001600160601b038116808752610f21906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908690611b60565b50509392505050565b604051638e698e9360e01b815230600482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638e698e939060240160206040518083038186803b158015610f8e57600080fd5b505afa158015610fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc69190612649565b90506000610fdd8286602001518660200151611ac3565b90935090508215610ff8576001600160601b03811660208601525b505092915050565b805163ffffffff16158015906110295750806000015163ffffffff16816020015163ffffffff16115b801561103e575042816020015163ffffffff16115b61108a5760405162461bcd60e51b815260206004820152601160248201527f4152433a20696e76616c69642074696d65000000000000000000000000000000604482015260640161048d565b806060015160ff16816040015160ff1610156110e85760405162461bcd60e51b815260206004820152601060248201527f4152433a20696e76616c69642041505900000000000000000000000000000000604482015260640161048d565b80516004805460208401516040808601516060870151608088015163ffffffff908116600160501b026dffffffff000000000000000000001960ff938416600160481b0269ff0000000000000000001994909516600160401b029390931669ffff0000000000000000199683166401000000000267ffffffffffffffff1990981692909916919091179590951793909316959095179490941716179055517fef84ced41c36b2d63ba09cedde0cecaa7c1404ae3dce874c94452cb6dde27391906111fa908390600060a08201905063ffffffff80845116835280602085015116602084015260ff604085015116604084015260ff60608501511660608401528060808501511660808401525092915050565b60405180910390a150565b60008061122586866040015162ffffff16866040015162ffffff16611ac3565b9092509050811561127f5760408501805162ffffff8381169092521615801561127d5761127d6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016856001611ca3565b505b50949350505050565b600080600080600061129986611cd4565b965050955095505094509450836001600160601b0316600014156112ff5760405162461bcd60e51b815260206004820181905260248201527f4152433a20756e6578706563746564207a65726f207374616b65416d6f756e74604482015260640161048d565b8263ffffffff168263ffffffff161161135a5760405162461bcd60e51b815260206004820152601a60248201527f4152433a20756e6578706563746564206c6f636b656454696c6c000000000000604482015260640161048d565b60408051608080820183526003546001600160601b038082168452600160601b808304821660208087019190915262ffffff600160c01b8086048216888a015264ffffffffff600160d81b9096049590951660608089019190915288518082018a526002548087168252948504861681850152959093041684880152865160a08101885260045463ffffffff8082168352640100000000820481169383019390935260ff600160401b8204811699830199909952600160481b810490981692810192909252600160501b90960486169381019390935260009485948594859491939192909161145391908d16908b8116908d1684611e8b565b9650861561151c5782516000906114749089906001600160601b03166127be565b90508083600001516001600160601b031610156114d35760405162461bcd60e51b815260206004820152601f60248201527f4152433a20746f6f206c657373207265776172647320617661696c61626c6500604482015260640161048d565b6001600160601b0380821685526000906114f79066038d7ea4c68000908f166127f8565b856060015164ffffffffff1661150d91906127be565b64ffffffffff16606086015250505b6000816080015163ffffffff16846020015161153891906127d6565b905082602001516001600160601b0316816001600160601b0316116115745760808201516001600160601b038216602086015263ffffffff1696505b826040015162ffffff16846040015162ffffff1610156116495760405163d17c93bf60e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d17c93bf90602401602060405180830381600087803b1580156115ef57600080fd5b505af1158015611603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116279190612649565b9450600195506001846040018181516116409190612797565b62ffffff169052505b50508151600380546020850151604086015160609096015164ffffffffff16600160d81b027affffffffffffffffffffffffffffffffffffffffffffffffffffff62ffffff909716600160c01b029690961677ffffffffffffffffffffffffffffffffffffffffffffffff6001600160601b03928316600160601b026001600160c01b0319909416929095169190911791909117929092169190911792909217909155506000806116f987611f54565b915091506000604051806060016040528088600014611738577f000000000000000000000000000000000000000000000000000000000000000061173b565b60005b6001600160a01b03168152602001871561176957731afa2212970b809ae15d51af00c502d5c8eb3baf61176c565b60005b6001600160a01b0316815260200186156117a6577f00000000000000000000000000000000000000000000000000000000000000006117a9565b60005b6001600160a01b031690526040805160608082018352600080835260208084018290528385018a9052845192830185528c835282018b905292810189905292935091906117f4612251565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302e9b8eb8686868b8b886040518763ffffffff1660e01b815260040161184e969594939291906126eb565b602060405180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a09190612649565b90508f6001600160a01b03167fddec0656213960e0ac0e474ef653acbb176c235a6490a17417050ff0ae105372828d8d8d6040516118f7949392919093845260208401929092526040830152606082015260800190565b60405180910390a25050505050505050505050505050505050565b6060820151604083015160ff8082169290910316801561196c578351602085015163ffffffff808316860392909103166000818484028161196357634e487b7160e01b600052601260045260246000fd5b04909403935050505b5092915050565b6000806000846001600160a01b03166370a08231856040516024016119a791906001600160a01b0391909116815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516119e091906126b2565b6000604051808303816000865af19150503d8060008114611a1d576040519150601f19603f3d011682016040523d82523d6000602084013e611a22565b606091505b5091509150818015611a345750805115155b611aa65760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7361666542616c616e63654f663a206760448201527f65742062616c616e6365206661696c6564000000000000000000000000000000606482015260840161048d565b80806020019051810190611aba9190612649565b95945050505050565b60008080611add6001600160601b0380861690871661282b565b905080861415611af4576000859250925050611b58565b6001925080861115611b1f57808603611b176001600160601b0387168201612261565b925050611b56565b6000611b2c878303612261565b9050806001600160601b0316866001600160601b031611611b4e576000611b52565b8086035b9250505b505b935093915050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b3906064015b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611bc591906126b2565b6000604051808303816000865af19150503d8060008114611c02576040519150601f19603f3d011682016040523d82523d6000602084013e611c07565b606091505b5091509150818015611c31575080511580611c31575080806020019051810190611c31919061252a565b610b515760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c6564000000000000000000000000000000000000000000606482015260840161048d565b6040516001600160a01b0383811660248301528215156044830152600091829186169063a22cb46590606401611b8c565b6000806000806000806060603088511015611d315760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e677468000000000000604482015260640161048d565b602088015160408901518951606083901c99506001600160601b038316985060e082901c975063ffffffff60c083901c8116975060a083901c81169650608083901c169450600090611d859060309061282b565b90508067ffffffffffffffff811115611dae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611dd8576020820181803683370190505b50935060005b81811015611e7c578b611df28260306127be565b81518110611e1057634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b858281518110611e3b57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080611e7481612842565b915050611dde565b50505050919395979092949650565b6000816020015163ffffffff168310611ea657506000610434565b815163ffffffff168411611ebc57506000610434565b600083836000015163ffffffff1611611ed55783611ede565b825163ffffffff165b90506000836020015163ffffffff168611611ef95785611f05565b836020015163ffffffff165b90506000611f13838361282b565b90506000611f218685611912565b905063bbf81e0082611f33838c61280c565b611f3d919061280c565b611f4791906127f8565b9998505050505050505050565b611f5c612310565b611f64612349565b611f70600360026127be565b611f7c600160026127be565b611f86919061280c565b611f9190602061280c565b835114611fe05760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e677468000000000000604482015260640161048d565b611fe8612376565b60015b6020611ff9600360026127be565b612005600160026127be565b61200f919061280c565b61201a90602061280c565b612024919061285d565b6001166020612035600360026127be565b612041600160026127be565b61204b919061280c565b61205690602061280c565b61206091906127f8565b61206a91906127be565b811161208c5760208102858101519083015261208581612842565b9050611feb565b5060005b61209c600160026127be565b81101561224a57816120af60028361280c565b6120ba9060016127be565b601081106120d857634e487b7160e01b600052603260045260246000fd5b60200201518482600381106120fd57634e487b7160e01b600052603260045260246000fd5b6020020151528161210f60028361280c565b61211a9060026127be565b6010811061213857634e487b7160e01b600052603260045260246000fd5b602002015184826003811061215d57634e487b7160e01b600052603260045260246000fd5b6020020151602001818152505060005b600381101561223757828161218384600361280c565b61218f600160026127be565b61219a90600261280c565b6121a491906127be565b6121ae91906127be565b6121b99060016127be565b601081106121d757634e487b7160e01b600052603260045260246000fd5b60200201518483600381106121fc57634e487b7160e01b600052603260045260246000fd5b6020020151826003811061222057634e487b7160e01b600052603260045260246000fd5b60200201528061222f81612842565b91505061216d565b508061224281612842565b915050612090565b5050915091565b600061225c426122ba565b905090565b6000600160601b82106122b65760405162461bcd60e51b815260206004820152600860248201527f554e534146453936000000000000000000000000000000000000000000000000604482015260640161048d565b5090565b600064010000000082106122b65760405162461bcd60e51b815260206004820152600860248201527f554e534146453332000000000000000000000000000000000000000000000000604482015260640161048d565b60405180606001604052806003905b604080518082019091526000808252602082015281526020019060019003908161231f5790505090565b60405180606001604052806003905b612360612395565b8152602001906001900390816123585790505090565b6040518061020001604052806010906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b600082601f8301126123c3578081fd5b813567ffffffffffffffff808211156123de576123de61289d565b604051601f8301601f19908116603f011681019082821181831017156124065761240661289d565b8160405283815286602085880101111561241e578485fd5b8360208701602083013792830160200193909352509392505050565b803563ffffffff8116811461244e57600080fd5b919050565b803560ff8116811461244e57600080fd5b600060208284031215612475578081fd5b8151610d3b816128b3565b600080600060608486031215612494578182fd5b833561249f816128b3565b925060208401356124af816128b3565b929592945050506040919091013590565b600080600080608085870312156124d5578081fd5b84356124e0816128b3565b935060208501356124f0816128b3565b925060408501359150606085013567ffffffffffffffff811115612512578182fd5b61251e878288016123b3565b91505092959194509250565b60006020828403121561253b578081fd5b81518015158114610d3b578182fd5b6000806040838503121561255c578182fd5b82356001600160e01b031981168114612573578283fd5b9150602083013567ffffffffffffffff81111561258e578182fd5b61259a858286016123b3565b9150509250929050565b600060a082840312156125b5578081fd5b60405160a0810181811067ffffffffffffffff821117156125d8576125d861289d565b6040526125e48361243a565b81526125f26020840161243a565b602082015261260360408401612453565b604082015261261460608401612453565b60608201526126256080840161243a565b60808201529392505050565b600060208284031215612642578081fd5b5035919050565b60006020828403121561265a578081fd5b5051919050565b8060005b60038110156107ff5761267984835161268f565b6060939093019260209190910190600101612665565b8060005b60038110156107ff578151845260209384019390910190600101612693565b60008251815b818110156126d257602081860181015185830152016126b8565b818111156126e05782828501525b509190910192915050565b6103208101818860005b600381101561271d5781516001600160a01b03168352602092830192909101906001016126f5565b50505061272d606083018861268f565b61273a60c083018761268f565b61012082018560005b600381101561276e578151805184526020908101518185015260409093019290910190600101612743565b50505061277f6101e0830185612661565b63ffffffff8316610300830152979650505050505050565b600062ffffff8083168185168083038211156127b5576127b5612871565b01949350505050565b600082198211156127d1576127d1612871565b500190565b60006001600160601b038083168185168083038211156127b5576127b5612871565b60008261280757612807612887565b500490565b600081600019048311821515161561282657612826612871565b500290565b60008282101561283d5761283d612871565b500390565b600060001982141561285657612856612871565b5060010190565b60008261286c5761286c612887565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461088657600080fdfea164736f6c6343000804000a",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract is supposed to run on the Polygon. Unless otherwise mentioned, other smart contracts are supposed to run on the Polygon also. As the \"Reward Adviser\" on the \"advanced\" stakes, every time a new stake is being created, it receives the `getRewardAdvice` call from the `RewardMaster` contract with the `STAKE` action type and the stake data (the `message`) being the call parameters. On the `getRewardAdvice` call received, this contract: - computes the amounts of the $ZKP reward, the PRP reward, and the optional NFT reward - if the `NFT_TOKEN` is non-zero address, it calls `grantOneToken` on the NFT_TOKEN, and gets the `tokenId` of the minted NFT token - calls `generateDeposits` of the PantherPoolV0, providing amounts/parameters of $ZKP, PRP, and   optional NFT as \"deposits\", as well as \"spending pubKeys\" and \"secrets\" (explained below) - returns the \"zero reward advice\" (with zero `sharesToCreate`) to the RewardMaster. On the \"zero\" advice, the RewardMaster skips creating \"treasure shares\" for the staker. This way rewarding gets orchestrated by this contract rather than the RewardMaster. Being called `generateDeposits`, the PantherPoolV0: - requests the `Vault` to take (`transferFrom`) the $ZKP and NFT tokens from this contract - \"burns\" the PRP grant - generates \"UTXOs\" with the \"spending pubKeys\" and \"secrets\" provided (see bellow). Creating a new stake (i.e. calling the `stake`), the staker generates and provides the \"pubKeys\" and \"secrets\" to the Staking. Both the Staking on the mainnet and the Staking on the Polygon encodes them into the STAKE message and passes to the RewardMaster, which passes the message to this contract with the `getRewardAdvice` call. So this contracts get pubKeys and secrets needed for the `generateDeposits`. For stakes on the Polygon, when all contracts (i.e. Staking, RewardMaster and this contract) run on the same network, the RewardMaster on the Polygon calls this contract directly. For stakes made on the mainnet, where the Staking and the RewardMaster run, but this contract is on the Polygon, the RewardMaster on the mainnet sends the STAKE message to the RewardMaster on the Polygon via the PoS bridge and mediator contracts. The RewardMaster on the Polygon handles a bridged STAKE message (calling the `getRewardAdvice`) as if the message had been sent by the Staking on the Polygon. As a prerequisite: - this contract shall: -- be authorized as the \"RewardAdviser\" with the RewardMaster on the Polygon for advanced stakes -- be authorized as \"Minter\" (aka \"grantor\") with the NFT_TOKEN contract -- hold enough $ZKP to reward stakers -- be given a PRP grant of the size enough to reward stakers - the Vault contract shall be approved to transfer $ZKPs and the NFT tokens from this contract - the $ZKP and the NFT tokens shall be registered as zAssets on the PantherPoolV0.",
    "events": {
      "RewardGenerated(address,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the reward for a stake is generated"
      },
      "RewardLimitUpdated((uint96,uint96,uint24))": {
        "details": "Emitted when new amounts are allocated to reward stakers"
      },
      "RewardParamsUpdated((uint32,uint32,uint8,uint8,uint32))": {
        "details": "Emitted when rewarding params updated"
      }
    },
    "kind": "dev",
    "methods": {
      "getRewardAdvice(bytes4,bytes)": {
        "details": "To be called by the {RewardMaster} contract on \"advanced\" `STAKE` and `UNSTAKE` actions. The caller is trusted to never call w/ the STAKE acton: - twice for the same stake - after the rewarded period has ended"
      },
      "rescueErc20(address,address,uint256)": {
        "details": "May be only called by the {OWNER}"
      },
      "setNftRewardLimit(uint256)": {
        "details": "Only owner may call it."
      },
      "updateZkpAndPrpRewardsLimit()": {
        "details": "Anyone may call it."
      }
    },
    "title": "AdvancedStakeRewardController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "PANTHER_POOL()": {
        "notice": "PantherPoolV0 contract instance"
      },
      "REWARD_MASTER()": {
        "notice": "RewardMaster contract instance"
      },
      "START_BLOCK()": {
        "notice": "Block when this contract is deployed"
      },
      "getZkpApyAt(uint256)": {
        "notice": "Return the APY for the $ZKP reward at a given time"
      },
      "limits()": {
        "notice": "Amounts of $ZKP, PRP and NFT allocated for rewards"
      },
      "rescueErc20(address,address,uint256)": {
        "notice": "Withdraws unclaimed rewards or accidentally sent token from this contract"
      },
      "rewardParams()": {
        "notice": "Reward parameters (start and end point for time and APY)"
      },
      "setNftRewardLimit(uint256)": {
        "notice": "Allocate NFT rewards and approve the Vault to transfer them"
      },
      "totals()": {
        "notice": "Total amounts of $ZKP, PRP and NFT rewarded so far"
      },
      "updateZkpAndPrpRewardsLimit()": {
        "notice": "Allocate for rewards the entire $ZKP balance and the PRP grant amount this contract has and approve the Vault to transfer $ZKP from this contract."
      }
    },
    "notice": "It generates UTXOs in the MASP as rewards to stakers for the \"Advanced Staking\"",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9402,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "_reentrancyStatus",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 350,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "_reentrancyStatus",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 354,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "limits",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Limits)316_storage"
      },
      {
        "astId": 358,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "totals",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Totals)309_storage"
      },
      {
        "astId": 362,
        "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
        "label": "rewardParams",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(RewardParams)332_storage"
      }
    ],
    "types": {
      "t_struct(Limits)316_storage": {
        "encoding": "inplace",
        "label": "struct AdvancedStakeRewardController.Limits",
        "members": [
          {
            "astId": 311,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "zkpRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 313,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "prpRewards",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 315,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "nftRewards",
            "offset": 24,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RewardParams)332_storage": {
        "encoding": "inplace",
        "label": "struct AdvancedStakeRewardController.RewardParams",
        "members": [
          {
            "astId": 319,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 322,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "endTime",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 325,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "startZkpApy",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 328,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "endZkpApy",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 331,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "prpPerStake",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Totals)309_storage": {
        "encoding": "inplace",
        "label": "struct AdvancedStakeRewardController.Totals",
        "members": [
          {
            "astId": 302,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "zkpRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 304,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "prpRewards",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 306,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "nftRewards",
            "offset": 24,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 308,
            "contract": "contracts/AdvancedStakeRewardController.sol:AdvancedStakeRewardController",
            "label": "scZkpStaked",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}