{
  "address": "0x2EEEF61718ae9743050028075D5B16ef5bF22c88",
  "abi": [
    {
      "inputs": [],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0244ef1fcd1bcf8d09cd8865766d4c5643ba7f6b92461f84385f7b163248b79c",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x2EEEF61718ae9743050028075D5B16ef5bF22c88",
    "transactionIndex": 10,
    "gasUsed": "76987",
    "logsBloom": "0x
    "blockHash": "0x618d14dc5318fc9269e1a9bf66c70a0655073f3599046a37c7aa6bb3c8d76534",
    "transactionHash": "0x0244ef1fcd1bcf8d09cd8865766d4c5643ba7f6b92461f84385f7b163248b79c",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 38977294,
        "transactionHash": "0x0244ef1fcd1bcf8d09cd8865766d4c5643ba7f6b92461f84385f7b163248b79c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x000000000000000000000000e7f13f6bc1e7f5ca4a6c9a255124ce22c46f8ef0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000006907663ec73a00000000000000000000000000000000000000000000000019407119db62e40900000000000000000000000000000000000000000000001a03e9c284f1136c640000000000000000000000000000000000000000000000001940081275241ccf00000000000000000000000000000000000000000000001a03ea2b8c5752339e",
        "logIndex": 43,
        "blockHash": "0x618d14dc5318fc9269e1a9bf66c70a0655073f3599046a37c7aa6bb3c8d76534"
      }
    ],
    "blockNumber": 38977294,
    "cumulativeGasUsed": "1960640",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aa3713622c0321d2209b36505a0e7b3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/pantherForest/mocks/MockTaxiTree.sol\":\"MockTaxiTree\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/protocol/crypto/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// This is a stub to keep solc happy; the actual code is generated\\n// using poseidon_gencontract.js from circomlibjs.\\n\\nlibrary PoseidonT3 {\\n    function poseidon(bytes32[2] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT4 {\\n    function poseidon(bytes32[3] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT5 {\\n    function poseidon(bytes32[4] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(bytes32[5] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x85ba9420af1dcb1218b655c16044d163c9b070ff5913da034a9961e0e8c5aaf2\",\"license\":\"MIT\"},\"contracts/protocol/crypto/PoseidonHashers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-23 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\nimport { FIELD_SIZE } from \\\"./SnarkConstants.sol\\\";\\nimport \\\"./Poseidon.sol\\\";\\n\\nlibrary PoseidonHashers {\\n    string private constant ERR_INPUT_NOT_IN_FIELD =\\n        \\\"PoseidonHasher: input not in field\\\";\\n\\n    function poseidonT3(bytes32[2] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE && uint256(input[1]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT3.poseidon(input);\\n    }\\n\\n    function poseidonT4(bytes32[3] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT4.poseidon(input);\\n    }\\n\\n    function poseidonT5(bytes32[4] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT5.poseidon(input);\\n    }\\n\\n    function poseidonT6(bytes32[5] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE &&\\n                uint256(input[4]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT6.poseidon(input);\\n    }\\n}\\n\",\"keccak256\":\"0xd1729091f690c784f4666c9ce46f8c6441c8b364645eb0dfe5d09a31ac9ed84f\",\"license\":\"MIT\"},\"contracts/protocol/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable var-name-mixedcase\\npragma solidity ^0.8.16;\\n\\n// @dev Order of alt_bn128 and the field prime of Baby Jubjub and Poseidon hash\\nuint256 constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n// @dev Field prime of alt_bn128\\nuint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n// FIXME: make MAGICAL_CONSTRAINT the public input (var, not const) - it MUST have random value on every invocation\\n// @dev Circuit extra public input as work-around for recently found groth16 vulnerability\\nuint256 constant MAGICAL_CONSTRAINT = 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00;\\n\",\"keccak256\":\"0xc5545b99ebafdce4488581390f9466e1baf2ab9bb2107cb6614b34c101183de5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/interfaces/ITreeRootGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\ninterface ITreeRootGetter {\\n    function getRoot() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc6bb37fe4059cfe13c15f4c1d324b2de68a48348e136bf6cc72421f4721dc21d\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/mocks/MockTaxiTree.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\nimport \\\"../taxiTree/PantherTaxiTree.sol\\\";\\nimport \\\"../../crypto/PoseidonHashers.sol\\\";\\nimport { FIELD_SIZE } from \\\"../../crypto/SnarkConstants.sol\\\";\\n\\ncontract MockTaxiTree is PantherTaxiTree {\\n    // function simulateUpdateLeaf(\\n    //     BinaryUpdatableTree calldata tree,\\n    //     bytes32 newLeaf,\\n    //     bytes32 oldLeaf,\\n    //     uint256 leafInd,\\n    //     bytes32[] calldata siblings\\n    // ) public returns (bytes32 newRoot) {\\n    //     updateLeaf(tree, newLeaf, oldLeaf, leafInd, siblings);\\n    // }\\n\\n    function hash(bytes32[2] memory input) internal pure returns (bytes32) {\\n        return PoseidonHashers.poseidonT3(input);\\n    }\\n}\\n\",\"keccak256\":\"0x8a53297bc8fc3567e08275a78977ee25096c94d312b9a7e69aaf5a0730d97e19\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/taxiTree/PantherTaxiTree.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-23 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\nimport \\\"../interfaces/ITreeRootGetter.sol\\\";\\nimport { SIX_LEVEL_EMPTY_TREE_ROOT } from \\\"../zeroTrees/Constants.sol\\\";\\n\\n// is PantherTreesZeros\\nabstract contract PantherTaxiTree is ITreeRootGetter {\\n    // Root of root with ZERO trees with depth 6\\n    function getRoot() external pure returns (bytes32) {\\n        return SIX_LEVEL_EMPTY_TREE_ROOT;\\n    }\\n}\\n\",\"keccak256\":\"0x6f0985327f4e7b55fc17b3bc7a83f8e4cfd7ebbebe520d25f1fad8abc147ff3f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/zeroTrees/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-23 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\n/// @dev Leaf zero value (`keccak256(\\\"Pantherprotocol\\\")%FIELD_SIZE`)\\nbytes32 constant ZERO_VALUE = bytes32(\\n    uint256(0x0667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d)\\n);\\n\\n// The roots of empty trees follow.\\n// An \\\"empty\\\" tree is a binary merkle tree of a given number of levels bellow\\n// the root (depth), fully populated with ZERO_VALUE leafs, with the `poseidon`\\n// hash function applied.\\n// (computed by `../../../../lib/binaryMerkleZerosContractGenerator.ts`)\\n\\nuint256 constant SIX_LEVELS = 6;\\n/// @dev Root of the binary merkle SIX_LEVELS tree with ZERO_VALUE leafs\\n// Level 0: ZERO_VALUE\\n// Level 1: 0x232fc5fea3994c77e07e1bab1ec362727b0f71f291c17c34891dd4faf1457bd4\\n// Level 2: 0x077851cf613fd96280795a3cabc89663f524b1b545a3b1c7c79130b0f7d251c8\\n// Level 3: 0x1d79fd0bc46f7ca934dbcd3386a06f03c43f497851b3815ee726e7f9b26e504c\\n// Level 4: 0x05c0c15753806f506f64c18bf07116542451822479c4a89305cd4eb7ee94c800\\n// Level 5: 0x2b56fd5e780ebebdacdd27e6464cf01aac089461a998814974a7504aabb2023f\\nbytes32 constant SIX_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x2e99dc37b0a4f107b20278c26562b55df197e0b3eb237ec672f4cf729d159b69)\\n);\\n\\nuint256 constant SIXTEEN_LEVELS = 16;\\n/// @dev Root of the binary merkle SIXTEEN_LEVELS tree with ZERO_VALUE leafs\\n// Level 6:  SIX_LEVEL_EMPTY_TREE_ROOT\\n// Level 7:  0x225624653ac89fe211c0c3d303142a4caf24eb09050be08c33af2e7a1e372a0f\\n// Level 8:  0x276c76358db8af465e2073e4b25d6b1d83f0b9b077f8bd694deefe917e2028d7\\n// Level 9:  0x09df92f4ade78ea54b243914f93c2da33414c22328a73274b885f32aa9dea718\\n// Level 10: 0x1c78b565f2bfc03e230e0cf12ecc9613ab8221f607d6f6bc2a583ccd690ecc58\\n// Level 11: 0x2879d62c83d6a3af05c57a4aee11611a03edec5ff8860b07de77968f47ff1c5f\\n// Level 12: 0x28ad970560de01e93b613aabc930fcaf087114743909783e3770a1ed07c2cde6\\n// Level 13: 0x27ca60def9dd0603074444029cbcbeaa9dbe77668479ac1db738bb892d9f3b6d\\n// Level 14: 0x28e4c1e90bbfa69de93abf6cbdc7cd1c0753a128e83b2b3afe34e0471a13ff55\\n// Level 15: 0x1b89c44a9f153266ad5bf754d4b252c26acba7d21fc661b94dc0618c6a82f49c\\nbytes32 constant SIXTEEN_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x0a5e5ec37bd8f9a21a1c2192e7c37d86bf975d947c2b38598b00babe567191c9)\\n);\\n\\nuint256 constant TWENTY_LEVELS = 20;\\n/// @dev Root of the merkle binary TWENTY_LEVELS tree with ZERO_VALUE leafs\\n// Level 16: SIXTEEN_LEVEL_EMPTY_TREE_ROOT\\n// Level 17: 0x21fb04b171b68944c640020a3a464602ec8d02495c44f1e403d9be4a97128e49\\n// Level 18: 0x19151c748859974805eb30feac7a301266dec9f67e23e285fe750f86448a2af9\\n// Level 19: 0x18fb0b755218eaa809681eb87e45925faa9197507d368210d73b5836ebf139e4\\nbytes32 constant TWENTY_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x1e294375b42dfd97795e07e1fe8bd6cefcb16c3bbb71b30bed950f8965861244)\\n);\\n\\nuint256 constant TWENTY_SIX_LEVELS = 26;\\n/// @dev Root of the binary merkle TWENTY_SIX_LEVELS tree with ZERO_VALUE leafs\\n// Level 21: 0x0d3e4235db275d9bab0808dd9ade8789d46d0e1f1c9a99ce73fefca51dc92f4a\\n// Level 22: 0x075ab2ca945c4dc5ea40a9f1c66d5bf3c367cef1e04e73aa17c2bc747eb5fc87\\n// Level 23: 0x26f0f533a8ea2210001aeb8f8306c7c70656ba6afe145c6540bd4ed2c967a230\\n// Level 24: 0x24be7e64f680326e6e3621e5862d7b6b1f31e9e183a0bf5dd04e823be84e6af9\\n// Level 25: 0x212b13c9cbf421942ae3e3c62a3c072903c2a745a220cfb3c43cd520f55f44bf\\nbytes32 constant TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x1bdded415724018275c7fcc2f564f64db01b5bbeb06d65700564b05c3c59c9e6)\\n);\\n\\nuint256 constant THIRTY_TWO_LEVELS = 32;\\n/// @dev Root of the binary merkle THIRTY_TWO_LEVELS tree with ZERO_VALUE leafs\\n// Level 26: TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT\\n// Level 27: 0x038acf368a174e10c45a64161131c0f93faf2f045ff663acbef804eb5644aad7\\n// Level 28: 0x1b3ecbe4131d8d52d60b91ec8e13d5fc82235232bb43007d54cda6b50d932d6f\\n// Level 29: 0x1b0b9059f431d38a66c82317d9ed1b744c439f10193ae44bcf519fe6e1766b65\\n// Level 30: 0x240867e8bb31d6b8057f5ab067dc0bd1c4ba64a42258963ec45b7b4773ce5838\\n// Level 31: 0x2310e5b3543ea766ecaec53003d0e1b73f19a149409190d00561da7090a2c5cb\\nbytes32 constant THIRTY_TWO_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x24ab16594d418ca2e66ca284f56a4cb7039c6d8f8e0c3c8f362cf18b5afa19d0)\\n);\\n\",\"keccak256\":\"0x21997b2f641d5438810117c645125df9d4a9c2a295c28855ff2c3606909225d7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50606d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635ca1e16514602d575b600080fd5b7f2e99dc37b0a4f107b20278c26562b55df197e0b3eb237ec672f4cf729d159b6960405190815260200160405180910390f3fea164736f6c6343000810000a",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c80635ca1e16514602d575b600080fd5b7f2e99dc37b0a4f107b20278c26562b55df197e0b3eb237ec672f4cf729d159b6960405190815260200160405180910390f3fea164736f6c6343000810000a",
  "libraries": {
    "PoseidonT3": "0x7Ae48edd2Ee06Ba80863A196361B4bAAa5d8F8b1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}