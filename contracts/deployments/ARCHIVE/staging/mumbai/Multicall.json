{
  "address": "0xE8A5730355df24322797b1a4E0A2C3E3231d5F84",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x592ba630133ba6912afe28c499c51ef56afcaaa267e7a2e7cb7d124e93a82118",
  "receipt": {
    "to": null,
    "from": "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "contractAddress": "0xE8A5730355df24322797b1a4E0A2C3E3231d5F84",
    "transactionIndex": 4,
    "gasUsed": "385521",
    "logsBloom": "0x
    "blockHash": "0x9e276bdb7f865798c667e6ce37a1f2ff27226de237c4854a3aa3442d392ccd81",
    "transactionHash": "0x592ba630133ba6912afe28c499c51ef56afcaaa267e7a2e7cb7d124e93a82118",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 43797294,
        "transactionHash": "0x592ba630133ba6912afe28c499c51ef56afcaaa267e7a2e7cb7d124e93a82118",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fffdd1de35ffc2f66bfd78e064c280fed9e68de",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000002c3a9a6105b390000000000000000000000000000000000000000000000000a2883bad6cb3c450000000000000000000000000000000000000000000022f3f2c5891b6db5d55f0000000000000000000000000000000000000000000000000a25c01130bae10c0000000000000000000000000000000000000000000022f3f2c84cc513c63098",
        "logIndex": 13,
        "blockHash": "0x9e276bdb7f865798c667e6ce37a1f2ff27226de237c4854a3aa3442d392ccd81"
      }
    ],
    "blockNumber": 43797294,
    "cumulativeGasUsed": "817543",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "990d076ba33abdaa453668d9a5408f91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/common/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// solhint-disable avoid-low-level-calls\\npragma solidity ^0.8.16;\\n\\nimport { RevertMsgGetter } from \\\"./misc/RevertMsgGetter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract Multicall is RevertMsgGetter {\\n    using Address for address;\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (address to, bytes memory _data) = abi.decode(\\n                data[i],\\n                (address, bytes)\\n            );\\n\\n            require(\\n                to != address(0) && to.isContract(),\\n                \\\"MC:ERR_INVALID_TO_ADDR\\\"\\n            );\\n\\n            (bool success, bytes memory result) = to.call(_data);\\n\\n            if (!success) revert(getRevertMsg(result));\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\n/*\\n// TODO: Analyze possible optimization: tight calldata packing\\n\\n// Current calldata packing (for 3 x `target::increment()` calls),\\n// (target: 0xd15ee89dd37e62d131e382c8df7911ce872bf74d d09de08a)\\n// Size: 4 bytes + 20 x 32-byte slots\\n0xac9650d8  // selector for `multicall(bytes[])`\\n[000      ]  0000000000000000000000000000000000000000000000000000000000000020 // bytes[] offset\\n[020      ]  0000000000000000000000000000000000000000000000000000000000000003 // bytes[] size\\n[040 (000)]  0000000000000000000000000000000000000000000000000000000000000060 // bytes[0] offset\\n[060 (020)]  0000000000000000000000000000000000000000000000000000000000000100 // bytes[1] offset\\n[080 (040)]  00000000000000000000000000000000000000000000000000000000000001a0 // bytes[2] offset\\n\\n[0a0 (060)]  0000000000000000000000000000000000000000000000000000000000000080 // bytes[0] size\\n[0c0 (080)]  000000000000000000000000d15ee89dd37e62d131e382c8df7911ce872bf74d // 1st call address\\n[0e0 (0a0)]  0000000000000000000000000000000000000000000000000000000000000040 // 1st call bytes' offset\\n[100 (0c0)]  0000000000000000000000000000000000000000000000000000000000000004 // 1st call bytes' size\\n[120 (0e0)]  d09de08a00000000000000000000000000000000000000000000000000000000 // 1st call bytes\\n\\n[140 (100)]  0000000000000000000000000000000000000000000000000000000000000080 // bytes[1] size\\n[160 (120)]  000000000000000000000000d15ee89dd37e62d131e382c8df7911ce872bf74d // 2nd call ...\\n[180 (140)]  0000000000000000000000000000000000000000000000000000000000000040\\n[1a0 (160)]  0000000000000000000000000000000000000000000000000000000000000004\\n[1c0 (180)]  d09de08a00000000000000000000000000000000000000000000000000000000\\n\\n[1e0 (1a0)]  0000000000000000000000000000000000000000000000000000000000000080 // bytes[2] size\\n[200 (1c0)]  000000000000000000000000d15ee89dd37e62d131e382c8df7911ce872bf74d // 3rd call ...\\n[220 (1e0)]  0000000000000000000000000000000000000000000000000000000000000040\\n[240 (200)]  0000000000000000000000000000000000000000000000000000000000000004\\n[260 (220)]  d09de08a00000000000000000000000000000000000000000000000000000000\\n\\n// calldata for the same 3 x `target::increment()` calls, if serialized tightly\\n// Size: 4 bytes + 78 bytes\\n0xac9650d8  // selector for `multicall(bytes[])`\\n // length of the 1st call's calldata\\n[000] 0018\\n// 1st call's calldata: address (20 bytes) + calldata (rest)\\n[002] d15ee89dd37e62d131e382c8df7911ce872bf74d d09de08a\\n// length of the 2nd call's calldata\\n[01a] 0018\\n// 2nd call's calldata: address (20 bytes) + calldata (rest)\\n[01c] d15ee89dd37e62d131e382c8df7911ce872bf74d d09de08a\\n// length of the 3rd call's calldata\\n[034] 0018\\n// 3rd call's calldata: address (20 bytes) + calldata (rest)\\n[036] d15ee89dd37e62d131e382c8df7911ce872bf74d d09de08a\\n*/\\n\",\"keccak256\":\"0x8d5015a33affc5178f5c17531cfdd2f93343a7acd46be5c27cf15111cb5d1c65\",\"license\":\"BUSL-1.1\"},\"contracts/common/misc/RevertMsgGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nabstract contract RevertMsgGetter {\\n    // TODO: check if it may be simplified to `revert(add(result, 32), mload(result))`\\n    // Approach borrowed from https://ethereum.stackexchange.com/a/83577\\n    function getRevertMsg(\\n        bytes memory _returnData\\n    ) internal pure returns (string memory) {\\n        // Solidity returns the revert message encoded as\\n        // `abi.encodeWithSelector(\\\"Error(string)\\\", string(msg))`.\\n        // The sighash occupies the first 4 bytes of the _returnData. The msg length\\n        // offset (32) occupies the next 32 bytes, followed by 32 bytes w/ the length.\\n        // It's 68 bytes so far. Finally, the msg content follows.\\n        // So, if the _returnData contains a revert message generated by Solidity code,\\n        // the _returnData length should exceed 68.\\n        if (_returnData.length < 69) return \\\"Call reverted silently\\\";\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        // All that remains is the revert string\\n        return abi.decode(_returnData, (string));\\n    }\\n}\\n\",\"keccak256\":\"0x2770b35ced9c394ee11f84fdc0c8f04c4a850cfeee4f1af8c137211fc07f1c92\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610604806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ac9650d814610030575b600080fd5b61004361003e36600461028a565b610059565b604051610050919061034f565b60405180910390f35b60608167ffffffffffffffff811115610074576100746103b1565b6040519080825280602002602001820160405280156100a757816020015b60608152602001906001900390816100925790505b50905060005b8281101561021e576000808585848181106100ca576100ca6103c7565b90506020028101906100dc91906103dd565b8101906100e99190610484565b90925090506001600160a01b0382161580159061010f57506001600160a01b0382163b15155b6101605760405162461bcd60e51b815260206004820152601660248201527f4d433a4552525f494e56414c49445f544f5f414444520000000000000000000060448201526064015b60405180910390fd5b600080836001600160a01b03168360405161017b9190610523565b6000604051808303816000865af19150503d80600081146101b8576040519150601f19603f3d011682016040523d82523d6000602084013e6101bd565b606091505b5091509150816101e9576101d081610225565b60405162461bcd60e51b8152600401610157919061053f565b808686815181106101fc576101fc6103c7565b602002602001018190525050505050808061021690610559565b9150506100ad565b5092915050565b606060458251101561026a57505060408051808201909152601681527f43616c6c2072657665727465642073696c656e746c7900000000000000000000602082015290565b600482019150818060200190518101906102849190610580565b92915050565b6000806020838503121561029d57600080fd5b823567ffffffffffffffff808211156102b557600080fd5b818501915085601f8301126102c957600080fd5b8135818111156102d857600080fd5b8660208260051b85010111156102ed57600080fd5b60209290920196919550909350505050565b60005b8381101561031a578181015183820152602001610302565b50506000910152565b6000815180845261033b8160208601602086016102ff565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156103a457603f19888603018452610392858351610323565b94509285019290850190600101610376565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126103f457600080fd5b83018035915067ffffffffffffffff82111561040f57600080fd5b60200191503681900382131561042457600080fd5b9250929050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610454576104546103b1565b604052919050565b600067ffffffffffffffff821115610476576104766103b1565b50601f01601f191660200190565b6000806040838503121561049757600080fd5b82356001600160a01b03811681146104ae57600080fd5b9150602083013567ffffffffffffffff8111156104ca57600080fd5b8301601f810185136104db57600080fd5b80356104ee6104e98261045c565b61042b565b81815286602083850101111561050357600080fd5b816020840160208301376000602083830101528093505050509250929050565b600082516105358184602087016102ff565b9190910192915050565b6020815260006105526020830184610323565b9392505050565b60006001820161057957634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561059257600080fd5b815167ffffffffffffffff8111156105a957600080fd5b8201601f810184136105ba57600080fd5b80516105c86104e98261045c565b8181528560208385010111156105dd57600080fd5b6105ee8260208301602086016102ff565b9594505050505056fea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ac9650d814610030575b600080fd5b61004361003e36600461028a565b610059565b604051610050919061034f565b60405180910390f35b60608167ffffffffffffffff811115610074576100746103b1565b6040519080825280602002602001820160405280156100a757816020015b60608152602001906001900390816100925790505b50905060005b8281101561021e576000808585848181106100ca576100ca6103c7565b90506020028101906100dc91906103dd565b8101906100e99190610484565b90925090506001600160a01b0382161580159061010f57506001600160a01b0382163b15155b6101605760405162461bcd60e51b815260206004820152601660248201527f4d433a4552525f494e56414c49445f544f5f414444520000000000000000000060448201526064015b60405180910390fd5b600080836001600160a01b03168360405161017b9190610523565b6000604051808303816000865af19150503d80600081146101b8576040519150601f19603f3d011682016040523d82523d6000602084013e6101bd565b606091505b5091509150816101e9576101d081610225565b60405162461bcd60e51b8152600401610157919061053f565b808686815181106101fc576101fc6103c7565b602002602001018190525050505050808061021690610559565b9150506100ad565b5092915050565b606060458251101561026a57505060408051808201909152601681527f43616c6c2072657665727465642073696c656e746c7900000000000000000000602082015290565b600482019150818060200190518101906102849190610580565b92915050565b6000806020838503121561029d57600080fd5b823567ffffffffffffffff808211156102b557600080fd5b818501915085601f8301126102c957600080fd5b8135818111156102d857600080fd5b8660208260051b85010111156102ed57600080fd5b60209290920196919550909350505050565b60005b8381101561031a578181015183820152602001610302565b50506000910152565b6000815180845261033b8160208601602086016102ff565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156103a457603f19888603018452610392858351610323565b94509285019290850190600101610376565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126103f457600080fd5b83018035915067ffffffffffffffff82111561040f57600080fd5b60200191503681900382131561042457600080fd5b9250929050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610454576104546103b1565b604052919050565b600067ffffffffffffffff821115610476576104766103b1565b50601f01601f191660200190565b6000806040838503121561049757600080fd5b82356001600160a01b03811681146104ae57600080fd5b9150602083013567ffffffffffffffff8111156104ca57600080fd5b8301601f810185136104db57600080fd5b80356104ee6104e98261045c565b61042b565b81815286602083850101111561050357600080fd5b816020840160208301376000602083830101528093505050509250929050565b600082516105358184602087016102ff565b9190910192915050565b6020815260006105526020830184610323565b9392505050565b60006001820161057957634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561059257600080fd5b815167ffffffffffffffff8111156105a957600080fd5b8201601f810184136105ba57600080fd5b80516105c86104e98261045c565b8181528560208385010111156105dd57600080fd5b6105ee8260208301602086016102ff565b9594505050505056fea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}