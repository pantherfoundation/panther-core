{
  "address": "0x5c71fEe2E7f7B2Ca67dc621E89542C9299aba551",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "keyringVersion",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pantherStaticTree",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "keyIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newExpiry",
          "type": "uint32"
        }
      ],
      "name": "KeyExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "keyIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packedPubKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "expiry",
          "type": "uint32"
        }
      ],
      "name": "KeyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "keyIndex",
          "type": "uint16"
        }
      ],
      "name": "KeyRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProvidersKeys.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "numAllocKeys",
          "type": "uint16"
        }
      ],
      "name": "KeyringUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tillTime",
          "type": "uint32"
        }
      ],
      "name": "TreeLockUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_SALT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEYRING_VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANTHER_STATIC_TREE",
      "outputs": [
        {
          "internalType": "contract ITreeRootUpdater",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "numAllocKeys",
          "type": "uint16"
        }
      ],
      "name": "addKeyring",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct G1Point",
          "name": "pubKey",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "expiry",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "newExpiry",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "keyIndex",
          "type": "uint16"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofSiblings",
          "type": "bytes32[]"
        }
      ],
      "name": "extendKeyExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct G1Point",
          "name": "pubKey",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "expiry",
          "type": "uint32"
        }
      ],
      "name": "getKeyCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatistics",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "numKeyrings",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "totalNumRegisteredKeys",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "totalNumAllocatedKeys",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "treeLockedTillTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "allocation",
          "type": "uint16"
        }
      ],
      "name": "increaseKeyringKeyAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "keyringIds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "keyrings",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "enum ProvidersKeys.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "numKeys",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "numAllocKeys",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "registrationBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "_unused",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct G1Point",
          "name": "pubKey",
          "type": "tuple"
        }
      ],
      "name": "packPubKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        }
      ],
      "name": "reactivateKeyring",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct G1Point",
          "name": "pubKey",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "expiry",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofSiblings",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "registerKey",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "keyIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "keyIndex",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct G1Point",
          "name": "pubKey",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "expiry",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofSiblings",
          "type": "bytes32[]"
        }
      ],
      "name": "revokeKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        }
      ],
      "name": "suspendKeyring",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "keyringId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "updateKeyringOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "lockPeriod",
          "type": "uint32"
        }
      ],
      "name": "updateTreeLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0224bf0a972120ceb850a6315945d60afc630288f152a02010ed6ff56fffff38",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x5c71fEe2E7f7B2Ca67dc621E89542C9299aba551",
    "transactionIndex": 2,
    "gasUsed": "2641543",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008004000080020000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000002000000000000000000000000100000000000000008000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xd3eb90e57556fbb77a7b6163e2c91f0e41d0a64a52215badce2c14ca6f136c4b",
    "transactionHash": "0x0224bf0a972120ceb850a6315945d60afc630288f152a02010ed6ff56fffff38",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 38977646,
        "transactionHash": "0x0224bf0a972120ceb850a6315945d60afc630288f152a02010ed6ff56fffff38",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x000000000000000000000000e7f13f6bc1e7f5ca4a6c9a255124ce22c46f8ef0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c27687885920000000000000000000000000000000000000000000000000019395f303988195b00000000000000000000000000000000000000000000001a1497f577f7d7776a000000000000000000000000000000000000000000000000191d37c7c102875b00000000000000000000000000000000000000000000001a14b41ce0705d096a",
        "logIndex": 4,
        "blockHash": "0xd3eb90e57556fbb77a7b6163e2c91f0e41d0a64a52215badce2c14ca6f136c4b"
      }
    ],
    "blockNumber": 38977646,
    "cumulativeGasUsed": "2683543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    1,
    "0xAbFdb07BC6db782F9bdd6C6BA65ee40081eFA4c4"
  ],
  "numDeployments": 1,
  "solcInputHash": "aa3713622c0321d2209b36505a0e7b3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"keyringVersion\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pantherStaticTree\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"keyIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newExpiry\",\"type\":\"uint32\"}],\"name\":\"KeyExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"keyIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packedPubKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"name\":\"KeyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"keyIndex\",\"type\":\"uint16\"}],\"name\":\"KeyRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProvidersKeys.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"numAllocKeys\",\"type\":\"uint16\"}],\"name\":\"KeyringUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tillTime\",\"type\":\"uint32\"}],\"name\":\"TreeLockUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_SALT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEYRING_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANTHER_STATIC_TREE\",\"outputs\":[{\"internalType\":\"contract ITreeRootUpdater\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"numAllocKeys\",\"type\":\"uint16\"}],\"name\":\"addKeyring\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"newExpiry\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"keyIndex\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSiblings\",\"type\":\"bytes32[]\"}],\"name\":\"extendKeyExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"name\":\"getKeyCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatistics\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"numKeyrings\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalNumRegisteredKeys\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalNumAllocatedKeys\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"treeLockedTillTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"allocation\",\"type\":\"uint16\"}],\"name\":\"increaseKeyringKeyAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"keyringIds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"keyrings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum ProvidersKeys.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"numKeys\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"numAllocKeys\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"registrationBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"_unused\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"pubKey\",\"type\":\"tuple\"}],\"name\":\"packPubKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"}],\"name\":\"reactivateKeyring\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSiblings\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"registerKey\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"keyIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"keyIndex\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofSiblings\",\"type\":\"bytes32[]\"}],\"name\":\"revokeKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"}],\"name\":\"suspendKeyring\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"keyringId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"updateKeyringOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"lockPeriod\",\"type\":\"uint32\"}],\"name\":\"updateTreeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pantherprotocol Contributors\",\"details\":\"Public keys are points in the BabyJubjub elliptic curve. The contract does not check, however, if the key is a valid curve point. Since the off-chain computation of the tree updates proved by the SNARK will replace the on-chain computation in the next version, the \\\"incremental tree\\\" algorithm is not applied (\\\"incremental tree\\\" is easier for operators since `proofSiblings` unneeded as input params on tree leafs insertions/updates).\",\"kind\":\"dev\",\"methods\":{\"revokeKey(uint16,uint16,(uint256,uint256),uint32,bytes32[])\":{\"details\":\"It sets the `expiry` to 0, which is an indicator of a revoked key.\"}},\"stateVariables\":{\"_numKeyrings\":{\"details\":\"Number of keyrings added (created) so far\"},\"_totalNumAllocatedKeys\":{\"details\":\"Number of leafs reserved for public keys so far\"},\"_totalNumRegisteredKeys\":{\"details\":\"Number of public keys registered so far\"},\"_treeLockedTillTime\":{\"details\":\"(UNIX) time till when operators can't register/revoke/extend keysOwner may temporally disable the tree changes by operators to avoid the \\\"race condition\\\" (if multiple parties try to update simultaneously)\"},\"_treeRoot\":{\"details\":\"Root of the merkle tree with registered keys\"}},\"title\":\"ProvidersKeys\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"extendKeyExpiry((uint256,uint256),uint32,uint32,uint16,bytes32[])\":{\"notice\":\"Extend the key expiry time. Only the keyring operator may call.\"},\"keyringIds(uint16)\":{\"notice\":\"Mapping from key index to keyring ID\"},\"keyrings(uint16)\":{\"notice\":\"Mapping from keyring ID to Keyring data\"},\"registerKey(uint16,(uint256,uint256),uint32,bytes32[],uint8,bytes32,bytes32)\":{\"notice\":\"Register a public key. Only the keyring operator may call.\"},\"revokeKey(uint16,uint16,(uint256,uint256),uint32,bytes32[])\":{\"notice\":\"Revoke registered key. Either the operator or the owner may call.\"},\"updateKeyringOperator(uint16,address)\":{\"notice\":\"Update keyring operator. Only the (current) operator may call.\"}},\"notice\":\"It registers public keys of providers, such as KYC/KYT attesters, zone operators, data escrow (or \\\"data safe\\\") operators. Each public key is stored as a leaf of a binary merkle tree. Every time the tree is updated, this contract calls `PantherStaticTree` smart contract to notify on update of the tree root. The contract owner allocates leafs (\\\"keyring\\\") to a provider and authorizes an address that may register provider's keys. This way a provider gets the \\\"keyring\\\" where the provider may put that many keys as the owner allocated.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/ProvidersKeys.sol\":\"ProvidersKeys\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/EIP712SignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity 0.8.16;\\n\\nabstract contract EIP712SignatureVerifier {\\n    bytes private constant EIP191_VERSION = \\\"\\\\x19\\\\x01\\\";\\n\\n    string public constant EIP712_NAME = \\\"Panther Protocol\\\";\\n    string public constant EIP712_VERSION = \\\"1\\\";\\n\\n    // keccak256(bytes(\\\"PANTHER_EIP712_DOMAIN_SALT\\\"));\\n    bytes32 public constant EIP712_SALT =\\n        0x44b818e3e3a12ecf805989195d8f38e75517386006719e2dbb1443987a34db7b;\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n            )\\n        );\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(EIP712_NAME)),\\n                    keccak256(bytes(EIP712_VERSION)),\\n                    block.chainid,\\n                    address(this),\\n                    EIP712_SALT\\n                )\\n            );\\n    }\\n\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address signer) {\\n        signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA invalid signature\\\");\\n    }\\n\\n    function toTypedDataHash(bytes32 structHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    EIP191_VERSION,\\n                    getDomainSeperator(),\\n                    structHash\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6c04720d7affe307c10a1c7f369fb1d4e95bf6386b666fd739cb4c6c924c101d\",\"license\":\"BUSL-1.1\"},\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x50d471ce507ca3796ff407b52d0dffead3b4eb6c0f0afea9350f712f9c5f1416\",\"license\":\"MIT\"},\"contracts/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\n// Encoding of field elements is: X[0] * z + X[1]\\nstruct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n}\\n\\n// Verification key for SNARK\\nstruct VerifyingKey {\\n    G1Point alfa1;\\n    G2Point beta2;\\n    G2Point gamma2;\\n    G2Point delta2;\\n    G1Point[] ic;\\n}\\n\\nstruct SnarkProof {\\n    G1Point a;\\n    G2Point b;\\n    G1Point c;\\n}\\n\\nstruct PluginData {\\n    address contractAddress;\\n    bytes callData;\\n}\\n\\nstruct ElGamalCiphertext {\\n    G1Point c1;\\n    G1Point c2;\\n}\\n\\n// For MASP V0 and V1\\nstruct ZAsset {\\n    // reserved (for networkId, tokenIdPolicy. etc..)\\n    uint64 _unused;\\n    // 0x00 by default\\n    uint8 version;\\n    // Refer to Constants.sol\\n    uint8 status;\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // 0x00 - no scaling\\n    uint8 scale;\\n    // token contract address\\n    address token;\\n}\\n\\nstruct LockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint96 extAmount;\\n}\\n\",\"keccak256\":\"0xbe5feb34f2f9eb101f2f6b01290b97b0a8696bf64bed4822bbffc65b12b07aff\",\"license\":\"MIT\"},\"contracts/common/UtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-23 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.16;\\n\\nlibrary UtilsLib {\\n    function safe24(uint256 n) internal pure returns (uint24) {\\n        require(n < 2**24, \\\"UNSAFE24\\\");\\n        return uint24(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        uint256 t = block.timestamp;\\n        require(t < 2**32, \\\"UNSAFE32TIME\\\");\\n        return uint32(t);\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        uint256 b = block.number;\\n        require(b < 2**32, \\\"UNSAFE32BLOCK\\\");\\n        return uint32(b);\\n    }\\n\\n    function revertZeroAddress(address account) internal pure {\\n        require(account != address(0), \\\"UNEXPECTED_ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x76612fc20a4245d01695ef8b1afccb9376bc61b465d5692785145ce8424d2295\",\"license\":\"MIT\"},\"contracts/protocol/ProvidersKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity 0.8.16;\\n\\nimport \\\"./pantherForest/interfaces/ITreeRootGetter.sol\\\";\\nimport \\\"./pantherForest/interfaces/ITreeRootUpdater.sol\\\";\\n\\nimport \\\"../common/UtilsLib.sol\\\";\\nimport \\\"./errMsgs/ProvidersKeysErrMsgs.sol\\\";\\nimport \\\"./crypto/BabyJubJub.sol\\\";\\nimport \\\"./crypto/PoseidonHashers.sol\\\";\\n\\nimport \\\"./providersKeys/ProvidersKeysSignatureVerifier.sol\\\";\\nimport \\\"./pantherForest/merkleTrees/BinaryUpdatableTree.sol\\\";\\nimport { PROVIDERS_KEYS_STATIC_LEAF_INDEX } from \\\"./pantherForest/Constants.sol\\\";\\nimport { SIXTEEN_LEVELS, SIXTEEN_LEVEL_EMPTY_TREE_ROOT, ZERO_VALUE } from \\\"./pantherForest/zeroTrees/Constants.sol\\\";\\n\\nimport \\\"../common/ImmutableOwnable.sol\\\";\\nimport { G1Point } from \\\"../common/Types.sol\\\";\\n\\n/**\\n * @title ProvidersKeys\\n * @author Pantherprotocol Contributors\\n * @notice It registers public keys of providers, such as KYC/KYT attesters,\\n * zone operators, data escrow (or \\\"data safe\\\") operators.\\n * Each public key is stored as a leaf of a binary merkle tree. Every time the\\n * tree is updated, this contract calls `PantherStaticTree` smart contract to\\n * notify on update of the tree root.\\n * The contract owner allocates leafs (\\\"keyring\\\") to a provider and authorizes\\n * an address that may register provider's keys.\\n * This way a provider gets the \\\"keyring\\\" where the provider may put that many\\n * keys as the owner allocated.\\n * @dev Public keys are points in the BabyJubjub elliptic curve. The contract\\n * does not check, however, if the key is a valid curve point.\\n * Since the off-chain computation of the tree updates proved by the SNARK will\\n * replace the on-chain computation in the next version, the \\\"incremental tree\\\"\\n * algorithm is not applied (\\\"incremental tree\\\" is easier for operators since\\n * `proofSiblings` unneeded as input params on tree leafs insertions/updates).\\n */\\ncontract ProvidersKeys is\\n    ProvidersKeysSignatureVerifier,\\n    BinaryUpdatableTree,\\n    ImmutableOwnable,\\n    ITreeRootGetter\\n{\\n    // solhint-disable var-name-mixedcase\\n\\n    uint256 private KEYS_TREE_DEPTH = SIXTEEN_LEVELS;\\n    uint16 private constant MAX_KEYS = uint16(2**SIXTEEN_LEVELS - 1);\\n\\n    uint32 private REVOKED_KEY_EXPIRY = 0;\\n    uint256 private MAX_TREE_LOCK_PERIOD = 30 days;\\n\\n    ITreeRootUpdater public immutable PANTHER_STATIC_TREE;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /// @notice keyring status\\n    enum STATUS {\\n        UNDEFINED,\\n        ACTIVE,\\n        SUSPENDED\\n    }\\n\\n    /// @notice keyring parameters\\n    struct Keyring {\\n        address operator;\\n        STATUS status;\\n        uint16 numKeys;\\n        uint16 numAllocKeys;\\n        uint32 registrationBlock;\\n        uint24 _unused;\\n    }\\n\\n    /// @notice Mapping from keyring ID to Keyring data\\n    mapping(uint16 => Keyring) public keyrings;\\n\\n    /// @notice Mapping from key index to keyring ID\\n    mapping(uint16 => uint16) public keyringIds;\\n\\n    /// @dev Number of keyrings added (created) so far\\n    uint16 private _numKeyrings;\\n\\n    /// @dev Number of public keys registered so far\\n    uint16 private _totalNumRegisteredKeys;\\n\\n    /// @dev Number of leafs reserved for public keys so far\\n    uint16 private _totalNumAllocatedKeys;\\n\\n    /// @dev (UNIX) time till when operators can't register/revoke/extend keys\\n    /// @dev Owner may temporally disable the tree changes by operators to avoid\\n    /// the \\\"race condition\\\" (if multiple parties try to update simultaneously)\\n    uint32 private _treeLockedTillTime;\\n\\n    /// @dev Root of the merkle tree with registered keys\\n    bytes32 private _treeRoot;\\n\\n    event KeyRegistered(\\n        uint16 indexed keyringId,\\n        uint16 indexed keyIndex,\\n        bytes32 packedPubKey,\\n        uint32 expiry\\n    );\\n    event KeyExtended(\\n        uint16 indexed keyringId,\\n        uint16 indexed keyIndex,\\n        uint32 newExpiry\\n    );\\n    event KeyRevoked(uint16 indexed keyringId, uint16 indexed keyIndex);\\n\\n    event KeyringUpdated(\\n        uint16 indexed keyringId,\\n        address operator,\\n        STATUS status,\\n        uint16 numAllocKeys\\n    );\\n\\n    event TreeLockUpdated(uint32 tillTime);\\n\\n    constructor(\\n        address _owner,\\n        uint8 keyringVersion,\\n        address pantherStaticTree\\n    ) ImmutableOwnable(_owner) ProvidersKeysSignatureVerifier(keyringVersion) {\\n        require(pantherStaticTree != address(0), ERR_INIT_CONTRACT);\\n\\n        // trusted contract - no reentrancy guard needed\\n        // slither-disable-next-line unchecked-transfer,reentrancy-events\\n        PANTHER_STATIC_TREE = ITreeRootUpdater(pantherStaticTree);\\n    }\\n\\n    modifier whenTreeUnlocked() {\\n        _requireTreeIsUnlocked();\\n        _;\\n    }\\n\\n    modifier keyInKeyring(uint16 keyIndex, uint16 keyringId) {\\n        require(keyringIds[keyIndex] == keyringId, ERR_KEY_IS_NOT_IN_KEYRING);\\n        _;\\n    }\\n\\n    function getStatistics()\\n        external\\n        view\\n        returns (\\n            uint16 numKeyrings,\\n            uint16 totalNumRegisteredKeys,\\n            uint16 totalNumAllocatedKeys,\\n            uint32 treeLockedTillTime\\n        )\\n    {\\n        numKeyrings = _numKeyrings;\\n        totalNumRegisteredKeys = _totalNumRegisteredKeys;\\n        totalNumAllocatedKeys = _totalNumAllocatedKeys;\\n        treeLockedTillTime = _treeLockedTillTime;\\n    }\\n\\n    function getRoot() external view returns (bytes32) {\\n        return _treeRoot == bytes32(0) ? zeroRoot() : _treeRoot;\\n    }\\n\\n    // @dev It does NOT check if the pubKey is a point on the BabyJubJub curve\\n    function packPubKey(G1Point memory pubKey) public pure returns (bytes32) {\\n        // Coordinates must be in the SNARK field\\n        require(\\n            BabyJubJub.isG1PointLowerThanFieldSize([pubKey.x, pubKey.y]),\\n            ERR_NOT_IN_FIELD\\n        );\\n        return BabyJubJub.pointPack(pubKey);\\n    }\\n\\n    function getKeyCommitment(G1Point memory pubKey, uint32 expiry)\\n        public\\n        pure\\n        returns (bytes32 commitment)\\n    {\\n        // Next call reverts if the input is not in the SNARK field\\n        commitment = PoseidonHashers.poseidonT4(\\n            [bytes32(pubKey.x), bytes32(pubKey.y), bytes32(uint256(expiry))]\\n        );\\n    }\\n\\n    /// @notice Register a public key. Only the keyring operator may call.\\n    function registerKey(\\n        uint16 keyringId,\\n        G1Point memory pubKey,\\n        uint32 expiry,\\n        bytes32[] memory proofSiblings,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenTreeUnlocked returns (uint16 keyIndex) {\\n        require(expiry > _timeNow(), ERR_INVALID_KEY_EXPIRY);\\n\\n        bytes32 keyPacked = BabyJubJub.pointPack(pubKey);\\n        address operator = recoverOperator(\\n            keyringId,\\n            keyPacked,\\n            expiry,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        Keyring memory keyring = _getOperatorActiveKeyringOrRevert(\\n            keyringId,\\n            operator\\n        );\\n\\n        require(\\n            keyring.numAllocKeys >= keyring.numKeys,\\n            ERR_INSUFFICIENT_ALLOCATION\\n        );\\n\\n        bytes32 commitment = getKeyCommitment(pubKey, expiry);\\n\\n        keyIndex = _totalNumRegisteredKeys;\\n        keyringIds[keyIndex] = keyringId;\\n\\n        _updateProvidersKeysAndStaticTreeRoots(\\n            ZERO_VALUE,\\n            commitment,\\n            keyIndex,\\n            proofSiblings\\n        );\\n\\n        _totalNumRegisteredKeys = ++keyIndex;\\n\\n        keyring.numKeys++;\\n        keyrings[keyringId] = keyring;\\n\\n        emit KeyRegistered(keyringId, keyIndex, keyPacked, expiry);\\n    }\\n\\n    /// @notice Extend the key expiry time. Only the keyring operator may call.\\n    function extendKeyExpiry(\\n        G1Point memory pubKey,\\n        uint32 expiry,\\n        uint32 newExpiry,\\n        uint16 keyIndex,\\n        bytes32[] memory proofSiblings\\n    ) external whenTreeUnlocked {\\n        require(\\n            newExpiry > _timeNow() && newExpiry > expiry,\\n            ERR_INVALID_KEY_EXPIRY\\n        );\\n        uint16 keyringId = keyringIds[keyIndex];\\n        _getOperatorActiveKeyringOrRevert(keyringId, msg.sender);\\n\\n        bytes32 commitment = getKeyCommitment(pubKey, expiry);\\n        bytes32 newCommitment = getKeyCommitment(pubKey, newExpiry);\\n\\n        _updateProvidersKeysAndStaticTreeRoots(\\n            commitment,\\n            newCommitment,\\n            keyIndex,\\n            proofSiblings\\n        );\\n\\n        emit KeyExtended(keyringId, keyIndex, newExpiry);\\n    }\\n\\n    /// @notice Update keyring operator. Only the (current) operator may call.\\n    function updateKeyringOperator(uint16 keyringId, address newOperator)\\n        external\\n    {\\n        require(newOperator != address(0), ERR_ZERO_OPERATOR_ADDRESS);\\n\\n        Keyring memory keyring = _getOperatorActiveKeyringOrRevert(\\n            keyringId,\\n            msg.sender\\n        );\\n        require(newOperator != msg.sender, ERR_SAME_OPERATOR);\\n\\n        keyring.operator = newOperator;\\n        keyrings[keyringId] = keyring;\\n\\n        emit KeyringUpdated(\\n            keyringId,\\n            keyring.operator,\\n            keyring.status,\\n            keyring.numAllocKeys\\n        );\\n    }\\n\\n    /// @notice Revoke registered key. Either the operator or the owner may call.\\n    /// @dev It sets the `expiry` to 0, which is an indicator of a revoked key.\\n    function revokeKey(\\n        uint16 keyringId,\\n        uint16 keyIndex,\\n        G1Point memory pubKey,\\n        uint32 expiry,\\n        bytes32[] calldata proofSiblings\\n    ) external keyInKeyring(keyIndex, keyringId) {\\n        Keyring memory keyring = _getActiveKeyringOrRevert(keyringId);\\n\\n        if (keyring.operator == msg.sender) {\\n            _requireTreeIsUnlocked();\\n        } else {\\n            require(OWNER == msg.sender, ERR_UNAUTHORIZED_OPERATOR);\\n        }\\n\\n        bytes32 commitment = getKeyCommitment(pubKey, expiry);\\n\\n        bytes32 newCommitment = getKeyCommitment(pubKey, REVOKED_KEY_EXPIRY);\\n\\n        _updateProvidersKeysAndStaticTreeRoots(\\n            commitment,\\n            newCommitment,\\n            keyIndex,\\n            proofSiblings\\n        );\\n\\n        emit KeyRevoked(keyringId, keyIndex);\\n    }\\n\\n    /* ========== ONLY FOR OWNER FUNCTIONS ========== */\\n\\n    function addKeyring(address operator, uint16 numAllocKeys)\\n        external\\n        onlyOwner\\n    {\\n        require(operator != address(0), ERR_ZERO_OPERATOR_ADDRESS);\\n\\n        uint16 numAllocatedKeys = _totalNumAllocatedKeys;\\n        numAllocatedKeys += numAllocKeys;\\n        require(MAX_KEYS >= numAllocatedKeys, ERR_TOO_HIGH_ALLOCATION);\\n\\n        uint16 keyringId = _getNextKeyringId();\\n        keyrings[keyringId] = Keyring({\\n            operator: operator,\\n            status: STATUS.ACTIVE,\\n            numKeys: 0,\\n            numAllocKeys: numAllocKeys,\\n            registrationBlock: UtilsLib.safe32BlockNow(),\\n            _unused: 0\\n        });\\n\\n        _numKeyrings = keyringId;\\n        _totalNumAllocatedKeys = numAllocatedKeys;\\n\\n        emit KeyringUpdated(keyringId, operator, STATUS.ACTIVE, numAllocKeys);\\n    }\\n\\n    function suspendKeyring(uint16 keyringId) external onlyOwner {\\n        Keyring memory keyring = _getActiveKeyringOrRevert(keyringId);\\n\\n        _totalNumAllocatedKeys -= _getUnusedKeyringAllocation(keyring);\\n\\n        keyrings[keyringId] = _suspendKeyring(keyring);\\n\\n        emit KeyringUpdated(\\n            keyringId,\\n            keyring.operator,\\n            keyring.status,\\n            keyring.numAllocKeys\\n        );\\n    }\\n\\n    function reactivateKeyring(uint16 keyringId) external onlyOwner {\\n        Keyring memory keyring = keyrings[keyringId];\\n        require(\\n            keyring.status == STATUS.SUSPENDED,\\n            ERR_KEYRING_ALREADY_ACTIVATED\\n        );\\n\\n        uint16 numAllocatedKeys = _totalNumAllocatedKeys;\\n        // Unused allocation before suspending. To be allocated again.\\n        uint16 keyringUnusedKeys = _getUnusedKeyringAllocation(keyring);\\n        numAllocatedKeys += keyringUnusedKeys;\\n\\n        // When there is not enough empty keys to give back to keyring\\n        if (numAllocatedKeys > MAX_KEYS) {\\n            keyringUnusedKeys =\\n                MAX_KEYS -\\n                (numAllocatedKeys - keyringUnusedKeys);\\n\\n            numAllocatedKeys = MAX_KEYS;\\n        }\\n\\n        keyring.status = STATUS.ACTIVE;\\n        keyrings[keyringId] = keyring;\\n        _totalNumAllocatedKeys = numAllocatedKeys;\\n\\n        emit KeyringUpdated(\\n            keyringId,\\n            keyring.operator,\\n            keyring.status,\\n            keyring.numAllocKeys\\n        );\\n    }\\n\\n    function increaseKeyringKeyAllocation(uint16 keyringId, uint16 allocation)\\n        external\\n        onlyOwner\\n    {\\n        Keyring memory keyring = _getActiveKeyringOrRevert(keyringId);\\n        uint16 numAllocatedKeys = _totalNumAllocatedKeys;\\n        numAllocatedKeys += allocation;\\n        require(MAX_KEYS >= numAllocatedKeys, ERR_TOO_HIGH_ALLOCATION);\\n\\n        uint16 newKeyringAllocation = keyring.numAllocKeys + allocation;\\n\\n        keyrings[keyringId].numAllocKeys = newKeyringAllocation;\\n        _totalNumAllocatedKeys = numAllocatedKeys;\\n\\n        emit KeyringUpdated(\\n            keyringId,\\n            keyring.operator,\\n            keyring.status,\\n            keyring.numAllocKeys\\n        );\\n    }\\n\\n    function updateTreeLock(uint32 lockPeriod) external onlyOwner {\\n        require(\\n            lockPeriod <= MAX_TREE_LOCK_PERIOD,\\n            ERR_TREE_LOCK_ALREADY_UPDATED\\n        );\\n        uint32 timestamp = UtilsLib.safe32(_timeNow() + lockPeriod);\\n        _treeLockedTillTime = timestamp;\\n\\n        emit TreeLockUpdated(timestamp);\\n    }\\n\\n    /* ========== INTERNAL & PRIVATE FUNCTIONS ========== */\\n\\n    function hash(bytes32[2] memory input)\\n        internal\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        // Next call reverts if the input is not in the SNARK field\\n        return PoseidonHashers.poseidonT3(input);\\n    }\\n\\n    function zeroRoot() internal pure override returns (bytes32) {\\n        return SIXTEEN_LEVEL_EMPTY_TREE_ROOT;\\n    }\\n\\n    function _getNextKeyringId() private view returns (uint16) {\\n        return _numKeyrings + 1;\\n    }\\n\\n    function _getActiveKeyringOrRevert(uint16 keyringId)\\n        private\\n        view\\n        returns (Keyring memory keyring)\\n    {\\n        keyring = keyrings[keyringId];\\n\\n        require(keyring.operator != address(0), ERR_KEYRING_NOT_EXISTS);\\n        require(keyring.status == STATUS.ACTIVE, ERR_KEYRING_NOT_ACTIVATED);\\n    }\\n\\n    function _getOperatorActiveKeyringOrRevert(\\n        uint16 keyringId,\\n        address operator\\n    ) private view returns (Keyring memory keyring) {\\n        keyring = _getActiveKeyringOrRevert(keyringId);\\n        require(keyring.operator == operator, ERR_UNAUTHORIZED_OPERATOR);\\n    }\\n\\n    function _suspendKeyring(Keyring memory keyring)\\n        private\\n        pure\\n        returns (Keyring memory)\\n    {\\n        keyring.status = STATUS.SUSPENDED;\\n        return keyring;\\n    }\\n\\n    function _getUnusedKeyringAllocation(Keyring memory keyring)\\n        private\\n        pure\\n        returns (uint16)\\n    {\\n        return keyring.numAllocKeys - keyring.numKeys;\\n    }\\n\\n    function _updateProvidersKeysAndStaticTreeRoots(\\n        bytes32 leaf,\\n        bytes32 newLeaf,\\n        uint16 keyIndex,\\n        bytes32[] memory proofSiblings\\n    ) private {\\n        require(\\n            proofSiblings.length == KEYS_TREE_DEPTH,\\n            ERR_INCORRECT_SIBLINGS_SIZE\\n        );\\n\\n        bytes32 updatedRoot = update(\\n            _treeRoot,\\n            leaf,\\n            newLeaf,\\n            keyIndex,\\n            proofSiblings\\n        );\\n\\n        _treeRoot = updatedRoot;\\n\\n        // trusted contract - no reentrancy guard needed\\n        // slither-disable-next-line unchecked-transfer,reentrancy-events\\n        PANTHER_STATIC_TREE.updateRoot(\\n            updatedRoot,\\n            PROVIDERS_KEYS_STATIC_LEAF_INDEX\\n        );\\n    }\\n\\n    function _requireTreeIsUnlocked() private view {\\n        require(_timeNow() >= _treeLockedTillTime, ERR_TREE_IS_LOCKED);\\n    }\\n\\n    function _timeNow() private view returns (uint32) {\\n        // Time comparison accuracy is acceptable\\n        // slither-disable-next-line timestamp\\n        return UtilsLib.safe32TimeNow();\\n    }\\n}\\n\",\"keccak256\":\"0xfc231fc0e5ed33817e09adf2a71d9153555bc2084529907da7efaf4cf8f4eec4\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/crypto/BabyJubJub.sol\":{\"content\":\"// SPDX-License-Identifier: GPL\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// Implementer name - yondonfu\\n// Link to the implementation - https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\\npragma solidity ^0.8.16;\\nimport \\\"../../common/Types.sol\\\";\\nimport { FIELD_SIZE } from \\\"./SnarkConstants.sol\\\";\\n\\nlibrary BabyJubJub {\\n    // Curve parameters\\n    // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\\n    // A = 168700\\n    uint256 public constant A = 0x292FC;\\n    // D = 168696\\n    uint256 public constant D = 0x292F8;\\n    // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n    // slither-disable-next-line too-many-digits\\n    uint256 public constant Q =\\n        0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\\n\\n    // @dev Base point generates the subgroup of points P of Baby Jubjub satisfying l * P = O.\\n    // That is, it generates the set of points of order l and origin O.\\n    // slither-disable-next-line too-many-digits\\n    uint256 public constant BASE8_X =\\n        5299619240641551281634865583518297030282874472190772894086521144482721001553;\\n    // slither-disable-next-line too-many-digits\\n    uint256 public constant BASE8_Y =\\n        16950150798460657717958625567821834550301663161624707787222815936182638968203;\\n\\n    // pm1d2 = (SNARK_FIELD - 1) >> 1 // same as `negative_one / 2\\n    // slither-disable-next-line too-many-digits\\n    uint256 public constant PM1D2 =\\n        10944121435919637611123202872628637544274182200208017171849102093287904247808;\\n\\n    // TODO: remove dependency on BabyJubJub as a standalone contract\\n    function pointPack(G1Point memory point)\\n        internal\\n        pure\\n        returns (bytes32 _packed)\\n    {\\n        _packed = bytes32(point.y);\\n\\n        if (point.x > PM1D2) {\\n            _packed = bytes32(\\n                point.y |\\n                    0x8000000000000000000000000000000000000000000000000000000000000000\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Add 2 points on baby jubjub curve\\n     * Formulae for adding 2 points on a twisted Edwards curve:\\n     * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\\n     * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\\n     */\\n    function pointAdd(G1Point memory g1, G1Point memory g2)\\n        internal\\n        view\\n        returns (G1Point memory)\\n    {\\n        uint256 x3 = 0;\\n        uint256 y3 = 0;\\n        if (g1.x == 0 && g1.y == 0) {\\n            return G1Point(x3, y3);\\n        }\\n\\n        if (g2.x == 0 && g1.y == 0) {\\n            return G1Point(x3, y3);\\n        }\\n\\n        uint256 x1x2 = mulmod(g1.x, g2.x, Q);\\n        uint256 y1y2 = mulmod(g1.y, g2.y, Q);\\n        uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\\n        uint256 x3Num = addmod(mulmod(g1.x, g2.y, Q), mulmod(g1.y, g2.x, Q), Q);\\n        uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\\n\\n        x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\\n        y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\\n        return G1Point(x3, y3);\\n    }\\n\\n    /**\\n     * @dev Perform modular subtraction\\n     */\\n    function submod(\\n        uint256 _a,\\n        uint256 _b,\\n        uint256 _mod\\n    ) internal pure returns (uint256) {\\n        uint256 aNN = _a;\\n\\n        if (_a <= _b) {\\n            aNN += _mod;\\n        }\\n\\n        return addmod(aNN - _b, 0, _mod);\\n    }\\n\\n    /**\\n     * @dev Compute modular inverse of a number\\n     */\\n    function inverse(uint256 _a) internal view returns (uint256) {\\n        // We can use Euler's theorem instead of the extended Euclidean algorithm\\n        // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\\n        return expmod(_a, Q - 2, Q);\\n    }\\n\\n    /**\\n     * @dev Helper function to call the bigModExp precompile\\n     */\\n    function expmod(\\n        uint256 _b,\\n        uint256 _e,\\n        uint256 _m\\n    ) internal view returns (uint256 o) {\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            let memPtr := mload(0x40)\\n            mstore(memPtr, 0x20) // Length of base _b\\n            mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\\n            mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\\n            mstore(add(memPtr, 0x60), _b) // Base _b\\n            mstore(add(memPtr, 0x80), _e) // Exponent _e\\n            mstore(add(memPtr, 0xa0), _m) // Modulus _m\\n\\n            // The bigModExp precompile is at 0x05\\n            let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                o := mload(memPtr)\\n            }\\n        }\\n        // solhint-enable no-inline-assembly\\n    }\\n\\n    function mulPointEscalar(G1Point memory point, uint256 scalar)\\n        internal\\n        view\\n        returns (G1Point memory r)\\n    {\\n        r.x = 0;\\n        r.y = 1;\\n\\n        uint256 rem = scalar;\\n        G1Point memory exp = point;\\n\\n        while (rem != uint256(0)) {\\n            if ((rem & 1) == 1) {\\n                r = pointAdd(r, exp);\\n            }\\n            exp = pointAdd(exp, exp);\\n            rem = rem >> 1;\\n        }\\n        r.x = r.x % Q;\\n        r.y = r.y % Q;\\n\\n        return r;\\n    }\\n\\n    function isG1PointLowerThanFieldSize(uint256[2] memory point)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return point[0] <= FIELD_SIZE && point[1] <= FIELD_SIZE;\\n    }\\n}\\n\",\"keccak256\":\"0x97405a0dad4e7cbc9dd13227c9e832793e065120a034719d3cfb6c15dd4693fb\",\"license\":\"GPL\"},\"contracts/protocol/crypto/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// This is a stub to keep solc happy; the actual code is generated\\n// using poseidon_gencontract.js from circomlibjs.\\n\\nlibrary PoseidonT3 {\\n    function poseidon(bytes32[2] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT4 {\\n    function poseidon(bytes32[3] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT5 {\\n    function poseidon(bytes32[4] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(bytes32[5] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x85ba9420af1dcb1218b655c16044d163c9b070ff5913da034a9961e0e8c5aaf2\",\"license\":\"MIT\"},\"contracts/protocol/crypto/PoseidonHashers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-23 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\nimport { FIELD_SIZE } from \\\"./SnarkConstants.sol\\\";\\nimport \\\"./Poseidon.sol\\\";\\n\\nlibrary PoseidonHashers {\\n    string private constant ERR_INPUT_NOT_IN_FIELD =\\n        \\\"PoseidonHasher: input not in field\\\";\\n\\n    function poseidonT3(bytes32[2] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE && uint256(input[1]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT3.poseidon(input);\\n    }\\n\\n    function poseidonT4(bytes32[3] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT4.poseidon(input);\\n    }\\n\\n    function poseidonT5(bytes32[4] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT5.poseidon(input);\\n    }\\n\\n    function poseidonT6(bytes32[5] memory input)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE &&\\n                uint256(input[4]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT6.poseidon(input);\\n    }\\n}\\n\",\"keccak256\":\"0xd1729091f690c784f4666c9ce46f8c6441c8b364645eb0dfe5d09a31ac9ed84f\",\"license\":\"MIT\"},\"contracts/protocol/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable var-name-mixedcase\\npragma solidity ^0.8.16;\\n\\n// @dev Order of alt_bn128 and the field prime of Baby Jubjub and Poseidon hash\\nuint256 constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n// @dev Field prime of alt_bn128\\nuint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n// FIXME: make MAGICAL_CONSTRAINT the public input (var, not const) - it MUST have random value on every invocation\\n// @dev Circuit extra public input as work-around for recently found groth16 vulnerability\\nuint256 constant MAGICAL_CONSTRAINT = 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00;\\n\",\"keccak256\":\"0xc5545b99ebafdce4488581390f9466e1baf2ab9bb2107cb6614b34c101183de5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/ProvidersKeysErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\nstring constant ERR_INIT_CONTRACT = \\\"PK:init\\\";\\n\\nstring constant ERR_NOT_IN_FIELD = \\\"PK:E01\\\";\\nstring constant ERR_INCORRECT_SIBLINGS_SIZE = \\\"PK:E02\\\";\\n\\nstring constant ERR_TREE_LOCK_ALREADY_UPDATED = \\\"ZAR:E05\\\";\\nstring constant ERR_TREE_IS_LOCKED = \\\"PK:E06\\\";\\n\\nstring constant ERR_INSUFFICIENT_ALLOCATION = \\\"PK:E10\\\";\\nstring constant ERR_TOO_HIGH_ALLOCATION = \\\"PK:E11\\\";\\n\\nstring constant ERR_KEYRING_ALREADY_ACTIVATED = \\\"PK:15\\\";\\nstring constant ERR_KEYRING_NOT_EXISTS = \\\"PK:E16\\\";\\nstring constant ERR_KEYRING_NOT_ACTIVATED = \\\"PK:E17\\\";\\n\\nstring constant ERR_UNAUTHORIZED_OPERATOR = \\\"PK:E20\\\";\\nstring constant ERR_ZERO_OPERATOR_ADDRESS = \\\"PK:E21\\\";\\nstring constant ERR_SAME_OPERATOR = \\\"PK:E22\\\";\\n\\nstring constant ERR_REVOKED_KEY = \\\"PK:E25\\\";\\nstring constant ERR_INVALID_KEY_EXPIRY = \\\"PK:E26\\\";\\nstring constant ERR_KEY_IS_NOT_IN_KEYRING = \\\"PK:E27\\\";\\n\",\"keccak256\":\"0xf8268f7ddbdc2b2bffc61b475b5fdf7c7f1be740bfb50f2a588af85484ade371\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-23 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\n// `PantherForest` tree leafs indices (leafs store specific merkle trees roots)\\nuint256 constant TAXI_TREE_FOREST_LEAF_INDEX = 0;\\nuint256 constant BUS_TREE_FOREST_LEAF_INDEX = 1;\\nuint256 constant FERRY_TREE_FOREST_LEAF_INDEX = 2;\\nuint256 constant STATIC_TREE_FOREST_LEAF_INDEX = 3;\\n\\n// `PantherStaticTree` leafs indices (leafs store specific merkle trees roots)\\nuint256 constant ZASSET_STATIC_LEAF_INDEX = 0;\\nuint256 constant ZACCOUNT_BLACKLIST_STATIC_LEAF_INDEX = 1;\\nuint256 constant ZNETWORK_STATIC_LEAF_INDEX = 2;\\nuint256 constant ZZONE_STATIC_LEAF_INDEX = 3;\\nuint256 constant PROVIDERS_KEYS_STATIC_LEAF_INDEX = 4;\\n\",\"keccak256\":\"0x418cf4af2f447d34f87043ba87b1c1901a79e4a15902fd9a26f0ee480d410674\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/interfaces/ITreeRootGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\ninterface ITreeRootGetter {\\n    function getRoot() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc6bb37fe4059cfe13c15f4c1d324b2de68a48348e136bf6cc72421f4721dc21d\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/interfaces/ITreeRootUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\ninterface ITreeRootUpdater {\\n    function updateRoot(bytes32 updatedLeaf, uint256 leafIndex) external;\\n}\\n\",\"keccak256\":\"0x4370b8a771095734709c5a2d7d920bc550beb91706364f2bdb8cb451cc539dbb\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/merkleTrees/BinaryUpdatableTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// @notice The \\\"binary binary tree\\\" populated with zero leaf values\\n\\n/**\\n * @title BinaryIncrementalUpdatableMerkleTree\\n * @notice\\n * @dev\\n */\\nabstract contract BinaryUpdatableTree {\\n    /**\\n     * @dev Update an existing leaf\\n     * @param curRoot current merkle root.\\n     * @param leaf Leaf to be updated.\\n     * @param newLeaf New leaf.\\n     * @param leafIndex leafIndex\\n     * @param proofSiblings Path of the proof of membership.\\n     * @return _newRoot The new root after updating the tree\\n     */\\n    function update(\\n        bytes32 curRoot,\\n        bytes32 leaf,\\n        bytes32 newLeaf,\\n        uint256 leafIndex,\\n        bytes32[] memory proofSiblings\\n    ) internal pure returns (bytes32 _newRoot) {\\n        require(newLeaf != leaf, \\\"BIUT: New leaf cannot be equal the old one\\\");\\n        require(\\n            verify(curRoot, leaf, leafIndex, proofSiblings),\\n            \\\"BIUT: Leaf is not part of the tree\\\"\\n        );\\n\\n        _newRoot = newLeaf;\\n        uint256 proofPathIndice;\\n\\n        // using `proofSiblings[]` length as the tree dept\\n        for (uint256 i = 0; i < proofSiblings.length; ) {\\n            // getting the bit at position `i` and check if it's 0 or 1\\n            proofPathIndice = (leafIndex >> i) & 1;\\n\\n            if (proofPathIndice == 0) {\\n                _newRoot = hash([_newRoot, proofSiblings[i]]);\\n            } else {\\n                _newRoot = hash([proofSiblings[i], _newRoot]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verify if the path is correct and the leaf is part of the tree.\\n     * @param curRoot current merkle root.\\n     * @param leaf Leaf to be updated.\\n     * @param leafIndex leafIndex\\n     * @param proofSiblings Path of the proof of membership.\\n     * @return True or false.\\n     */\\n    function verify(\\n        bytes32 curRoot,\\n        bytes32 leaf,\\n        uint256 leafIndex,\\n        bytes32[] memory proofSiblings\\n    ) internal pure returns (bool) {\\n        // equal to 2**proofSiblings.length\\n        uint256 leavesNum = 1 << proofSiblings.length;\\n        require(leafIndex < leavesNum, \\\"BIUT: invalid leaf index\\\");\\n\\n        bytes32 _hash = leaf;\\n        uint256 proofPathIndice;\\n\\n        // using `proofSiblings[]` length as the tree dept\\n        for (uint256 i = 0; i < proofSiblings.length; ) {\\n            // getting the bit at position `i` and check if it's 0 or 1\\n            proofPathIndice = (leafIndex >> i) & 1;\\n\\n            if (proofPathIndice == 0) {\\n                _hash = hash([_hash, proofSiblings[i]]);\\n            } else {\\n                _hash = hash([proofSiblings[i], _hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return curRoot == 0 ? _hash == zeroRoot() : _hash == curRoot;\\n    }\\n\\n    function zeroRoot() internal pure virtual returns (bytes32);\\n\\n    function hash(bytes32[2] memory input)\\n        internal\\n        pure\\n        virtual\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x420ed9477324ce5cdf04329938a7ec1e4687150b9bd273fc0e5f9123e1fa375d\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/zeroTrees/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-23 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\n/// @dev Leaf zero value (`keccak256(\\\"Pantherprotocol\\\")%FIELD_SIZE`)\\nbytes32 constant ZERO_VALUE = bytes32(\\n    uint256(0x0667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d)\\n);\\n\\n// The roots of empty trees follow.\\n// An \\\"empty\\\" tree is a binary merkle tree of a given number of levels bellow\\n// the root (depth), fully populated with ZERO_VALUE leafs, with the `poseidon`\\n// hash function applied.\\n// (computed by `../../../../lib/binaryMerkleZerosContractGenerator.ts`)\\n\\nuint256 constant SIX_LEVELS = 6;\\n/// @dev Root of the binary merkle SIX_LEVELS tree with ZERO_VALUE leafs\\n// Level 0: ZERO_VALUE\\n// Level 1: 0x232fc5fea3994c77e07e1bab1ec362727b0f71f291c17c34891dd4faf1457bd4\\n// Level 2: 0x077851cf613fd96280795a3cabc89663f524b1b545a3b1c7c79130b0f7d251c8\\n// Level 3: 0x1d79fd0bc46f7ca934dbcd3386a06f03c43f497851b3815ee726e7f9b26e504c\\n// Level 4: 0x05c0c15753806f506f64c18bf07116542451822479c4a89305cd4eb7ee94c800\\n// Level 5: 0x2b56fd5e780ebebdacdd27e6464cf01aac089461a998814974a7504aabb2023f\\nbytes32 constant SIX_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x2e99dc37b0a4f107b20278c26562b55df197e0b3eb237ec672f4cf729d159b69)\\n);\\n\\nuint256 constant SIXTEEN_LEVELS = 16;\\n/// @dev Root of the binary merkle SIXTEEN_LEVELS tree with ZERO_VALUE leafs\\n// Level 6:  SIX_LEVEL_EMPTY_TREE_ROOT\\n// Level 7:  0x225624653ac89fe211c0c3d303142a4caf24eb09050be08c33af2e7a1e372a0f\\n// Level 8:  0x276c76358db8af465e2073e4b25d6b1d83f0b9b077f8bd694deefe917e2028d7\\n// Level 9:  0x09df92f4ade78ea54b243914f93c2da33414c22328a73274b885f32aa9dea718\\n// Level 10: 0x1c78b565f2bfc03e230e0cf12ecc9613ab8221f607d6f6bc2a583ccd690ecc58\\n// Level 11: 0x2879d62c83d6a3af05c57a4aee11611a03edec5ff8860b07de77968f47ff1c5f\\n// Level 12: 0x28ad970560de01e93b613aabc930fcaf087114743909783e3770a1ed07c2cde6\\n// Level 13: 0x27ca60def9dd0603074444029cbcbeaa9dbe77668479ac1db738bb892d9f3b6d\\n// Level 14: 0x28e4c1e90bbfa69de93abf6cbdc7cd1c0753a128e83b2b3afe34e0471a13ff55\\n// Level 15: 0x1b89c44a9f153266ad5bf754d4b252c26acba7d21fc661b94dc0618c6a82f49c\\nbytes32 constant SIXTEEN_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x0a5e5ec37bd8f9a21a1c2192e7c37d86bf975d947c2b38598b00babe567191c9)\\n);\\n\\nuint256 constant TWENTY_LEVELS = 20;\\n/// @dev Root of the merkle binary TWENTY_LEVELS tree with ZERO_VALUE leafs\\n// Level 16: SIXTEEN_LEVEL_EMPTY_TREE_ROOT\\n// Level 17: 0x21fb04b171b68944c640020a3a464602ec8d02495c44f1e403d9be4a97128e49\\n// Level 18: 0x19151c748859974805eb30feac7a301266dec9f67e23e285fe750f86448a2af9\\n// Level 19: 0x18fb0b755218eaa809681eb87e45925faa9197507d368210d73b5836ebf139e4\\nbytes32 constant TWENTY_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x1e294375b42dfd97795e07e1fe8bd6cefcb16c3bbb71b30bed950f8965861244)\\n);\\n\\nuint256 constant TWENTY_SIX_LEVELS = 26;\\n/// @dev Root of the binary merkle TWENTY_SIX_LEVELS tree with ZERO_VALUE leafs\\n// Level 21: 0x0d3e4235db275d9bab0808dd9ade8789d46d0e1f1c9a99ce73fefca51dc92f4a\\n// Level 22: 0x075ab2ca945c4dc5ea40a9f1c66d5bf3c367cef1e04e73aa17c2bc747eb5fc87\\n// Level 23: 0x26f0f533a8ea2210001aeb8f8306c7c70656ba6afe145c6540bd4ed2c967a230\\n// Level 24: 0x24be7e64f680326e6e3621e5862d7b6b1f31e9e183a0bf5dd04e823be84e6af9\\n// Level 25: 0x212b13c9cbf421942ae3e3c62a3c072903c2a745a220cfb3c43cd520f55f44bf\\nbytes32 constant TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x1bdded415724018275c7fcc2f564f64db01b5bbeb06d65700564b05c3c59c9e6)\\n);\\n\\nuint256 constant THIRTY_TWO_LEVELS = 32;\\n/// @dev Root of the binary merkle THIRTY_TWO_LEVELS tree with ZERO_VALUE leafs\\n// Level 26: TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT\\n// Level 27: 0x038acf368a174e10c45a64161131c0f93faf2f045ff663acbef804eb5644aad7\\n// Level 28: 0x1b3ecbe4131d8d52d60b91ec8e13d5fc82235232bb43007d54cda6b50d932d6f\\n// Level 29: 0x1b0b9059f431d38a66c82317d9ed1b744c439f10193ae44bcf519fe6e1766b65\\n// Level 30: 0x240867e8bb31d6b8057f5ab067dc0bd1c4ba64a42258963ec45b7b4773ce5838\\n// Level 31: 0x2310e5b3543ea766ecaec53003d0e1b73f19a149409190d00561da7090a2c5cb\\nbytes32 constant THIRTY_TWO_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x24ab16594d418ca2e66ca284f56a4cb7039c6d8f8e0c3c8f362cf18b5afa19d0)\\n);\\n\",\"keccak256\":\"0x21997b2f641d5438810117c645125df9d4a9c2a295c28855ff2c3606909225d7\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/providersKeys/ProvidersKeysSignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity 0.8.16;\\n\\nimport \\\"../../common/EIP712SignatureVerifier.sol\\\";\\n\\nabstract contract ProvidersKeysSignatureVerifier is EIP712SignatureVerifier {\\n    // solhint-disable var-name-mixedcase\\n\\n    bytes32 internal constant REGISTRATION_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"Registration(uint32 keyringId,bytes32 pubRootSpendingKey,uint32 expiryDate,uint256 version)\\\"\\n            )\\n        );\\n\\n    uint8 public immutable KEYRING_VERSION;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    constructor(uint8 keyringVersion) {\\n        KEYRING_VERSION = keyringVersion;\\n    }\\n\\n    function getRegistrationDataHash(\\n        uint32 _keyringId,\\n        bytes32 _pubRootSpendingKey,\\n        uint32 _expiryDate\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    REGISTRATION_TYPEHASH,\\n                    _keyringId,\\n                    _pubRootSpendingKey,\\n                    _expiryDate,\\n                    uint256(KEYRING_VERSION)\\n                )\\n            );\\n    }\\n\\n    function recoverOperator(\\n        uint32 _keyringId,\\n        bytes32 _pubRootSpendingKey,\\n        uint32 _expiryDate,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address) {\\n        bytes32 registrationDataHash = getRegistrationDataHash(\\n            _keyringId,\\n            _pubRootSpendingKey,\\n            _expiryDate\\n        );\\n\\n        bytes32 typedDataHash = toTypedDataHash(registrationDataHash);\\n\\n        return recover(typedDataHash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xf2da2fbf39670f0dc4c736c3fbeda22927dc6c847b1716663b695b77825beb2b\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e060405260106000556001805463ffffffff1916905562278d006002553480156200002a57600080fd5b5060405162003031380380620030318339810160408190526200004d9162000133565b60ff8216608052826001600160a01b038116620000b15760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b0390811660a0526040805180820190915260078152661412ce9a5b9a5d60ca1b6020820152908216620001005760405162461bcd60e51b8152600401620000a8919062000184565b506001600160a01b031660c05250620001d49050565b80516001600160a01b03811681146200012e57600080fd5b919050565b6000806000606084860312156200014957600080fd5b620001548462000116565b9250602084015160ff811681146200016b57600080fd5b91506200017b6040850162000116565b90509250925092565b600060208083528351808285015260005b81811015620001b35785810183015185820160400152820162000195565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c051612df56200023c600039600081816103fa0152611f2301526000818161018c01528181610531015281816109c601528181610c28015281816113860152818161147b01526116dc01526000818161046701526120f80152612df56000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80634e810c5e116100d8578063b0c4c8261161008c578063e0e9ec9611610066578063e0e9ec961461042f578063eccec5a814610442578063f52f1a821461046257600080fd5b8063b0c4c826146103e2578063c99c0756146103f5578063ca40e5711461041c57600080fd5b8063755dc9be116100bd578063755dc9be1461038557806377c51bc5146103ab5780638d3ce6e2146103cf57600080fd5b80634e810c5e1461036a5780635ca1e1651461037d57600080fd5b806320edf18c1161013a578063372d6b2711610114578063372d6b271461026957806337adf200146102b35780633b2fb7a81461032e57600080fd5b806320edf18c1461021c578063297027481461024357806330bd84c41461025657600080fd5b80631e24f89a1161016b5780631e24f89a146101ec5780631ee861ea1461020157806320379ee51461021457600080fd5b8063117803e3146101875780631ddd23b5146101cb575b600080fd5b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101de6101d936600461261a565b61049b565b6040519081526020016101c2565b6101ff6101fa366004612648565b61052f565b005b6101ff61020f366004612692565b6106d9565b6101de6108c4565b6101de7f44b818e3e3a12ecf805989195d8f38e75517386006719e2dbb1443987a34db7b81565b6101ff6102513660046126bc565b6109c4565b6101de6102643660046126eb565b610bed565b6005546040805161ffff80841682526201000084048116602083015264010000000084041691810191909152660100000000000090910463ffffffff1660608201526080016101c2565b61031c6102c13660046126bc565b6003602052600090815260409020546001600160a01b0381169060ff600160a01b8204169061ffff600160a81b8204811691600160b81b81049091169063ffffffff600160c81b8204169062ffffff600160e81b9091041686565b6040516101c29695949392919061274e565b61035d6040518060400160405280601081526020016f14185b9d1a195c88141c9bdd1bd8dbdb60821b81525081565b6040516101c291906127c5565b6101ff6103783660046126bc565b610c26565b6101de610f97565b610398610393366004612893565b610fd3565b60405161ffff90911681526020016101c2565b6103986103b93660046126bc565b60046020526000908152604090205461ffff1681565b6101ff6103dd366004612931565b6112ba565b6101ff6103f03660046129e9565b611479565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101ff61042a366004612a04565b6115d0565b6101ff61043d366004612a85565b6116da565b61035d604051806040016040528060018152602001603160f81b81525081565b6104897f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016101c2565b60006104c2604051806040016040528084600001518152602001846020015181525061199d565b6040518060400160405280600681526020017f504b3a45303100000000000000000000000000000000000000000000000000008152509061051f5760405162461bcd60e51b815260040161051691906127c5565b60405180910390fd5b50610529826119f7565b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461059e5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b6044820152606401610516565b60006105a983611a37565b600554909150640100000000900461ffff166105c58382612ab7565b905061ffff811660016105da60106002612bb6565b6105e49190612bc2565b61ffff16101560405180604001604052806006815260200165504b3a45313160d01b815250906106275760405162461bcd60e51b815260040161051691906127c5565b50600083836060015161063a9190612ab7565b61ffff868116600081815260036020908152604091829020805461ffff60b81b1916600160b81b878716021790556005805465ffff00000000191664010000000095891695909502949094179093558651928701516060880151915194955091937f9053b8f624a0e0ca15225d4b46057b62b6eb427e35d7d4a3644426f5d8552dd4936106ca9390929091612bd5565b60405180910390a25050505050565b604080518082019091526006815265504b3a45323160d01b60208201526001600160a01b03821661071d5760405162461bcd60e51b815260040161051691906127c5565b50600061072a8333611bf0565b60408051808201909152600681527f504b3a453232000000000000000000000000000000000000000000000000000060208201529091506001600160a01b038316330361078a5760405162461bcd60e51b815260040161051691906127c5565b506001600160a01b03808316825261ffff841660009081526003602090815260409091208351815493166001600160a01b03198416811782559184015184939192909183916001600160a81b031990911617600160a01b8360028111156107f3576107f3612716565b02179055506040828101518254606080860151608087015160a09097015163ffffffff60a81b19909316600160a81b61ffff9586160261ffff60b81b191617600160b81b91851691909102176001600160c81b0316600160c81b63ffffffff909716969096026001600160e81b031695909517600160e81b62ffffff909216919091021790925583516020850151938501519151928716937f9053b8f624a0e0ca15225d4b46057b62b6eb427e35d7d4a3644426f5d8552dd4936108b79390612bd5565b60405180910390a2505050565b60006040518060800160405280605f8152602001612d2f605f91398051602091820120604080518082018252601081526f14185b9d1a195c88141c9bdd1bd8dbdb60821b908401528051808201825260018152603160f81b908401528051928301919091527fbd6ac11eb0311bac3ff64366cc16db374956ada90d1e2aa6bb4faed25fc1d0cd908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a08201527f44b818e3e3a12ecf805989195d8f38e75517386006719e2dbb1443987a34db7b60c082015260e00160405160208183030381529060405280519060200120905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610a335760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b6044820152606401610516565b6000610a3e82611a37565b9050610a4981611c8a565b60058054600490610a67908490640100000000900461ffff16612c04565b92506101000a81548161ffff021916908361ffff160217905550610abf816040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a09091015260029082015290565b61ffff83166000908152600360209081526040909120825181546001600160a01b039091166001600160a01b031982168117835592840151919283916001600160a81b03191617600160a01b836002811115610b1d57610b1d612716565b02179055506040828101518254606080860151608087015160a09097015163ffffffff60a81b19909316600160a81b61ffff9586160261ffff60b81b191617600160b81b91851691909102176001600160c81b0316600160c81b63ffffffff909716969096026001600160e81b031695909517600160e81b62ffffff909216919091021790925583516020850151938501519151928616937f9053b8f624a0e0ca15225d4b46057b62b6eb427e35d7d4a3644426f5d8552dd493610be19390612bd5565b60405180910390a25050565b60408051606081018252835181526020808501519082015263ffffffff831691810191909152600090610c1f90611ca0565b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610c955760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b6044820152606401610516565b61ffff81166000908152600360209081526040808320815160c0810190925280546001600160a01b03811683529192909190830190600160a01b900460ff166002811115610ce557610ce5612716565b6002811115610cf657610cf6612716565b8152905461ffff600160a81b820481166020840152600160b81b820416604083015263ffffffff600160c81b820416606083015262ffffff600160e81b909104166080909101529050600281602001516002811115610d5757610d57612716565b146040518060400160405280600581526020017f504b3a313500000000000000000000000000000000000000000000000000000081525090610dac5760405162461bcd60e51b815260040161051691906127c5565b50600554640100000000900461ffff166000610dc783611c8a565b9050610dd38183612ab7565b91506001610de360106002612bb6565b610ded9190612bc2565b61ffff168261ffff161115610e4557610e068183612c04565b6001610e1460106002612bb6565b610e1e9190612bc2565b610e289190612c04565b90506001610e3860106002612bb6565b610e429190612bc2565b91505b6001602084810191825261ffff86166000908152600390915260409020845181546001600160a01b031981166001600160a01b03909216918217835592518693909183916001600160a81b03191617600160a01b836002811115610eab57610eab612716565b02179055506040828101518254606080860151608087015160a09097015163ffffffff60a81b19909316600160a81b61ffff9586160261ffff60b81b191617600160b81b91851691909102176001600160c81b0316600160c81b63ffffffff909716969096026001600160e81b031695909517600160e81b62ffffff90921691909102179092556005805465ffff0000000019166401000000008785160217905585516020870151938701519151928816937f9053b8f624a0e0ca15225d4b46057b62b6eb427e35d7d4a3644426f5d8552dd493610f899390612bd5565b60405180910390a250505050565b60065460009015610fa9575060065490565b507f0a5e5ec37bd8f9a21a1c2192e7c37d86bf975d947c2b38598b00babe567191c990565b905090565b6000610fdd611dd5565b610fe5611e4f565b63ffffffff168663ffffffff16116040518060400160405280600681526020016528259d22991b60d11b815250906110305760405162461bcd60e51b815260040161051691906127c5565b50600061103c886119f7565b905060006110528a61ffff16838a898989611e59565b905060006110608b83611bf0565b9050806040015161ffff16816060015161ffff1610156040518060400160405280600681526020017f504b3a4531300000000000000000000000000000000000000000000000000000815250906110ca5760405162461bcd60e51b815260040161051691906127c5565b5060006110d78b8b610bed565b9050600560029054906101000a900461ffff1694508b600460008761ffff1661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055506111517f0667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d60001b82878c611e8f565b61115a85612c1f565b6005805463ffff000019166201000061ffff84160217905560408301805191965061118482612c1f565b61ffff9081169091528d166000908152600360209081526040909120845181546001600160a01b039091166001600160a01b031982168117835592860151869450919283916001600160a81b03191617600160a01b8360028111156111eb576111eb612716565b021790555060408281015182546060850151608086015160a09096015163ffffffff60a81b19909216600160a81b61ffff9485160261ffff60b81b191617600160b81b91841691909102176001600160c81b0316600160c81b63ffffffff968716026001600160e81b031617600160e81b62ffffff90921691909102179092558051878152928d16602084015287821692918f16917fd023f3fd00f69edbb18c7a332f9b04045ca59fa89be12e717fd5cb9dd611109c910160405180910390a350505050979650505050505050565b61ffff808616600090815260046020908152604091829020548251808401909352600683527f504b3a453237000000000000000000000000000000000000000000000000000091830191909152879289929181169083161461132f5760405162461bcd60e51b815260040161051691906127c5565b50600061133b89611a37565b9050336001600160a01b031681600001516001600160a01b03160361136757611362611dd5565b6113cf565b6040805180820190915260068152650504b3a4532360d41b60208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146113cd5760405162461bcd60e51b815260040161051691906127c5565b505b60006113db8888610bed565b6001549091506000906113f5908a9063ffffffff16610bed565b905061143682828c8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611e8f92505050565b8961ffff168b61ffff167f1f7bd889c5580ad23bedcc20017b3291b25eca68a14477192d52e896bd6439d460405160405180910390a35050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146114e85760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b6044820152606401610516565b6002548163ffffffff1611156040518060400160405280600781526020017f5a41523a45303500000000000000000000000000000000000000000000000000815250906115485760405162461bcd60e51b815260040161051691906127c5565b50600061156c82611557611e4f565b6115619190612c40565b63ffffffff16611f8e565b6005805469ffffffff0000000000001916660100000000000063ffffffff8416908102919091179091556040519081529091507f3f4b61ddd0cb058a723417fbd46a9d6454505d2130b61541fadb595a11ac2ffb9060200160405180910390a15050565b6115d8611dd5565b6115e0611e4f565b63ffffffff168363ffffffff1611801561160557508363ffffffff168363ffffffff16115b6040518060400160405280600681526020016528259d22991b60d11b815250906116425760405162461bcd60e51b815260040161051691906127c5565b5061ffff808316600090815260046020526040902054166116638133611bf0565b5060006116708787610bed565b9050600061167e8887610bed565b905061168c82828787611e8f565b60405163ffffffff8716815261ffff80871691908516907f2e8a1e2259d5c5b7f833f1606c0ed806522ae73a2f195393c9c320b27ceb8e6f9060200160405180910390a35050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146117495760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b6044820152606401610516565b604080518082019091526006815265504b3a45323160d01b60208201526001600160a01b03831661178d5760405162461bcd60e51b815260040161051691906127c5565b50600554640100000000900461ffff166117a78282612ab7565b905061ffff811660016117bc60106002612bb6565b6117c69190612bc2565b61ffff16101560405180604001604052806006815260200165504b3a45313160d01b815250906118095760405162461bcd60e51b815260040161051691906127c5565b506000611814611fe8565b6040805160c081019091526001600160a01b038616815290915060208101600181526000602082015261ffff85166040820152606001611852611ffd565b63ffffffff1681526000602091820181905261ffff841681526003825260409020825181546001600160a01b039091166001600160a01b031982168117835592840151919283916001600160a81b03191617600160a01b8360028111156118bb576118bb612716565b021790555060408281015182546060850151608086015160a09096015162ffffff16600160e81b026001600160e81b0363ffffffff909716600160c81b02969096166001600160c81b0361ffff928316600160b81b0261ffff60b81b19958416600160a81b029590951663ffffffff60a81b199094169390931793909317919091169190911793909317909155600580548584166401000000000265ffff0000ffff19909116938516938417179055517f9053b8f624a0e0ca15225d4b46057b62b6eb427e35d7d4a3644426f5d8552dd490610f899087906001908890612bd5565b80516000907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000110801590610529575050602001517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001101590565b602081015181517f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f80000001015611a3257506020810151600160ff1b175b919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915261ffff8216600090815260036020908152604091829020825160c0810190935280546001600160a01b03811684529091830190600160a01b900460ff166002811115611ab757611ab7612716565b6002811115611ac857611ac8612716565b81529054600160a81b810461ffff908116602080850191909152600160b81b8304909116604080850191909152600160c81b830463ffffffff166060850152600160e81b90920462ffffff1660809093019290925282518151808301909252600682527f504b3a4531360000000000000000000000000000000000000000000000000000928201929092529192506001600160a01b0316611b7c5760405162461bcd60e51b815260040161051691906127c5565b50600181602001516002811115611b9557611b95612716565b146040518060400160405280600681526020017f504b3a453137000000000000000000000000000000000000000000000000000081525090611bea5760405162461bcd60e51b815260040161051691906127c5565b50919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152611c2b83611a37565b9050816001600160a01b031681600001516001600160a01b031614604051806040016040528060068152602001650504b3a4532360d41b81525090611c835760405162461bcd60e51b815260040161051691906127c5565b5092915050565b6000816040015182606001516105299190612c04565b80516000907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001118015611cf6575060208201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b8015611d25575060408201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b604051806060016040528060228152602001612d0d6022913990611d5c5760405162461bcd60e51b815260040161051691906127c5565b50604051635a53025d60e01b8152733Eb4f42B303f865B2409e67031927E4c4FEB3f1F90635a53025d90611d94908590600401612c73565b602060405180830381865af4158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190612ca4565b6005546601000000000000900463ffffffff16611df0611e4f565b63ffffffff1610156040518060400160405280600681526020017f504b3a453036000000000000000000000000000000000000000000000000000081525090611e4c5760405162461bcd60e51b815260040161051691906127c5565b50565b6000610fce612054565b600080611e678888886120ab565b90506000611e7482612141565b9050611e8281878787612196565b9998505050505050505050565b6000548151146040518060400160405280600681526020017f504b3a453032000000000000000000000000000000000000000000000000000081525090611ee95760405162461bcd60e51b815260040161051691906127c5565b506000611eff60065486868661ffff1686612255565b600681905560405163c2e3e62b60e01b8152600480820183905260248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c2e3e62b90604401600060405180830381600087803b158015611f6f57600080fd5b505af1158015611f83573d6000803e3d6000fd5b505050505050505050565b60006401000000008210611fe45760405162461bcd60e51b815260206004820152600860248201527f554e5341464533320000000000000000000000000000000000000000000000006044820152606401610516565b5090565b600554600090610fce9061ffff166001612ab7565b6000436401000000008110611a325760405162461bcd60e51b815260206004820152600d60248201527f554e534146453332424c4f434b000000000000000000000000000000000000006044820152606401610516565b6000426401000000008110611a325760405162461bcd60e51b815260206004820152600c60248201527f554e53414645333254494d4500000000000000000000000000000000000000006044820152606401610516565b60006040518060800160405280605b8152602001612d8e605b91398051602091820120604080519283019190915263ffffffff8087169183019190915260608201859052831660808201527f000000000000000000000000000000000000000000000000000000000000000060ff1660a082015260c0016040516020818303038152906040528051906020012090509392505050565b600060405180604001604052806002815260200161190160f01b8152506121666108c4565b8360405160200161217993929190612cbd565b604051602081830303815290604052805190602001209050919050565b6040805160008082526020820180845287905260ff861692820192909252606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156121ea573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661224d5760405162461bcd60e51b815260206004820152601760248201527f454344534120696e76616c6964207369676e61747572650000000000000000006044820152606401610516565b949350505050565b60008484036122cc5760405162461bcd60e51b815260206004820152602a60248201527f424955543a204e6577206c6561662063616e6e6f7420626520657175616c207460448201527f6865206f6c64206f6e65000000000000000000000000000000000000000000006064820152608401610516565b6122d8868685856123d8565b61232f5760405162461bcd60e51b815260206004820152602260248201527f424955543a204c656166206973206e6f742070617274206f6620746865207472604482015261656560f01b6064820152608401610516565b50826000805b83518110156123cd578085901c60011691508160000361238c57612385604051806040016040528085815260200186848151811061237557612375612c5d565b60200260200101518152506124e6565b92506123c5565b6123c260405180604001604052808684815181106123ac576123ac612c5d565b60200260200101518152602001858152506124e6565b92505b600101612335565b505095945050505050565b80516000906001901b8084106124305760405162461bcd60e51b815260206004820152601860248201527f424955543a20696e76616c6964206c65616620696e64657800000000000000006044820152606401610516565b846000805b85518110156124a7578087901c60011691508160000361247c57612475604051806040016040528085815260200188848151811061237557612375612c5d565b925061249f565b61249c60405180604001604052808884815181106123ac576123ac612c5d565b92505b600101612435565b5087156124b6578782146124da565b7f0a5e5ec37bd8f9a21a1c2192e7c37d86bf975d947c2b38598b00babe567191c982145b98975050505050505050565b60006105298260007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182826020020151108015612546575060208201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b604051806060016040528060228152602001612d0d602291399061257d5760405162461bcd60e51b815260040161051691906127c5565b5060405163014cf2b360e51b8152737Ae48edd2Ee06Ba80863A196361B4bAAa5d8F8b19063299e566090611d94908590600401612ce4565b634e487b7160e01b600052604160045260246000fd5b6000604082840312156125dd57600080fd5b6040516040810181811067ffffffffffffffff82111715612600576126006125b5565b604052823581526020928301359281019290925250919050565b60006040828403121561262c57600080fd5b610c1f83836125cb565b803561ffff81168114611a3257600080fd5b6000806040838503121561265b57600080fd5b61266483612636565b915061267260208401612636565b90509250929050565b80356001600160a01b0381168114611a3257600080fd5b600080604083850312156126a557600080fd5b6126ae83612636565b91506126726020840161267b565b6000602082840312156126ce57600080fd5b610c1f82612636565b803563ffffffff81168114611a3257600080fd5b600080606083850312156126fe57600080fd5b61270884846125cb565b9150612672604084016126d7565b634e487b7160e01b600052602160045260246000fd5b6003811061274a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038716815260c0810161276b602083018861272c565b61ffff808716604084015280861660608401525063ffffffff8416608083015262ffffff831660a0830152979650505050505050565b60005b838110156127bc5781810151838201526020016127a4565b50506000910152565b60208152600082518060208401526127e48160408501602087016127a1565b601f01601f19169190910160400192915050565b600082601f83011261280957600080fd5b8135602067ffffffffffffffff80831115612826576128266125b5565b8260051b604051601f19603f8301168101818110848211171561284b5761284b6125b5565b60405293845285810183019383810192508785111561286957600080fd5b83870191505b848210156128885781358352918301919083019061286f565b979650505050505050565b6000806000806000806000610100888a0312156128af57600080fd5b6128b888612636565b96506128c78960208a016125cb565b95506128d5606089016126d7565b9450608088013567ffffffffffffffff8111156128f157600080fd5b6128fd8a828b016127f8565b94505060a088013560ff8116811461291457600080fd5b9699959850939692959460c0840135945060e09093013592915050565b60008060008060008060c0878903121561294a57600080fd5b61295387612636565b955061296160208801612636565b945061297088604089016125cb565b935061297e608088016126d7565b925060a087013567ffffffffffffffff8082111561299b57600080fd5b818901915089601f8301126129af57600080fd5b8135818111156129be57600080fd5b8a60208260051b85010111156129d357600080fd5b6020830194508093505050509295509295509295565b6000602082840312156129fb57600080fd5b610c1f826126d7565b600080600080600060c08688031215612a1c57600080fd5b612a2687876125cb565b9450612a34604087016126d7565b9350612a42606087016126d7565b9250612a5060808701612636565b915060a086013567ffffffffffffffff811115612a6c57600080fd5b612a78888289016127f8565b9150509295509295909350565b60008060408385031215612a9857600080fd5b6126648361267b565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115611c8357611c83612aa1565b600181815b80851115612b0d578160001904821115612af357612af3612aa1565b80851615612b0057918102915b93841c9390800290612ad7565b509250929050565b600082612b2457506001610529565b81612b3157506000610529565b8160018114612b475760028114612b5157612b6d565b6001915050610529565b60ff841115612b6257612b62612aa1565b50506001821b610529565b5060208310610133831016604e8410600b8410161715612b90575081810a610529565b612b9a8383612ad2565b8060001904821115612bae57612bae612aa1565b029392505050565b6000610c1f8383612b15565b8181038181111561052957610529612aa1565b6001600160a01b038416815260608101612bf2602083018561272c565b61ffff83166040830152949350505050565b61ffff828116828216039080821115611c8357611c83612aa1565b600061ffff808316818103612c3657612c36612aa1565b6001019392505050565b63ffffffff818116838216019080821115611c8357611c83612aa1565b634e487b7160e01b600052603260045260246000fd5b60608101818360005b6003811015612c9b578151835260209283019290910190600101612c7c565b50505092915050565b600060208284031215612cb657600080fd5b5051919050565b60008451612ccf8184602089016127a1565b91909101928352506020820152604001919050565b60408101818360005b6002811015612c9b578151835260209283019290910190600101612ced56fe506f736569646f6e4861736865723a20696e707574206e6f7420696e206669656c64454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429526567697374726174696f6e2875696e743332206b657972696e6749642c6279746573333220707562526f6f745370656e64696e674b65792c75696e74333220657870697279446174652c75696e743235362076657273696f6e29a164736f6c6343000810000a",
  "deployedBytecode": "$a786a838ef97de7d2113fa91ed3c799076$__90635a53025d90611d94908590600401612c73565b602060405180830381865af4158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190612ca4565b6005546601000000000000900463ffffffff16611df0611e4f565b63ffffffff1610156040518060400160405280600681526020017f504b3a453036000000000000000000000000000000000000000000000000000081525090611e4c5760405162461bcd60e51b815260040161051691906127c5565b50565b6000610fce612054565b600080611e678888886120ab565b90506000611e7482612141565b9050611e8281878787612196565b9998505050505050505050565b6000548151146040518060400160405280600681526020017f504b3a453032000000000000000000000000000000000000000000000000000081525090611ee95760405162461bcd60e51b815260040161051691906127c5565b506000611eff60065486868661ffff1686612255565b600681905560405163c2e3e62b60e01b8152600480820183905260248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c2e3e62b90604401600060405180830381600087803b158015611f6f57600080fd5b505af1158015611f83573d6000803e3d6000fd5b505050505050505050565b60006401000000008210611fe45760405162461bcd60e51b815260206004820152600860248201527f554e5341464533320000000000000000000000000000000000000000000000006044820152606401610516565b5090565b600554600090610fce9061ffff166001612ab7565b6000436401000000008110611a325760405162461bcd60e51b815260206004820152600d60248201527f554e534146453332424c4f434b000000000000000000000000000000000000006044820152606401610516565b6000426401000000008110611a325760405162461bcd60e51b815260206004820152600c60248201527f554e53414645333254494d4500000000000000000000000000000000000000006044820152606401610516565b60006040518060800160405280605b8152602001612d8e605b91398051602091820120604080519283019190915263ffffffff8087169183019190915260608201859052831660808201527f000000000000000000000000000000000000000000000000000000000000000060ff1660a082015260c0016040516020818303038152906040528051906020012090509392505050565b600060405180604001604052806002815260200161190160f01b8152506121666108c4565b8360405160200161217993929190612cbd565b604051602081830303815290604052805190602001209050919050565b6040805160008082526020820180845287905260ff861692820192909252606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156121ea573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661224d5760405162461bcd60e51b815260206004820152601760248201527f454344534120696e76616c6964207369676e61747572650000000000000000006044820152606401610516565b949350505050565b60008484036122cc5760405162461bcd60e51b815260206004820152602a60248201527f424955543a204e6577206c6561662063616e6e6f7420626520657175616c207460448201527f6865206f6c64206f6e65000000000000000000000000000000000000000000006064820152608401610516565b6122d8868685856123d8565b61232f5760405162461bcd60e51b815260206004820152602260248201527f424955543a204c656166206973206e6f742070617274206f6620746865207472604482015261656560f01b6064820152608401610516565b50826000805b83518110156123cd578085901c60011691508160000361238c57612385604051806040016040528085815260200186848151811061237557612375612c5d565b60200260200101518152506124e6565b92506123c5565b6123c260405180604001604052808684815181106123ac576123ac612c5d565b60200260200101518152602001858152506124e6565b92505b600101612335565b505095945050505050565b80516000906001901b8084106124305760405162461bcd60e51b815260206004820152601860248201527f424955543a20696e76616c6964206c65616620696e64657800000000000000006044820152606401610516565b846000805b85518110156124a7578087901c60011691508160000361247c57612475604051806040016040528085815260200188848151811061237557612375612c5d565b925061249f565b61249c60405180604001604052808884815181106123ac576123ac612c5d565b92505b600101612435565b5087156124b6578782146124da565b7f0a5e5ec37bd8f9a21a1c2192e7c37d86bf975d947c2b38598b00babe567191c982145b98975050505050505050565b60006105298260007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182826020020151108015612546575060208201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b604051806060016040528060228152602001612d0d602291399061257d5760405162461bcd60e51b815260040161051691906127c5565b5060405163014cf2b360e51b815273__$3d381aec2d571db697c779e211a438fb21$__9063299e566090611d94908590600401612ce4565b634e487b7160e01b600052604160045260246000fd5b6000604082840312156125dd57600080fd5b6040516040810181811067ffffffffffffffff82111715612600576126006125b5565b604052823581526020928301359281019290925250919050565b60006040828403121561262c57600080fd5b610c1f83836125cb565b803561ffff81168114611a3257600080fd5b6000806040838503121561265b57600080fd5b61266483612636565b915061267260208401612636565b90509250929050565b80356001600160a01b0381168114611a3257600080fd5b600080604083850312156126a557600080fd5b6126ae83612636565b91506126726020840161267b565b6000602082840312156126ce57600080fd5b610c1f82612636565b803563ffffffff81168114611a3257600080fd5b600080606083850312156126fe57600080fd5b61270884846125cb565b9150612672604084016126d7565b634e487b7160e01b600052602160045260246000fd5b6003811061274a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038716815260c0810161276b602083018861272c565b61ffff808716604084015280861660608401525063ffffffff8416608083015262ffffff831660a0830152979650505050505050565b60005b838110156127bc5781810151838201526020016127a4565b50506000910152565b60208152600082518060208401526127e48160408501602087016127a1565b601f01601f19169190910160400192915050565b600082601f83011261280957600080fd5b8135602067ffffffffffffffff80831115612826576128266125b5565b8260051b604051601f19603f8301168101818110848211171561284b5761284b6125b5565b60405293845285810183019383810192508785111561286957600080fd5b83870191505b848210156128885781358352918301919083019061286f565b979650505050505050565b6000806000806000806000610100888a0312156128af57600080fd5b6128b888612636565b96506128c78960208a016125cb565b95506128d5606089016126d7565b9450608088013567ffffffffffffffff8111156128f157600080fd5b6128fd8a828b016127f8565b94505060a088013560ff8116811461291457600080fd5b9699959850939692959460c0840135945060e09093013592915050565b60008060008060008060c0878903121561294a57600080fd5b61295387612636565b955061296160208801612636565b945061297088604089016125cb565b935061297e608088016126d7565b925060a087013567ffffffffffffffff8082111561299b57600080fd5b818901915089601f8301126129af57600080fd5b8135818111156129be57600080fd5b8a60208260051b85010111156129d357600080fd5b6020830194508093505050509295509295509295565b6000602082840312156129fb57600080fd5b610c1f826126d7565b600080600080600060c08688031215612a1c57600080fd5b612a2687876125cb565b9450612a34604087016126d7565b9350612a42606087016126d7565b9250612a5060808701612636565b915060a086013567ffffffffffffffff811115612a6c57600080fd5b612a78888289016127f8565b9150509295509295909350565b60008060408385031215612a9857600080fd5b6126648361267b565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115611c8357611c83612aa1565b600181815b80851115612b0d578160001904821115612af357612af3612aa1565b80851615612b0057918102915b93841c9390800290612ad7565b509250929050565b600082612b2457506001610529565b81612b3157506000610529565b8160018114612b475760028114612b5157612b6d565b6001915050610529565b60ff841115612b6257612b62612aa1565b50506001821b610529565b5060208310610133831016604e8410600b8410161715612b90575081810a610529565b612b9a8383612ad2565b8060001904821115612bae57612bae612aa1565b029392505050565b6000610c1f8383612b15565b8181038181111561052957610529612aa1565b6001600160a01b038416815260608101612bf2602083018561272c565b61ffff83166040830152949350505050565b61ffff828116828216039080821115611c8357611c83612aa1565b600061ffff808316818103612c3657612c36612aa1565b6001019392505050565b63ffffffff818116838216019080821115611c8357611c83612aa1565b634e487b7160e01b600052603260045260246000fd5b60608101818360005b6003811015612c9b578151835260209283019290910190600101612c7c565b50505092915050565b600060208284031215612cb657600080fd5b5051919050565b60008451612ccf8184602089016127a1565b91909101928352506020820152604001919050565b60408101818360005b6002811015612c9b578151835260209283019290910190600101612ced56fe506f736569646f6e4861736865723a20696e707574206e6f7420696e206669656c64454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429526567697374726174696f6e2875696e743332206b657972696e6749642c6279746573333220707562526f6f745370656e64696e674b65792c75696e74333220657870697279446174652c75696e743235362076657273696f6e29a164736f6c6343000810000a",
  "libraries": {
    "PoseidonT3": "0x7Ae48edd2Ee06Ba80863A196361B4bAAa5d8F8b1",
    "PoseidonT4": "0x3Eb4f42B303f865B2409e67031927E4c4FEB3f1F",
    "BabyJubJub": "0x0Ab02321Fc701C3C539F92b563B9cD4a2c0f75A4"
  },
  "devdoc": {
    "author": "Pantherprotocol Contributors",
    "details": "Public keys are points in the BabyJubjub elliptic curve. The contract does not check, however, if the key is a valid curve point. Since the off-chain computation of the tree updates proved by the SNARK will replace the on-chain computation in the next version, the \"incremental tree\" algorithm is not applied (\"incremental tree\" is easier for operators since `proofSiblings` unneeded as input params on tree leafs insertions/updates).",
    "kind": "dev",
    "methods": {
      "revokeKey(uint16,uint16,(uint256,uint256),uint32,bytes32[])": {
        "details": "It sets the `expiry` to 0, which is an indicator of a revoked key."
      }
    },
    "stateVariables": {
      "_numKeyrings": {
        "details": "Number of keyrings added (created) so far"
      },
      "_totalNumAllocatedKeys": {
        "details": "Number of leafs reserved for public keys so far"
      },
      "_totalNumRegisteredKeys": {
        "details": "Number of public keys registered so far"
      },
      "_treeLockedTillTime": {
        "details": "(UNIX) time till when operators can't register/revoke/extend keysOwner may temporally disable the tree changes by operators to avoid the \"race condition\" (if multiple parties try to update simultaneously)"
      },
      "_treeRoot": {
        "details": "Root of the merkle tree with registered keys"
      }
    },
    "title": "ProvidersKeys",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "extendKeyExpiry((uint256,uint256),uint32,uint32,uint16,bytes32[])": {
        "notice": "Extend the key expiry time. Only the keyring operator may call."
      },
      "keyringIds(uint16)": {
        "notice": "Mapping from key index to keyring ID"
      },
      "keyrings(uint16)": {
        "notice": "Mapping from keyring ID to Keyring data"
      },
      "registerKey(uint16,(uint256,uint256),uint32,bytes32[],uint8,bytes32,bytes32)": {
        "notice": "Register a public key. Only the keyring operator may call."
      },
      "revokeKey(uint16,uint16,(uint256,uint256),uint32,bytes32[])": {
        "notice": "Revoke registered key. Either the operator or the owner may call."
      },
      "updateKeyringOperator(uint16,address)": {
        "notice": "Update keyring operator. Only the (current) operator may call."
      }
    },
    "notice": "It registers public keys of providers, such as KYC/KYT attesters, zone operators, data escrow (or \"data safe\") operators. Each public key is stored as a leaf of a binary merkle tree. Every time the tree is updated, this contract calls `PantherStaticTree` smart contract to notify on update of the tree root. The contract owner allocates leafs (\"keyring\") to a provider and authorizes an address that may register provider's keys. This way a provider gets the \"keyring\" where the provider may put that many keys as the owner allocated.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 986,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "KEYS_TREE_DEPTH",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 999,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "REVOKED_KEY_EXPIRY",
        "offset": 0,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 1002,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "MAX_TREE_LOCK_PERIOD",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1029,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "keyrings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_struct(Keyring)1023_storage)"
      },
      {
        "astId": 1034,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "keyringIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_uint16)"
      },
      {
        "astId": 1037,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "_numKeyrings",
        "offset": 0,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 1040,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "_totalNumRegisteredKeys",
        "offset": 2,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 1043,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "_totalNumAllocatedKeys",
        "offset": 4,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 1046,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "_treeLockedTillTime",
        "offset": 6,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 1049,
        "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
        "label": "_treeRoot",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(STATUS)1009": {
        "encoding": "inplace",
        "label": "enum ProvidersKeys.STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Keyring)1023_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ProvidersKeys.Keyring)",
        "numberOfBytes": "32",
        "value": "t_struct(Keyring)1023_storage"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_struct(Keyring)1023_storage": {
        "encoding": "inplace",
        "label": "struct ProvidersKeys.Keyring",
        "members": [
          {
            "astId": 1011,
            "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
            "label": "operator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1014,
            "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(STATUS)1009"
          },
          {
            "astId": 1016,
            "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
            "label": "numKeys",
            "offset": 21,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1018,
            "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
            "label": "numAllocKeys",
            "offset": 23,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1020,
            "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
            "label": "registrationBlock",
            "offset": 25,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1022,
            "contract": "contracts/protocol/ProvidersKeys.sol:ProvidersKeys",
            "label": "_unused",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}