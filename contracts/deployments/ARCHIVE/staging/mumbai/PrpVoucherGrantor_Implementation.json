{
  "address": "0x386a64E8E8e50e40D75f3C3570aeBc8427b3E665",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pantherPoolV1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prpAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardVoucherGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "allowedContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "voucherType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "limit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "amount",
          "type": "uint64"
        }
      ],
      "name": "VoucherTermsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANTHER_POOL_V1",
      "outputs": [
        {
          "internalType": "contract IPantherPoolV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "privateMessages",
          "type": "bytes"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct SnarkProof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "cachedForestRootIndex",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "utxoBusQueuePos",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_amount",
          "type": "uint64"
        },
        {
          "internalType": "bytes4",
          "name": "_voucherType",
          "type": "bytes4"
        }
      ],
      "name": "generateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedContract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_voucherType",
          "type": "bytes4"
        },
        {
          "internalType": "uint64",
          "name": "_limit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_amount",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "updateVoucherTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "voucherTerms",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "rewardsGranted",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "limit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "amount",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "uint56",
          "name": "_reserved",
          "type": "uint56"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ad6039d17331c13f6291cd15a77fbe76b078a80a3aa0388d3789d2366ae1144",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x386a64E8E8e50e40D75f3C3570aeBc8427b3E665",
    "transactionIndex": 2,
    "gasUsed": "1082172",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000008004000000020000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000002000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xb7b2b755f36fccf70d1ac3365bce9ada88cf82102d489dfafd163cebfa6dbb1e",
    "transactionHash": "0x7ad6039d17331c13f6291cd15a77fbe76b078a80a3aa0388d3789d2366ae1144",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 42506526,
        "transactionHash": "0x7ad6039d17331c13f6291cd15a77fbe76b078a80a3aa0388d3789d2366ae1144",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b88b069f83bc00000000000000000000000000000000000000000000000000aa321fee227cbd700000000000000000000000000000000000000000000229e3a3897a773898eb60000000000000000000000000000000000000000000000000a97994e782f901700000000000000000000000000000000000000000000229e3a442057dd81ca76",
        "logIndex": 9,
        "blockHash": "0xb7b2b755f36fccf70d1ac3365bce9ada88cf82102d489dfafd163cebfa6dbb1e"
      }
    ],
    "blockNumber": 42506526,
    "cumulativeGasUsed": "2021454",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0xfDfD920F2152565E9D7b589e4e9faeE6699AD4bd"
  ],
  "numDeployments": 5,
  "solcInputHash": "e07d00e15da450650eee85a11885296a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pantherPoolV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prpAmount\",\"type\":\"uint256\"}],\"name\":\"RewardVoucherGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"voucherType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"VoucherTermsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANTHER_POOL_V1\",\"outputs\":[{\"internalType\":\"contract IPantherPoolV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"privateMessages\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct SnarkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"cachedForestRootIndex\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"utxoBusQueuePos\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"_voucherType\",\"type\":\"bytes4\"}],\"name\":\"generateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_voucherType\",\"type\":\"bytes4\"},{\"internalType\":\"uint64\",\"name\":\"_limit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateVoucherTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"voucherTerms\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"rewardsGranted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint56\",\"name\":\"_reserved\",\"type\":\"uint56\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RewardClaimed(bytes32)\":{\"details\":\"Emitted when a reward voucher is successfully claimed.\",\"params\":{\"secretHash\":\"The secret hash for the claimed reward voucher.\"}},\"RewardVoucherGenerated(bytes32,uint256)\":{\"details\":\"Emitted when a new reward voucher is generated.\",\"params\":{\"secretHash\":\"The secret hash for the reward voucher.\"}},\"VoucherTermsUpdated(address,bytes4,uint64,uint64)\":{\"details\":\"Emitted when the voucher terms are updated.\",\"params\":{\"allowedContract\":\"The address of the contract allowed to generate reward vouchers.\",\"amount\":\"The amount of the reward voucher.\",\"limit\":\"The limit of the reward voucher.\",\"voucherType\":\"The type of the reward voucher.\"}}},\"kind\":\"dev\",\"methods\":{\"claimRewards(uint256[],bytes,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256)\":{\"params\":{\"cachedForestRootIndex\":\"forest merkle root index. 0 means the most updated root.\",\"inputs\":\"[14] - magicalConstraint;\",\"privateMessages\":\"the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText This data is used to spend the newly created utxo.\",\"proof\":\"A proof associated with the zAccount and a secret.\"}},\"constructor\":{\"params\":{\"_owner\":\"The owner of the PrpVoucherGrantor contract.\",\"_pantherPoolV1\":\"The address of the pool contract.\"}},\"generateRewards(bytes32,uint64,bytes4)\":{\"params\":{\"_amount\":\"The amount of the reward voucher.\",\"_secretHash\":\"The secret hash for the reward voucher.\",\"_voucherType\":\"The type of the reward voucher.\"},\"returns\":{\"_0\":\"The prp amount which has be granted.\"}},\"updateVoucherTerms(address,bytes4,uint64,uint64,bool)\":{\"params\":{\"_allowedContract\":\"The address of the contract allowed to generate reward vouchers.\",\"_amount\":\"The amount of PRP to grant for the voucher.\",\"_enabled\":\"The status of the voucher type.\",\"_limit\":\"The limit for the voucher grants.\",\"_voucherType\":\"The type of the reward voucher.\"}}},\"title\":\"PrpVoucherGrantor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"claimRewards(uint256[],bytes,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256)\":{\"notice\":\"Accounts prp to zAccount\"},\"constructor\":{\"notice\":\"Constructor that sets the initial owner, pool contract and verifier contract.\"},\"generateRewards(bytes32,uint64,bytes4)\":{\"notice\":\"Generates a reward voucher for a given secret hash and voucher type.\"},\"updateVoucherTerms(address,bytes4,uint64,uint64,bool)\":{\"notice\":\"Sets the terms for action rewards for a given voucher type.\"}},\"notice\":\"The PRPGrantor smart contract is designed to facilitate rewarding users with Panther Protocol rewards (nominated in PRPs) other than rewards generated by/within MASP transactions. Reward claims to be generated and utilised by users. The contract maintains a mapping of claimable PRP balances  associated with individual secrets. It accumulates generated claims associated with the same secret. A claim \\u201cutilisation\\u201d results in increasing the PRP balance inside the zAccount of a user by the amount of the claim. To utilise a claim (it\\u2019s entire balance) associated with a secret, a user must provide proof of zAccount ownership and knowledge of the secret. The contract owner has the authority to update the terms, and the smart contract is upgradable to extend the action list as needed upon DAO voting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/PrpVoucherGrantor.sol\":\"PrpVoucherGrantor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n// Constants\\n\\nuint256 constant IN_PRP_UTXOs = 1;\\nuint256 constant IN_UTXOs = 2 + IN_PRP_UTXOs;\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\nuint256 constant OUT_MAX_UTXOs = OUT_UTXOs;\\n// Number of UTXOs given as a reward for an \\\"advanced\\\" stake\\nuint256 constant OUT_RWRD_UTXOs = 2;\\n\\n// For overflow protection and circuits optimization\\n// (must be less than the FIELD_SIZE)\\nuint256 constant MAX_EXT_AMOUNT = 2 ** 96;\\nuint256 constant MAX_IN_CIRCUIT_AMOUNT = 2 ** 64;\\nuint256 constant MAX_TIMESTAMP = 2 ** 32;\\nuint256 constant MAX_ZASSET_ID = 2 ** 160;\\n\\n// Maximum amount for PRP\\nuint256 constant MAX_PRP_AMOUNT = (2 ** 64) - 1;\\n\\n// Token types\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant ERC20_TOKEN_TYPE = 0x00;\\nuint8 constant ERC721_TOKEN_TYPE = 0x10;\\nuint8 constant ERC1155_TOKEN_TYPE = 0x11;\\n// defined for every tokenId rather than for all tokens on the contract\\n// (unsupported in the V0 and V1 of the MASP)\\nuint8 constant BY_TOKENID_TOKEN_TYPE = 0xFF;\\n\\n// ZAsset statuses\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant zASSET_ENABLED = 0x01;\\nuint8 constant zASSET_DISABLED = 0x02;\\nuint8 constant zASSET_UNKNOWN = 0x00;\\n\\n// UTXO data (opening values - encrypted and public) formats\\nuint8 constant UTXO_DATA_TYPE5 = 0x00; // for zero UTXO (no data to provide)\\nuint8 constant UTXO_DATA_TYPE1 = 0x01; // for UTXO w/ zero tokenId\\nuint8 constant UTXO_DATA_TYPE3 = 0x02; // for UTXO w/ non-zero tokenId\\n\\n// Grant Types\\n// bytes4(keccak256('panther-onboarding-grantor'))\\nbytes4 constant GT_ONBOARDING = 0x93b212ae;\\n// The \\\"prp grant type\\\" for the \\\"release and bridge\\\" ZKPs\\n// bytes4(keccak256(\\\"panther-zkp-release\\\"))\\nbytes4 constant GT_ZKP_RELEASE = 0x53a1eb85;\\n\\n// Number of 32-bit words of the CiphertextMsg for UTXO_DATA_TYPE1\\n// (ephemeral key (packed) - 32 bytes, encrypted `random` - 32 bytes)\\nuint256 constant CIPHERTEXT1_WORDS = 2;\\n\\n// Number of 32-bit words in the (uncompressed) spending PubKey\\nuint256 constant PUBKEY_WORDS = 2;\\n// Number of elements in `pathElements`\\nuint256 constant PATH_ELEMENTS_NUM = 16;\\n\\n// @dev Unusable on public network address, which is useful for simulations\\n//  in forked test env, e.g. for bypassing SNARK proof verification like this:\\n// `require(isValidProof || tx.origin == DEAD_CODE_ADDRESS)`\\naddress constant DEAD_CODE_ADDRESS = address(uint160(0xDEADC0DE));\\n\\n// 100% expressed in 1/100th of 1% (\\\"pips\\\")\\nuint256 constant HUNDRED_PERCENT = 100 * 100;\\n\",\"keccak256\":\"0xc37ce6f310015660dffde0418b3427885fd4193aa9d7a740b31a3055288a9c04\",\"license\":\"BUSL-1.1\"},\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title ImmutableOwnable\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x06d3e09256c510bd1a5c8f6f05cc99fbc0d51919f2a64e022395bc169c349d90\",\"license\":\"MIT\"},\"contracts/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\n// Encoding of field elements is: X[0] * z + X[1]\\nstruct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n}\\n\\n// Verification key for SNARK\\nstruct VerifyingKey {\\n    G1Point alfa1;\\n    G2Point beta2;\\n    G2Point gamma2;\\n    G2Point delta2;\\n    G1Point[] ic;\\n}\\n\\nstruct SnarkProof {\\n    G1Point a;\\n    G2Point b;\\n    G1Point c;\\n}\\n\\nstruct PluginData {\\n    address contractAddress;\\n    bytes callData;\\n}\\n\\nstruct ElGamalCiphertext {\\n    G1Point c1;\\n    G1Point c2;\\n}\\n\\n// For MASP V0 and V1\\nstruct ZAsset {\\n    // reserved (for networkId, tokenIdPolicy. etc..)\\n    uint64 _unused;\\n    // 0x00 by default\\n    uint8 version;\\n    // Refer to Constants.sol\\n    uint8 status;\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // 0x00 - no scaling\\n    uint8 scale;\\n    // token contract address\\n    address token;\\n}\\n\\nstruct LockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint96 extAmount;\\n}\\n\",\"keccak256\":\"0xbe5feb34f2f9eb101f2f6b01290b97b0a8696bf64bed4822bbffc65b12b07aff\",\"license\":\"MIT\"},\"contracts/common/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nabstract contract Utils {\\n    // false positive\\n    // slither-disable-next-line timestamp\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2 ** 32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2 ** 96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2 ** 128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2 ** 160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function revertZeroAddress(address account) internal pure {\\n        require(account != address(0), \\\"UNEXPECTED_ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xeed5af982b6fdb91a632f5d80695e319db04980d05d258ccbaa54df94d2a98e7\",\"license\":\"MIT\"},\"contracts/protocol/PrpVoucherGrantor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable one-contract-per-file\\npragma solidity 0.8.16;\\n\\nimport \\\"./interfaces/IPantherPoolV1.sol\\\";\\nimport { FIELD_SIZE } from \\\"./crypto/SnarkConstants.sol\\\";\\nimport { MAX_PRP_AMOUNT } from \\\"./../common/Constants.sol\\\";\\n\\nimport \\\"../common/ImmutableOwnable.sol\\\";\\nimport \\\"../common/Utils.sol\\\";\\n\\n/// @title PrpVoucherGrantor\\n/// @notice The PRPGrantor smart contract is designed to facilitate rewarding\\n/// users with Panther Protocol rewards (nominated in PRPs) other than rewards\\n/// generated by/within MASP transactions. Reward claims to be generated and\\n/// utilised by users. The contract maintains a mapping of claimable PRP\\n/// balances  associated with individual secrets. It accumulates generated\\n/// claims associated with the same secret. A claim \\u201cutilisation\\u201d results in\\n/// increasing the PRP balance inside the zAccount of a user by the amount\\n/// of the claim. To utilise a claim (it\\u2019s entire balance) associated with a\\n/// secret, a user must provide proof of zAccount ownership and knowledge of\\n/// the secret. The contract owner has the authority to update the terms, and\\n/// the smart contract is upgradable to extend the action list as needed upon\\n/// DAO voting.\\ncontract PrpVoucherGrantor is ImmutableOwnable, Utils {\\n    // The contract is supposed to run behind a proxy DELEGATECALLing it.\\n    // On upgrades, adjust `__gap` to match changes of the storage layout.\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n\\n    // solhint-disable-next-line\\n    IPantherPoolV1 public immutable PANTHER_POOL_V1;\\n    // solhint-disable-next-line\\n    uint64 private ZERO_VALUE = 1;\\n\\n    mapping(bytes32 => uint256) public balance;\\n    mapping(address => mapping(bytes4 => VoucherTerms)) public voucherTerms;\\n\\n    /// @dev Struct for storing voucher terms.\\n\\n    /// @param rewardsGranted The total amount (accumulator) of rewards granted\\n    /// for this voucher\\n    /// @param limit The rewards limit of the reward voucher. rewardsGranted <=\\n    //limit\\n    /// @param amount The amount of the reward that voucher generates.\\n    /// @param enabled The status of the voucher terms.\\n    struct VoucherTerms {\\n        uint64 rewardsGranted;\\n        uint64 limit;\\n        uint64 amount;\\n        bool enabled;\\n        // rest of the storage slot (uint120) are available for upgrades\\n        uint56 _reserved;\\n    }\\n\\n    /// @dev Emitted when a new reward voucher is generated.\\n    /// @param secretHash The secret hash for the reward voucher.\\n    event RewardVoucherGenerated(bytes32 indexed secretHash, uint256 prpAmount);\\n\\n    /// @dev Emitted when a reward voucher is successfully claimed.\\n    /// @param secretHash The secret hash for the claimed reward voucher.\\n    event RewardClaimed(bytes32 indexed secretHash);\\n\\n    /// @dev Emitted when the voucher terms are updated.\\n    /// @param allowedContract The address of the contract allowed to generate\\n    /// reward vouchers.\\n    /// @param voucherType The type of the reward voucher.\\n    /// @param limit The limit of the reward voucher.\\n    /// @param amount The amount of the reward voucher.\\n    event VoucherTermsUpdated(\\n        address allowedContract,\\n        bytes4 voucherType,\\n        uint64 limit,\\n        uint64 amount\\n    );\\n\\n    /// @notice Constructor that sets the initial owner, pool contract and\\n    /// verifier contract.\\n    /// @param _owner The owner of the PrpVoucherGrantor contract.\\n    /// @param _pantherPoolV1 The address of the pool contract.\\n    constructor(\\n        address _owner,\\n        address _pantherPoolV1\\n    ) ImmutableOwnable(_owner) {\\n        revertZeroAddress(_pantherPoolV1);\\n        PANTHER_POOL_V1 = IPantherPoolV1(_pantherPoolV1);\\n    }\\n\\n    modifier onlyValidVoucherTypes(bytes4 _voucherType) {\\n        require(\\n            voucherTerms[msg.sender][_voucherType].enabled,\\n            \\\"PrpVoucherGrantor: Inactive or invalid voucher type\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Generates a reward voucher for a given secret hash and voucher\\n    /// type.\\n    /// @param _secretHash The secret hash for the reward voucher.\\n    /// @param _amount The amount of the reward voucher.\\n    /// @param _voucherType The type of the reward voucher.\\n    /// @return The prp amount which has be granted.\\n    function generateRewards(\\n        bytes32 _secretHash,\\n        uint64 _amount,\\n        bytes4 _voucherType\\n    ) external onlyValidVoucherTypes(_voucherType) returns (uint256) {\\n        VoucherTerms memory voucherTerm = voucherTerms[msg.sender][\\n            _voucherType\\n        ];\\n\\n        // If amount in the voucher is not set, then the amount is specified\\n        // by the calling smart contract, otherwise it is specified by the\\n        uint64 prpToGrant = _amount > 0 ? _amount : voucherTerm.amount;\\n\\n        if (voucherTerm.rewardsGranted + prpToGrant > voucherTerm.limit)\\n            return 0;\\n\\n        // we are setting the balance to non-zero to save gas\\n        if (balance[_secretHash] > ZERO_VALUE) {\\n            balance[_secretHash] += prpToGrant;\\n        } else {\\n            balance[_secretHash] = ZERO_VALUE + prpToGrant;\\n        }\\n\\n        voucherTerms[msg.sender][_voucherType].rewardsGranted += prpToGrant;\\n\\n        emit RewardVoucherGenerated(_secretHash, prpToGrant);\\n\\n        return prpToGrant;\\n    }\\n\\n    /// @notice Accounts prp to zAccount\\n    /// @param inputs The public input parameters to be passed to verifier.\\n    /// @param inputs[0]  - extraInputsHash;\\n    /// @param inputs[1]  - chargedAmountZkp;\\n    /// @param inputs[2]  - createTime;\\n    /// @param inputs[3]  - depositAmountPrp;\\n    /// @param inputs[4]  - withdrawAmountPrp;\\n    /// @param inputs[5]  - utxoCommitmentPrivatePart;\\n    /// @param inputs[6]  - utxoSpendPubKeyX\\n    /// @param inputs[7]  - utxoSpendPubKeyY\\n    /// @param inputs[8]  - zAssetScale;\\n    /// @param inputs[9]  - zAccountUtxoInNullifier;\\n    /// @param inputs[10] - zAccountUtxoOutCommitment;\\n    /// @param inputs[11] - zNetworkChainId;\\n    /// @param inputs[12] - forestMerkleRoot;\\n    /// @param inputs[13] - saltHash;\\n    /// @param inputs[14] - magicalConstraint;\\n    /// @param privateMessages the private message that contains zAccount utxo data.\\n    /// zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText\\n    /// This data is used to spend the newly created utxo.\\n    /// @param proof A proof associated with the zAccount and a secret.\\n    /// @param cachedForestRootIndex forest merkle root index. 0 means the most updated root.\\n    function claimRewards(\\n        uint256[] calldata inputs,\\n        bytes memory privateMessages,\\n        SnarkProof calldata proof,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256 utxoBusQueuePos) {\\n        bytes32 secretHash = bytes32(inputs[13]);\\n\\n        uint256 rewardAmount = balance[secretHash];\\n\\n        require(\\n            rewardAmount > ZERO_VALUE,\\n            \\\"PrpVoucherGrantor: No reward to claim\\\"\\n        );\\n\\n        {\\n            uint256 withdrawAmountPrp = inputs[4];\\n            require(\\n                withdrawAmountPrp == 0,\\n                \\\"PrpVoucherGrantor: Non zero withdraw amount prp\\\"\\n            );\\n        }\\n\\n        {\\n            uint256 depositAmountPrp = inputs[3];\\n            require(\\n                depositAmountPrp <= MAX_PRP_AMOUNT,\\n                \\\"PrpVoucherGrantor: Too large prp amount\\\"\\n            );\\n            require(\\n                rewardAmount == depositAmountPrp,\\n                \\\"PrpVoucherGrantor: Incorrect reward balance\\\"\\n            );\\n        }\\n\\n        {\\n            uint256 extraInputsHash = inputs[0];\\n            bytes memory extraInp = abi.encodePacked(\\n                privateMessages,\\n                cachedForestRootIndex\\n            );\\n            require(\\n                extraInputsHash == uint256(keccak256(extraInp)) % FIELD_SIZE,\\n                \\\"PrpVoucherGrantor: Invalid extra input hash\\\"\\n            );\\n        }\\n\\n        // we are setting the balance to non-zero to save gas for the next\\n        // rearward generation\\n        balance[secretHash] = ZERO_VALUE;\\n\\n        utxoBusQueuePos = _accountPrp(\\n            inputs,\\n            proof,\\n            privateMessages,\\n            cachedForestRootIndex\\n        );\\n\\n        emit RewardClaimed(secretHash);\\n    }\\n\\n    function _accountPrp(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 cachedForestRootIndex\\n    ) private returns (uint256 utxoBusQueuePos) {\\n        utxoBusQueuePos = 0;\\n        // Pool is supposed to revert in case of any error\\n        try\\n            // Trusted contract - no reentrancy guard needed\\n            PANTHER_POOL_V1.accountPrp(\\n                inputs,\\n                proof,\\n                privateMessages,\\n                cachedForestRootIndex\\n            )\\n        returns (uint256 result) {\\n            utxoBusQueuePos = result;\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        }\\n    }\\n\\n    /// @notice Sets the terms for action rewards for a given voucher type.\\n    /// @param _allowedContract The address of the contract allowed to generate\\n    /// reward vouchers.\\n    /// @param _voucherType The type of the reward voucher.\\n    /// @param _limit The limit for the voucher grants.\\n    /// @param _amount The amount of PRP to grant for the voucher.\\n    /// @param _enabled The status of the voucher type.\\n    function updateVoucherTerms(\\n        address _allowedContract,\\n        bytes4 _voucherType,\\n        uint64 _limit,\\n        uint64 _amount,\\n        bool _enabled\\n    ) external onlyOwner {\\n        revertZeroAddress(_allowedContract);\\n        uint64 rewardsGenerated = voucherTerms[_allowedContract][_voucherType]\\n            .rewardsGranted;\\n\\n        require(\\n            _limit + _amount >= rewardsGenerated,\\n            \\\"PrpVoucherGrantor: Limit cannot be less than rewards generated\\\"\\n        );\\n\\n        voucherTerms[_allowedContract][_voucherType] = VoucherTerms(\\n            rewardsGenerated,\\n            _limit,\\n            _amount,\\n            _enabled,\\n            uint56(0) // reserved\\n        );\\n        emit VoucherTermsUpdated(\\n            _allowedContract,\\n            _voucherType,\\n            _limit,\\n            _amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x61454d3e8ad379292cfd1be97da99646704e853ad6499786219b8aae1ec5dead\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\n// @dev Order of alt_bn128 and the field prime of Baby Jubjub and Poseidon hash\\nuint256 constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n// @dev Field prime of alt_bn128\\nuint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\",\"keccak256\":\"0xb734602ed691e205eed51a0239e8281bf5822487140843a848df20f6a4c95b39\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IPantherPoolV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2023 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\nimport { SnarkProof } from \\\"../../common/Types.sol\\\";\\nimport { LockData } from \\\"../../common/Types.sol\\\";\\n\\ninterface IPantherPoolV1 {\\n    function accountPrp(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256 utxoBusQueuePos);\\n\\n    function createZzkpUtxoAndSpendPrpUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 zkpAmountRounded,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256);\\n\\n    function createZAccountUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        address zkpPayer,\\n        bytes memory secretMessage,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256);\\n\\n    function unlockAssetFromVault(LockData calldata data) external;\\n}\\n\",\"keccak256\":\"0xa5ff0c742dd1b94ff70c4842e88f3d7aae39893f3f54e08a7a113f42171bdf0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806389eba4211161005b57806389eba4211461010e5780638abfdf871461012e578063bd37399414610141578063e85c3cb0146101f057600080fd5b8063117803e3146100825780631f60f44a146100c657806344ba7d51146100e7575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d4366004610d8d565b610205565b6040519081526020016100bd565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100d961011c366004610e40565b60336020526000908152604090205481565b6100d961013c366004610e8e565b6105bb565b6101ac61014f366004610ee1565b603460209081526000928352604080842090915290825290205467ffffffffffffffff80821691680100000000000000008104821691600160801b82041690600160c01b810460ff1690600160c81b900466ffffffffffffff1685565b6040805167ffffffffffffffff9687168152948616602086015292909416918301919091521515606082015266ffffffffffffff909116608082015260a0016100bd565b6102036101fe366004610f14565b610885565b005b6000808686600d81811061021b5761021b610f82565b60209081029290920135600081815260339093526040909220546032549293509167ffffffffffffffff16821190506102c15760405162461bcd60e51b815260206004820152602560248201527f507270566f75636865724772616e746f723a204e6f2072657761726420746f2060448201527f636c61696d00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000888860048181106102d6576102d6610f82565b905060200201359050806000146103555760405162461bcd60e51b815260206004820152602f60248201527f507270566f75636865724772616e746f723a204e6f6e207a65726f207769746860448201527f6472617720616d6f756e7420707270000000000000000000000000000000000060648201526084016102b8565b5060008888600381811061036b5761036b610f82565b90506020020135905067ffffffffffffffff8111156103f25760405162461bcd60e51b815260206004820152602760248201527f507270566f75636865724772616e746f723a20546f6f206c617267652070727060448201527f20616d6f756e740000000000000000000000000000000000000000000000000060648201526084016102b8565b8082146104675760405162461bcd60e51b815260206004820152602b60248201527f507270566f75636865724772616e746f723a20496e636f72726563742072657760448201527f6172642062616c616e636500000000000000000000000000000000000000000060648201526084016102b8565b5060008888600081811061047d5761047d610f82565b9050602002013590506000878660405160200161049b929190610fbc565b60408051601f19818403018152919052805160208201209091506104e0907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190610fde565b82146105545760405162461bcd60e51b815260206004820152602b60248201527f507270566f75636865724772616e746f723a20496e76616c696420657874726160448201527f20696e707574206861736800000000000000000000000000000000000000000060648201526084016102b8565b5050603254600083815260336020526040902067ffffffffffffffff90911690556105828888878988610b77565b60405190935082907f1d0eb023ad533d7ca88117e904d40b4d1d92a113aedffb0ae7cecbeae9987e0b90600090a2505095945050505050565b3360009081526034602090815260408083206001600160e01b0319851684529091528120548290600160c01b900460ff1661065e5760405162461bcd60e51b815260206004820152603360248201527f507270566f75636865724772616e746f723a20496e616374697665206f72206960448201527f6e76616c696420766f756368657220747970650000000000000000000000000060648201526084016102b8565b3360009081526034602090815260408083206001600160e01b0319871684528252808320815160a081018352905467ffffffffffffffff8082168352680100000000000000008204811694830194909452600160801b8104841692820192909252600160c01b820460ff1615156060820152600160c81b90910466ffffffffffffff166080820152919086166106f85781604001516106fa565b855b9050816020015167ffffffffffffffff1681836000015161071b9190611016565b67ffffffffffffffff1611156107365760009350505061087d565b60325460008881526033602052604090205467ffffffffffffffff909116101561078d576000878152603360205260408120805467ffffffffffffffff8416929061078290849061103e565b909155506107c39050565b6032546107a590829067ffffffffffffffff16611016565b600088815260336020526040902067ffffffffffffffff9190911690555b3360009081526034602090815260408083206001600160e01b0319891684529091528120805483929061080190849067ffffffffffffffff16611016565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550867f333ec773258dd165a05b0a80e10fe36df819de075d42d667ba12533380368a3f82604051610867919067ffffffffffffffff91909116815260200190565b60405180910390a267ffffffffffffffff169250505b509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146108fd5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a656400000000000000000000000060448201526064016102b8565b61090685610c64565b6001600160a01b03851660009081526034602090815260408083206001600160e01b03198816845290915290205467ffffffffffffffff16806109498486611016565b67ffffffffffffffff1610156109c75760405162461bcd60e51b815260206004820152603e60248201527f507270566f75636865724772616e746f723a204c696d69742063616e6e6f742060448201527f6265206c657373207468616e20726577617264732067656e657261746564000060648201526084016102b8565b6040805160a08101825267ffffffffffffffff80841682528681166020808401918252878316848601908152871515606086019081526000608087018181526001600160a01b038f168252603485528882206001600160e01b03198f16835290945287902095518654945192519151935166ffffffffffffff16600160c81b0278ffffffffffffffffffffffffffffffffffffffffffffffffff941515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff938816600160801b02939093167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff94881668010000000000000000026fffffffffffffffffffffffffffffffff1990971692909716919091179490941791909116939093179290921791909116179055517f8dd4edec761e0d339fcdff8e7cbbb774e5ebe9b848ce7ca0a55fc239bdc0806f90610b679088908890889088906001600160a01b039490941684526001600160e01b031992909216602084015267ffffffffffffffff908116604084015216606082015260800190565b60405180910390a1505050505050565b60405163e94ecd3560e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e94ecd3590610bce9089908990899089908990600401611083565b6020604051808303816000875af1925050508015610c09575060408051601f3d908101601f19168201909252610c069181019061113e565b60015b610c5a57610c15611157565b806308c379a003610c4e5750610c29611173565b80610c345750610c50565b8060405162461bcd60e51b81526004016102b891906111fd565b505b3d6000803e3d6000fd5b9695505050505050565b6001600160a01b038116610cba5760405162461bcd60e51b815260206004820152601760248201527f554e45585045435445445f5a45524f5f4144445245535300000000000000000060448201526064016102b8565b50565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610cf957610cf9610cbd565b6040525050565b600082601f830112610d1157600080fd5b813567ffffffffffffffff811115610d2b57610d2b610cbd565b604051610d42601f8301601f191660200182610cd3565b818152846020838601011115610d5757600080fd5b816020850160208301376000918101602001919091529392505050565b60006101008284031215610d8757600080fd5b50919050565b60008060008060006101608688031215610da657600080fd5b853567ffffffffffffffff80821115610dbe57600080fd5b818801915088601f830112610dd257600080fd5b813581811115610de157600080fd5b8960208260051b8501011115610df657600080fd5b602092830197509550908701359080821115610e1157600080fd5b50610e1e88828901610d00565b935050610e2e8760408801610d74565b94979396509194610140013592915050565b600060208284031215610e5257600080fd5b5035919050565b803567ffffffffffffffff81168114610e7157600080fd5b919050565b80356001600160e01b031981168114610e7157600080fd5b600080600060608486031215610ea357600080fd5b83359250610eb360208501610e59565b9150610ec160408501610e76565b90509250925092565b80356001600160a01b0381168114610e7157600080fd5b60008060408385031215610ef457600080fd5b610efd83610eca565b9150610f0b60208401610e76565b90509250929050565b600080600080600060a08688031215610f2c57600080fd5b610f3586610eca565b9450610f4360208701610e76565b9350610f5160408701610e59565b9250610f5f60608701610e59565b915060808601358015158114610f7457600080fd5b809150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60005b83811015610fb3578181015183820152602001610f9b565b50506000910152565b60008351610fce818460208801610f98565b9190910191825250602001919050565b600082610ffb57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81811683821601908082111561103757611037611000565b5092915050565b8082018082111561105157611051611000565b92915050565b6000815180845261106f816020860160208601610f98565b601f01601f19169290920160200192915050565b610160808252810185905260006101807f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8711156110c057600080fd5b8660051b80898386013783016110e3602085018880358252602090810135910152565b6040808801606086013760406080880160a086013761111260e0850160c0890180358252602090810135910152565b818482030161012085015261112982820187611057565b92505050826101408301529695505050505050565b60006020828403121561115057600080fd5b5051919050565b600060033d11156111705760046000803e5060005160e01c5b90565b600060443d10156111815790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156111b157505050505090565b82850191508151818111156111c95750505050505090565b843d87010160208285010111156111e35750505050505090565b6111f260208286010187610cd3565b509095945050505050565b6020815260006112106020830184611057565b939250505056fea164736f6c6343000810000a",
  "devdoc": {
    "events": {
      "RewardClaimed(bytes32)": {
        "details": "Emitted when a reward voucher is successfully claimed.",
        "params": {
          "secretHash": "The secret hash for the claimed reward voucher."
        }
      },
      "RewardVoucherGenerated(bytes32,uint256)": {
        "details": "Emitted when a new reward voucher is generated.",
        "params": {
          "secretHash": "The secret hash for the reward voucher."
        }
      },
      "VoucherTermsUpdated(address,bytes4,uint64,uint64)": {
        "details": "Emitted when the voucher terms are updated.",
        "params": {
          "allowedContract": "The address of the contract allowed to generate reward vouchers.",
          "amount": "The amount of the reward voucher.",
          "limit": "The limit of the reward voucher.",
          "voucherType": "The type of the reward voucher."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimRewards(uint256[],bytes,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256)": {
        "params": {
          "cachedForestRootIndex": "forest merkle root index. 0 means the most updated root.",
          "inputs": "[14] - magicalConstraint;",
          "privateMessages": "the private message that contains zAccount utxo data. zAccount utxo data contains bytes1 msgType, bytes32 ephemeralKey and bytes64 cypherText This data is used to spend the newly created utxo.",
          "proof": "A proof associated with the zAccount and a secret."
        }
      },
      "constructor": {
        "params": {
          "_owner": "The owner of the PrpVoucherGrantor contract.",
          "_pantherPoolV1": "The address of the pool contract."
        }
      },
      "generateRewards(bytes32,uint64,bytes4)": {
        "params": {
          "_amount": "The amount of the reward voucher.",
          "_secretHash": "The secret hash for the reward voucher.",
          "_voucherType": "The type of the reward voucher."
        },
        "returns": {
          "_0": "The prp amount which has be granted."
        }
      },
      "updateVoucherTerms(address,bytes4,uint64,uint64,bool)": {
        "params": {
          "_allowedContract": "The address of the contract allowed to generate reward vouchers.",
          "_amount": "The amount of PRP to grant for the voucher.",
          "_enabled": "The status of the voucher type.",
          "_limit": "The limit for the voucher grants.",
          "_voucherType": "The type of the reward voucher."
        }
      }
    },
    "title": "PrpVoucherGrantor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "claimRewards(uint256[],bytes,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256)": {
        "notice": "Accounts prp to zAccount"
      },
      "constructor": {
        "notice": "Constructor that sets the initial owner, pool contract and verifier contract."
      },
      "generateRewards(bytes32,uint64,bytes4)": {
        "notice": "Generates a reward voucher for a given secret hash and voucher type."
      },
      "updateVoucherTerms(address,bytes4,uint64,uint64,bool)": {
        "notice": "Sets the terms for action rewards for a given voucher type."
      }
    },
    "notice": "The PRPGrantor smart contract is designed to facilitate rewarding users with Panther Protocol rewards (nominated in PRPs) other than rewards generated by/within MASP transactions. Reward claims to be generated and utilised by users. The contract maintains a mapping of claimable PRP balances  associated with individual secrets. It accumulates generated claims associated with the same secret. A claim “utilisation” results in increasing the PRP balance inside the zAccount of a user by the amount of the claim. To utilise a claim (it’s entire balance) associated with a secret, a user must provide proof of zAccount ownership and knowledge of the secret. The contract owner has the authority to update the terms, and the smart contract is upgradable to extend the action list as needed upon DAO voting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3229,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3235,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "ZERO_VALUE",
        "offset": 0,
        "slot": "50",
        "type": "t_uint64"
      },
      {
        "astId": 3239,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "balance",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3246,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "voucherTerms",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_struct(VoucherTerms)3257_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_struct(VoucherTerms)3257_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => struct PrpVoucherGrantor.VoucherTerms))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_struct(VoucherTerms)3257_storage)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_struct(VoucherTerms)3257_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct PrpVoucherGrantor.VoucherTerms)",
        "numberOfBytes": "32",
        "value": "t_struct(VoucherTerms)3257_storage"
      },
      "t_struct(VoucherTerms)3257_storage": {
        "encoding": "inplace",
        "label": "struct PrpVoucherGrantor.VoucherTerms",
        "members": [
          {
            "astId": 3248,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "rewardsGranted",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3250,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3252,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "amount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3254,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "enabled",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3256,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "_reserved",
            "offset": 25,
            "slot": "0",
            "type": "t_uint56"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}