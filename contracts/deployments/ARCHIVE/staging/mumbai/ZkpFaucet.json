{
  "address": "0x6cF7beC462d37DfF3ac9494B218a391eFf258a6d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountToPay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cupSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDrinkCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelistedAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_whitelisted",
          "type": "bool[]"
        }
      ],
      "name": "addWhitelistedMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cupSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "drink",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "drinkCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToPay",
          "type": "uint256"
        }
      ],
      "name": "getCupSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAllowedToDrink",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAmountToPay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDrinkCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restrictToMaxDrinkCount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restrictToWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleRestrictToMaxDrinkCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleRestrictToWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cupSize",
          "type": "uint256"
        }
      ],
      "name": "updateCupSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDrinkCount",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDrinkCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPrice",
          "type": "uint256"
        }
      ],
      "name": "updateTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ad651ddbc36935e6978c0df3db83b95eff9886352cabd67fba471097d8aa817",
  "receipt": {
    "to": null,
    "from": "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "contractAddress": "0x125C1C9137E000DF99d4965dbae72521E4a65375",
    "transactionIndex": 0,
    "gasUsed": "1077244",
    "logsBloom": "0x
    "blockHash": "0x0eaac2b4de0c36383b4dcb1c9d7428e9efa8c0ea1e88f586bc38d1af3e5acf29",
    "transactionHash": "0x5ad651ddbc36935e6978c0df3db83b95eff9886352cabd67fba471097d8aa817",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26395005,
        "transactionHash": "0x5ad651ddbc36935e6978c0df3db83b95eff9886352cabd67fba471097d8aa817",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fffdd1de35ffc2f66bfd78e064c280fed9e68de",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010be656f86f9020000000000000000000000000000000000000000000000000544142bf459a6c4600000000000000000000000000000000000000000000026639dc5b2c1d45608c00000000000000000000000000000000000000000000000053355c684d2adc260000000000000000000000000000000000000000000002663ae8418315b4f0ac",
        "logIndex": 0,
        "blockHash": "0x0eaac2b4de0c36383b4dcb1c9d7428e9efa8c0ea1e88f586bc38d1af3e5acf29"
      }
    ],
    "blockNumber": 26395005,
    "cumulativeGasUsed": "1077244",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "0xf0BA5B1ee6Aff5dcd99aa6C922C9F0739F23C4D4",
    "0",
    "0",
    "1000000000000000000000",
    "0"
  ],
  "numDeployments": 1,
  "solcInputHash": "f09caaa6ac22ead284d69cb00aa23afa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountToPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cupSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDrinkCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_whitelisted\",\"type\":\"bool[]\"}],\"name\":\"addWhitelistedMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cupSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"drink\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"drinkCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToPay\",\"type\":\"uint256\"}],\"name\":\"getCupSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAllowedToDrink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountToPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDrinkCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictToMaxDrinkCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictToWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRestrictToMaxDrinkCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRestrictToWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cupSize\",\"type\":\"uint256\"}],\"name\":\"updateCupSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDrinkCount\",\"type\":\"uint256\"}],\"name\":\"updateMaxDrinkCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWhitelistedMultiple(address[],bool[])\":{\"params\":{\"_whitelisted\":\"array of boolen values to be mapped to the addresses\",\"_whitelistedAddresses\":\"array of addresses to be added\"}},\"drink(address)\":{\"details\":\"if restrictToWhitelisted is true, then check if the sender is whitelisted. if the restrictToMaxReq is true, then check if the sender is already received token.\",\"params\":{\"_to\":\"the receiver addresss\"}},\"isAllowedToDrink(address)\":{\"details\":\"it helps when contract is restricted to requests count.\"},\"isWhitelisted(address)\":{\"details\":\"it helps when contract is restricted to whitelisted addresses\"},\"updateCupSize(uint256)\":{\"params\":{\"_cupSize\":\"the amount that can be received by users\"}},\"updateMaxDrinkCount(uint256)\":{\"params\":{\"_maxDrinkCount\":\"the maximum number of times the drink function can be called\"}},\"updateTokenPrice(uint256)\":{\"params\":{\"_tokenPrice\":\"the price of each token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"addWhitelistedMultiple(address[],bool[])\":{\"notice\":\"Add multiple addresses to the whitelisted list\"},\"drink(address)\":{\"notice\":\"send tokens to `_to`\"},\"isAllowedToDrink(address)\":{\"notice\":\"return true if the user request counts are less than or equal to maxDrinkCount, otherwise retuens false\"},\"isWhitelisted(address)\":{\"notice\":\"return true if the address is whitelisted, otherwise false\"},\"toggleRestrictToMaxDrinkCount()\":{\"notice\":\"toggle restrictToMaxReq\"},\"toggleRestrictToWhitelisted()\":{\"notice\":\"toggle restrictToWhitelisted\"},\"updateCupSize(uint256)\":{\"notice\":\"update the amount that can be received by users\"},\"updateMaxDrinkCount(uint256)\":{\"notice\":\"update the token price.\"},\"updateTokenPrice(uint256)\":{\"notice\":\"update the token price.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZkpFaucet.sol\":\"ZkpFaucet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/ZkpFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Claimable.sol\\\";\\nimport \\\"./utils/ImmutableOwnable.sol\\\";\\n\\n// When called `drink`, it sends tokens to the `_to`\\n// As a prerequisite, it shall get enough tokens on the balance\\ncontract ZkpFaucet is Claimable, ImmutableOwnable {\\n    address public immutable token;\\n    uint256 public cupSize;\\n    uint256 public tokenPrice;\\n    uint256 public maxAmountToPay;\\n    uint256 public maxDrinkCount;\\n\\n    // @notice  store the whitelisted addresses who can drink\\n    mapping(address => bool) public whitelistedAddresses;\\n    // @notice store the number of times each user has drank\\n    mapping(address => uint256) public drinkCount;\\n\\n    // @notice enabling/disabling check for whitelisted addresses\\n    bool public restrictToWhitelisted;\\n    // @notice enabling/disabling check for requests count\\n    bool public restrictToMaxDrinkCount;\\n\\n    constructor(\\n        address _owner,\\n        address _token,\\n        uint256 _tokenPrice,\\n        uint256 _maxAmountToPay,\\n        uint256 _cupSize,\\n        uint256 _maxDrinkCount\\n    ) ImmutableOwnable(_owner) {\\n        require(_cupSize > 0, \\\"invalid cup size\\\");\\n        require(_token != address(0), \\\"invalid token address\\\");\\n\\n        token = _token;\\n        tokenPrice = _tokenPrice;\\n        cupSize = _cupSize;\\n        maxAmountToPay = _maxAmountToPay;\\n        maxDrinkCount = _maxDrinkCount;\\n    }\\n\\n    /**\\n     * @notice if restrictToWhitelisted is true, then\\n     * check if the sender is whitelisted\\n     */\\n    modifier onlyWhitelisted(address _address) {\\n        require(\\n            !restrictToWhitelisted || isWhitelisted(_address),\\n            \\\"Not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice if restrictToMaxDrinkCount is true, then\\n     * check if the sender is already received token\\n     */\\n    modifier checkDrinkCount(address _address) {\\n        require(\\n            !restrictToMaxDrinkCount || isAllowedToDrink(_address),\\n            \\\"Too much drink count\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice if token price is more than 0, then\\n     * check the value\\n     */\\n    modifier validatePrice() {\\n        require(msg.value <= maxAmountToPay, \\\"High value\\\");\\n        require(msg.value >= tokenPrice, \\\"Low value\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice return true if the address is whitelisted, otherwise false\\n     * @dev it helps when contract is restricted to whitelisted addresses\\n     */\\n    function isWhitelisted(address _account) public view returns (bool) {\\n        return whitelistedAddresses[_account];\\n    }\\n\\n    /**\\n     * @notice return true if the user request counts are\\n     * less than or equal to maxDrinkCount, otherwise retuens false\\n     * @dev it helps when contract is restricted to requests count.\\n     */\\n    function isAllowedToDrink(address _account) public view returns (bool) {\\n        return drinkCount[_account] < maxDrinkCount;\\n    }\\n\\n    /**\\n     * @notice send tokens to `_to`\\n     * @param _to the receiver addresss\\n     * @dev if restrictToWhitelisted is true, then check if the\\n     * sender is whitelisted.\\n     * if the restrictToMaxReq is true, then check if the\\n     * sender is already received token.\\n     */\\n    function drink(address _to)\\n        external\\n        payable\\n        validatePrice\\n        onlyWhitelisted(msg.sender)\\n        checkDrinkCount(_to)\\n    {\\n        drinkCount[_to]++;\\n\\n        safeTransfer(token, _to, getCupSize(msg.value));\\n    }\\n\\n    function getCupSize(uint256 _amountToPay) public view returns (uint256) {\\n        return tokenPrice > 0 ? _amountToPay / tokenPrice : cupSize;\\n    }\\n\\n    function safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory data) = _token.call(\\n            abi.encodeWithSelector(0xa9059cbb, _to, _value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    // Owner functions\\n    /**\\n     * @notice toggle restrictToWhitelisted\\n     */\\n    function toggleRestrictToWhitelisted() external onlyOwner {\\n        restrictToWhitelisted = !restrictToWhitelisted;\\n    }\\n\\n    /**\\n     * @notice toggle restrictToMaxReq\\n     */\\n    function toggleRestrictToMaxDrinkCount() external onlyOwner {\\n        restrictToMaxDrinkCount = !restrictToMaxDrinkCount;\\n    }\\n\\n    /**\\n     * @notice Add multiple addresses to the whitelisted list\\n     * @param _whitelistedAddresses array of addresses to be added\\n     * @param _whitelisted array of boolen values to be mapped to the addresses\\n     */\\n    function addWhitelistedMultiple(\\n        address[] calldata _whitelistedAddresses,\\n        bool[] calldata _whitelisted\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _whitelistedAddresses.length; ) {\\n            whitelistedAddresses[_whitelistedAddresses[i]] = _whitelisted[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice update the amount that can be received by users\\n     * @param _cupSize the amount that can be received by users\\n     */\\n    function updateCupSize(uint256 _cupSize) external onlyOwner {\\n        require(_cupSize > 0, \\\"invalid size\\\");\\n        cupSize = _cupSize;\\n    }\\n\\n    /**\\n     * @notice update the token price.\\n     * @param _tokenPrice the price of each token\\n     */\\n    function updateTokenPrice(uint256 _tokenPrice) external onlyOwner {\\n        tokenPrice = _tokenPrice;\\n    }\\n\\n    /**\\n     * @notice update the token price.\\n     * @param _maxDrinkCount the maximum number of times the\\n     * drink function can be called\\n     */\\n    function updateMaxDrinkCount(uint256 _maxDrinkCount) external onlyOwner {\\n        require(_maxDrinkCount > 0, \\\"invalid max request count\\\");\\n        maxDrinkCount = _maxDrinkCount;\\n    }\\n\\n    function claimErc20(\\n        address _claimedToken,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(_to != address(0), \\\"recipient cannot be 0\\\");\\n\\n        _claimErc20(_claimedToken, _to, _amount);\\n    }\\n\\n    function claimNative(address _to) external onlyOwner {\\n        require(_to != address(0), \\\"recipient cannot be 0\\\");\\n\\n        (bool sent, ) = _to.call{ value: address(this).balance }(\\\"\\\"); // solhint-disable-line avoid-low-level-calls\\n        require(sent, \\\"Failed to send native\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x332e076ae5c8b512e59a29e67ab441f7a9e366fb92d689741975284fd36dcc08\",\"license\":\"MIT\"},\"contracts/utils/Claimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Claimable\\n * @notice It withdraws accidentally sent tokens from this contract.\\n */\\ncontract Claimable {\\n    bytes4 private constant SELECTOR_TRANSFER =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    /// @dev Withdraws ERC20 tokens from this contract\\n    /// (take care of reentrancy attack risk mitigation)\\n    function _claimErc20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(SELECTOR_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"claimErc20: TRANSFER_FAILED\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x702e63e7eef33ed5490abd4a58db7074a1bcf1b055057cbbbdbeaa4112f5c437\",\"license\":\"MIT\"},\"contracts/utils/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xa7fcff1c9e37b9c757c39cf83b9149b440de47f72a1fb77426a75520fedead5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200143738038062001437833981016040819052620000349162000184565b856001600160a01b038116620000915760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b60601b6001600160601b03191660805281620000e35760405162461bcd60e51b815260206004820152601060248201526f696e76616c6964206375702073697a6560801b604482015260640162000088565b6001600160a01b0385166200013b5760405162461bcd60e51b815260206004820152601560248201527f696e76616c696420746f6b656e20616464726573730000000000000000000000604482015260640162000088565b60609490941b6001600160601b03191660a05260019290925560009190915560025560035550620001e0565b80516001600160a01b03811681146200017f57600080fd5b919050565b60008060008060008060c087890312156200019d578182fd5b620001a88762000167565b9550620001b86020880162000167565b945060408701519350606087015192506080870151915060a087015190509295509295509295565b60805160601c60a05160601c6111ec6200024b6000396000818161047d0152610a720152600081816101d1015281816104a10152818161056a015281816105ed015281816106b101528181610725015281816107fa01528181610aa20152610c0e01526111ec6000f3fe6080604052600436106101755760003560e01c8063870ae95e116100cb578063e733c4161161007f578063f331330011610059578063f331330014610435578063f40cee7c14610455578063fc0c546a1461046b57600080fd5b8063e733c416146103ec578063ecdc6327146103ff578063ed0fe4e01461041557600080fd5b80639303422c116100b05780639303422c1461038a578063a50334ce1461039f578063c9a5ac3a146103bf57600080fd5b8063870ae95e1461035457806392a70fb01461036a57600080fd5b806337278e8f1161012d57806366c256351161010757806366c25635146102d4578063676c0d77146103105780637ff9b5961461033057600080fd5b806337278e8f146102665780633af32abf1461027b5780633b7139ed146102b457600080fd5b80631c85a2bf1161015e5780631c85a2bf1461020b5780632329895d1461022d57806334aeabe41461024c57600080fd5b806306c933d81461017a578063117803e3146101bf575b600080fd5b34801561018657600080fd5b506101aa610195366004611039565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156101cb57600080fd5b506101f37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b6565b34801561021757600080fd5b5061022b610226366004611136565b61049f565b005b34801561023957600080fd5b506006546101aa90610100900460ff1681565b34801561025857600080fd5b506006546101aa9060ff1681565b34801561027257600080fd5b5061022b610568565b34801561028757600080fd5b506101aa610296366004611039565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156102c057600080fd5b5061022b6102cf366004611136565b6105eb565b3480156102e057600080fd5b506101aa6102ef366004611039565b6003546001600160a01b039091166000908152600560205260409020541090565b34801561031c57600080fd5b5061022b61032b366004611136565b6106af565b34801561033c57600080fd5b5061034660015481565b6040519081526020016101b6565b34801561036057600080fd5b5061034660005481565b34801561037657600080fd5b5061022b61038536600461105a565b610723565b34801561039657600080fd5b5061022b6107f8565b3480156103ab57600080fd5b506103466103ba366004611136565b610884565b3480156103cb57600080fd5b506103466103da366004611039565b60056020526000908152604090205481565b61022b6103fa366004611039565b6108aa565b34801561040b57600080fd5b5061034660025481565b34801561042157600080fd5b5061022b610430366004611039565b610aa0565b34801561044157600080fd5b5061022b610450366004611095565b610c0c565b34801561046157600080fd5b5061034660035481565b34801561047757600080fd5b506101f37f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146105135760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064015b60405180910390fd5b600081116105635760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642073697a650000000000000000000000000000000000000000604482015260640161050a565b600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146105d75760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6006805460ff19811660ff90911615179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461065a5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b600081116106aa5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206d6178207265717565737420636f756e7400000000000000604482015260640161050a565b600355565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461071e5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b600155565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146107925760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6001600160a01b0382166107e85760405162461bcd60e51b815260206004820152601560248201527f726563697069656e742063616e6e6f7420626520300000000000000000000000604482015260640161050a565b6107f3838383610d2b565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146108675760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6006805461ff001981166101009182900460ff1615909102179055565b60008060015411610897576000546108a4565b6001546108a49083611187565b92915050565b6002543411156108fc5760405162461bcd60e51b815260206004820152600a60248201527f486967682076616c756500000000000000000000000000000000000000000000604482015260640161050a565b60015434101561094e5760405162461bcd60e51b815260206004820152600960248201527f4c6f772076616c75650000000000000000000000000000000000000000000000604482015260640161050a565b600654339060ff16158061097a57506001600160a01b03811660009081526004602052604090205460ff165b6109c65760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c69737465640000000000000000000000000000000000604482015260640161050a565b6006548290610100900460ff1615806109f857506003546001600160a01b038216600090815260056020526040902054105b610a445760405162461bcd60e51b815260206004820152601460248201527f546f6f206d756368206472696e6b20636f756e74000000000000000000000000604482015260640161050a565b6001600160a01b0383166000908152600560205260408120805491610a68836111a7565b91905055506107f37f000000000000000000000000000000000000000000000000000000000000000084610a9b34610884565b610e84565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610b0f5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6001600160a01b038116610b655760405162461bcd60e51b815260206004820152601560248201527f726563697069656e742063616e6e6f7420626520300000000000000000000000604482015260640161050a565b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114610bb2576040519150601f19603f3d011682016040523d82523d6000602084013e610bb7565b606091505b5050905080610c085760405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f2073656e64206e61746976650000000000000000000000604482015260640161050a565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610c7b5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b60005b83811015610d2457828282818110610ca657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cbb91906110fe565b60046000878785818110610cdf57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cf49190611039565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610c7e565b5050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905291516000928392871691610dcc919061114e565b6000604051808303816000865af19150503d8060008114610e09576040519150601f19603f3d011682016040523d82523d6000602084013e610e0e565b606091505b5091509150818015610e38575080511580610e38575080806020019051810190610e38919061111a565b610d245760405162461bcd60e51b815260206004820152601b60248201527f636c61696d45726332303a205452414e534645525f4641494c45440000000000604482015260640161050a565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691610ef5919061114e565b6000604051808303816000865af19150503d8060008114610f32576040519150601f19603f3d011682016040523d82523d6000602084013e610f37565b606091505b5091509150818015610f61575080511580610f61575080806020019051810190610f61919061111a565b610d245760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161050a565b80356001600160a01b0381168114610fea57600080fd5b919050565b60008083601f840112611000578182fd5b50813567ffffffffffffffff811115611017578182fd5b6020830191508360208260051b850101111561103257600080fd5b9250929050565b60006020828403121561104a578081fd5b61105382610fd3565b9392505050565b60008060006060848603121561106e578182fd5b61107784610fd3565b925061108560208501610fd3565b9150604084013590509250925092565b600080600080604085870312156110aa578081fd5b843567ffffffffffffffff808211156110c1578283fd5b6110cd88838901610fef565b909650945060208701359150808211156110e5578283fd5b506110f287828801610fef565b95989497509550505050565b60006020828403121561110f578081fd5b8135611053816111ce565b60006020828403121561112b578081fd5b8151611053816111ce565b600060208284031215611147578081fd5b5035919050565b60008251815b8181101561116e5760208186018101518583015201611154565b8181111561117c5782828501525b509190910192915050565b6000826111a257634e487b7160e01b81526012600452602481fd5b500490565b60006000198214156111c757634e487b7160e01b81526011600452602481fd5b5060010190565b80151581146111dc57600080fd5b5056fea164736f6c6343000804000a",
  "deployedBytecode": "0x6080604052600436106101755760003560e01c8063870ae95e116100cb578063e733c4161161007f578063f331330011610059578063f331330014610435578063f40cee7c14610455578063fc0c546a1461046b57600080fd5b8063e733c416146103ec578063ecdc6327146103ff578063ed0fe4e01461041557600080fd5b80639303422c116100b05780639303422c1461038a578063a50334ce1461039f578063c9a5ac3a146103bf57600080fd5b8063870ae95e1461035457806392a70fb01461036a57600080fd5b806337278e8f1161012d57806366c256351161010757806366c25635146102d4578063676c0d77146103105780637ff9b5961461033057600080fd5b806337278e8f146102665780633af32abf1461027b5780633b7139ed146102b457600080fd5b80631c85a2bf1161015e5780631c85a2bf1461020b5780632329895d1461022d57806334aeabe41461024c57600080fd5b806306c933d81461017a578063117803e3146101bf575b600080fd5b34801561018657600080fd5b506101aa610195366004611039565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156101cb57600080fd5b506101f37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b6565b34801561021757600080fd5b5061022b610226366004611136565b61049f565b005b34801561023957600080fd5b506006546101aa90610100900460ff1681565b34801561025857600080fd5b506006546101aa9060ff1681565b34801561027257600080fd5b5061022b610568565b34801561028757600080fd5b506101aa610296366004611039565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156102c057600080fd5b5061022b6102cf366004611136565b6105eb565b3480156102e057600080fd5b506101aa6102ef366004611039565b6003546001600160a01b039091166000908152600560205260409020541090565b34801561031c57600080fd5b5061022b61032b366004611136565b6106af565b34801561033c57600080fd5b5061034660015481565b6040519081526020016101b6565b34801561036057600080fd5b5061034660005481565b34801561037657600080fd5b5061022b61038536600461105a565b610723565b34801561039657600080fd5b5061022b6107f8565b3480156103ab57600080fd5b506103466103ba366004611136565b610884565b3480156103cb57600080fd5b506103466103da366004611039565b60056020526000908152604090205481565b61022b6103fa366004611039565b6108aa565b34801561040b57600080fd5b5061034660025481565b34801561042157600080fd5b5061022b610430366004611039565b610aa0565b34801561044157600080fd5b5061022b610450366004611095565b610c0c565b34801561046157600080fd5b5061034660035481565b34801561047757600080fd5b506101f37f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146105135760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064015b60405180910390fd5b600081116105635760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642073697a650000000000000000000000000000000000000000604482015260640161050a565b600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146105d75760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6006805460ff19811660ff90911615179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461065a5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b600081116106aa5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206d6178207265717565737420636f756e7400000000000000604482015260640161050a565b600355565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461071e5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b600155565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146107925760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6001600160a01b0382166107e85760405162461bcd60e51b815260206004820152601560248201527f726563697069656e742063616e6e6f7420626520300000000000000000000000604482015260640161050a565b6107f3838383610d2b565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146108675760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6006805461ff001981166101009182900460ff1615909102179055565b60008060015411610897576000546108a4565b6001546108a49083611187565b92915050565b6002543411156108fc5760405162461bcd60e51b815260206004820152600a60248201527f486967682076616c756500000000000000000000000000000000000000000000604482015260640161050a565b60015434101561094e5760405162461bcd60e51b815260206004820152600960248201527f4c6f772076616c75650000000000000000000000000000000000000000000000604482015260640161050a565b600654339060ff16158061097a57506001600160a01b03811660009081526004602052604090205460ff165b6109c65760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c69737465640000000000000000000000000000000000604482015260640161050a565b6006548290610100900460ff1615806109f857506003546001600160a01b038216600090815260056020526040902054105b610a445760405162461bcd60e51b815260206004820152601460248201527f546f6f206d756368206472696e6b20636f756e74000000000000000000000000604482015260640161050a565b6001600160a01b0383166000908152600560205260408120805491610a68836111a7565b91905055506107f37f000000000000000000000000000000000000000000000000000000000000000084610a9b34610884565b610e84565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610b0f5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b6001600160a01b038116610b655760405162461bcd60e51b815260206004820152601560248201527f726563697069656e742063616e6e6f7420626520300000000000000000000000604482015260640161050a565b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114610bb2576040519150601f19603f3d011682016040523d82523d6000602084013e610bb7565b606091505b5050905080610c085760405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f2073656e64206e61746976650000000000000000000000604482015260640161050a565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610c7b5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b604482015260640161050a565b60005b83811015610d2457828282818110610ca657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cbb91906110fe565b60046000878785818110610cdf57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cf49190611039565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610c7e565b5050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905291516000928392871691610dcc919061114e565b6000604051808303816000865af19150503d8060008114610e09576040519150601f19603f3d011682016040523d82523d6000602084013e610e0e565b606091505b5091509150818015610e38575080511580610e38575080806020019051810190610e38919061111a565b610d245760405162461bcd60e51b815260206004820152601b60248201527f636c61696d45726332303a205452414e534645525f4641494c45440000000000604482015260640161050a565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691610ef5919061114e565b6000604051808303816000865af19150503d8060008114610f32576040519150601f19603f3d011682016040523d82523d6000602084013e610f37565b606091505b5091509150818015610f61575080511580610f61575080806020019051810190610f61919061111a565b610d245760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161050a565b80356001600160a01b0381168114610fea57600080fd5b919050565b60008083601f840112611000578182fd5b50813567ffffffffffffffff811115611017578182fd5b6020830191508360208260051b850101111561103257600080fd5b9250929050565b60006020828403121561104a578081fd5b61105382610fd3565b9392505050565b60008060006060848603121561106e578182fd5b61107784610fd3565b925061108560208501610fd3565b9150604084013590509250925092565b600080600080604085870312156110aa578081fd5b843567ffffffffffffffff808211156110c1578283fd5b6110cd88838901610fef565b909650945060208701359150808211156110e5578283fd5b506110f287828801610fef565b95989497509550505050565b60006020828403121561110f578081fd5b8135611053816111ce565b60006020828403121561112b578081fd5b8151611053816111ce565b600060208284031215611147578081fd5b5035919050565b60008251815b8181101561116e5760208186018101518583015201611154565b8181111561117c5782828501525b509190910192915050565b6000826111a257634e487b7160e01b81526012600452602481fd5b500490565b60006000198214156111c757634e487b7160e01b81526011600452602481fd5b5060010190565b80151581146111dc57600080fd5b5056fea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addWhitelistedMultiple(address[],bool[])": {
        "params": {
          "_whitelisted": "array of boolen values to be mapped to the addresses",
          "_whitelistedAddresses": "array of addresses to be added"
        }
      },
      "drink(address)": {
        "details": "if restrictToWhitelisted is true, then check if the sender is whitelisted. if the restrictToMaxReq is true, then check if the sender is already received token.",
        "params": {
          "_to": "the receiver addresss"
        }
      },
      "isAllowedToDrink(address)": {
        "details": "it helps when contract is restricted to requests count."
      },
      "isWhitelisted(address)": {
        "details": "it helps when contract is restricted to whitelisted addresses"
      },
      "updateCupSize(uint256)": {
        "params": {
          "_cupSize": "the amount that can be received by users"
        }
      },
      "updateMaxDrinkCount(uint256)": {
        "params": {
          "_maxDrinkCount": "the maximum number of times the drink function can be called"
        }
      },
      "updateTokenPrice(uint256)": {
        "params": {
          "_tokenPrice": "the price of each token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "addWhitelistedMultiple(address[],bool[])": {
        "notice": "Add multiple addresses to the whitelisted list"
      },
      "drink(address)": {
        "notice": "send tokens to `_to`"
      },
      "isAllowedToDrink(address)": {
        "notice": "return true if the user request counts are less than or equal to maxDrinkCount, otherwise retuens false"
      },
      "isWhitelisted(address)": {
        "notice": "return true if the address is whitelisted, otherwise false"
      },
      "toggleRestrictToMaxDrinkCount()": {
        "notice": "toggle restrictToMaxReq"
      },
      "toggleRestrictToWhitelisted()": {
        "notice": "toggle restrictToWhitelisted"
      },
      "updateCupSize(uint256)": {
        "notice": "update the amount that can be received by users"
      },
      "updateMaxDrinkCount(uint256)": {
        "notice": "update the token price."
      },
      "updateTokenPrice(uint256)": {
        "notice": "update the token price."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4947,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "cupSize",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4949,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "tokenPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4951,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "maxAmountToPay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4953,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "maxDrinkCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4957,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4961,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "drinkCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4963,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "restrictToWhitelisted",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 4965,
        "contract": "contracts/ZkpFaucet.sol:ZkpFaucet",
        "label": "restrictToMaxDrinkCount",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}