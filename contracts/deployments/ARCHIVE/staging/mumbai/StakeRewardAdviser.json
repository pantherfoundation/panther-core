{
  "address": "0xf7D3CfCc550E087B5db12fb8C2B45F181a94fB73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "stakeType",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmountToSharesScaledFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "action",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "getRewardAdvice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "createSharesFor",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "sharesToCreate",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "redeemSharesFrom",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "sharesToRedeem",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "sendRewardTo",
              "type": "address"
            }
          ],
          "internalType": "struct IRewardAdviser.Advice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe78d165df8e8ab4f9b1c074a67a6e9796381e409c43d94f9e515f01e7338438",
  "receipt": {
    "to": null,
    "from": "0x5FFfdD1dE35fFC2f66bFD78E064C280FeD9E68de",
    "contractAddress": "0xf7D3CfCc550E087B5db12fb8C2B45F181a94fB73",
    "transactionIndex": 30,
    "gasUsed": "474312",
    "logsBloom": "0x
    "blockHash": "0x25ddf70cb735fd7c4304116f24a68c0ae3d893695a1079f3682617e992d87d09",
    "transactionHash": "0xbe78d165df8e8ab4f9b1c074a67a6e9796381e409c43d94f9e515f01e7338438",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 25371525,
        "transactionHash": "0xbe78d165df8e8ab4f9b1c074a67a6e9796381e409c43d94f9e515f01e7338438",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005fffdd1de35ffc2f66bfd78e064c280fed9e68de",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000002e4e37efa1c3000000000000000000000000000000000000000000000000088dfa109113b3a8600000000000000000000000000000000000000000000086482159c9509dee17800000000000000000000000000000000000000000000000088dcbc2592411e560000000000000000000000000000000000000000000008648218817888d8fda8",
        "logIndex": 152,
        "blockHash": "0x25ddf70cb735fd7c4304116f24a68c0ae3d893695a1079f3682617e992d87d09"
      }
    ],
    "blockNumber": 25371525,
    "cumulativeGasUsed": "9402636",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4ab0941a",
    1000000000
  ],
  "numDeployments": 1,
  "solcInputHash": "496176f3b3122619b8c2f798da67ee81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"stakeType\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmountToSharesScaledFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getRewardAdvice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"createSharesFor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"sharesToCreate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"redeemSharesFrom\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"sharesToRedeem\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sendRewardTo\",\"type\":\"address\"}],\"internalType\":\"struct IRewardAdviser.Advice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"It acts as the \\\"RewardAdviser\\\" for the \\\"RewardMaster\\\": the latter calls this contract to process messages from the \\\"Staking\\\" contract.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"StakeRewardAdviser\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"It \\\"advises\\\" the \\\"RewardMaster\\\" on staking rewards (\\\"shares\\\").\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeRewardAdviser.sol\":\"StakeRewardAdviser\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/StakeRewardAdviser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"./actions/StakingMsgProcessor.sol\\\";\\nimport \\\"./interfaces/IRewardAdviser.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\n\\n/**\\n * @title StakeRewardAdviser\\n * @notice It \\\"advises\\\" the \\\"RewardMaster\\\" on staking rewards (\\\"shares\\\").\\n * @dev It acts as the \\\"RewardAdviser\\\" for the \\\"RewardMaster\\\": the latter calls\\n * this contract to process messages from the \\\"Staking\\\" contract.\\n */\\ncontract StakeRewardAdviser is StakingMsgProcessor, Utils, IRewardAdviser {\\n    // solhint-disable var-name-mixedcase\\n    bytes4 private immutable STAKED;\\n    bytes4 private immutable UNSTAKED;\\n    uint256 public immutable FACTOR;\\n    // solhint-enable var-name-mixedcase\\n\\n    uint256 private constant SCALE = 1e9;\\n\\n    constructor(bytes4 stakeType, uint256 stakeAmountToSharesScaledFactor) {\\n        require(\\n            stakeType != bytes4(0) && stakeAmountToSharesScaledFactor != 0,\\n            \\\"PSA:E1\\\"\\n        );\\n        STAKED = _encodeStakeActionType(stakeType);\\n        UNSTAKED = _encodeUnstakeActionType(stakeType);\\n        FACTOR = stakeAmountToSharesScaledFactor;\\n    }\\n\\n    function getRewardAdvice(bytes4 action, bytes memory message)\\n        external\\n        view\\n        override\\n        returns (Advice memory)\\n    {\\n        (address staker, uint96 amount, , , , , ) = _unpackStakingActionMsg(\\n            message\\n        );\\n        require(staker != address(0), \\\"PSA: unexpected zero staker\\\");\\n        require(amount != 0, \\\"PSA: unexpected zero amount\\\");\\n\\n        uint256 shares = (uint256(amount) * FACTOR) / SCALE;\\n\\n        if (action == STAKED) {\\n            return\\n                Advice(\\n                    staker, // createSharesFor\\n                    safe96(shares), // sharesToCreate\\n                    address(0), // redeemSharesFrom\\n                    0, // sharesToRedeem\\n                    address(0) // sendRewardTo\\n                );\\n        }\\n        if (action == UNSTAKED) {\\n            return\\n                Advice(\\n                    address(0), // createSharesFor\\n                    0, // sharesToCreate\\n                    staker, // redeemSharesFrom\\n                    safe96(shares), // sharesToRedeem\\n                    staker // sendRewardTo\\n                );\\n        }\\n\\n        revert(\\\"PSA: unsupported action\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3a8339f2463ee3a59f16310eb182bca864fdc5ec27280c6a21f0469a9104f5e6\",\"license\":\"UNLICENSED\"},\"contracts/actions/StakingMsgProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IStakingTypes.sol\\\";\\n\\nabstract contract StakingMsgProcessor {\\n    bytes4 internal constant STAKE_ACTION = bytes4(keccak256(\\\"stake\\\"));\\n    bytes4 internal constant UNSTAKE_ACTION = bytes4(keccak256(\\\"unstake\\\"));\\n\\n    function _encodeStakeActionType(bytes4 stakeType)\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return bytes4(keccak256(abi.encodePacked(STAKE_ACTION, stakeType)));\\n    }\\n\\n    function _encodeUnstakeActionType(bytes4 stakeType)\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return bytes4(keccak256(abi.encodePacked(UNSTAKE_ACTION, stakeType)));\\n    }\\n\\n    function _packStakingActionMsg(\\n        address staker,\\n        IStakingTypes.Stake memory stake,\\n        bytes calldata data\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                staker, // address\\n                stake.amount, // uint96\\n                stake.id, // uint32\\n                stake.stakedAt, // uint32\\n                stake.lockedTill, // uint32\\n                stake.claimedAt, // uint32\\n                data // bytes\\n            );\\n    }\\n\\n    // For efficiency we use \\\"packed\\\" (rather than \\\"ABI\\\") encoding.\\n    // It results in shorter data, but requires custom unpack function.\\n    function _unpackStakingActionMsg(bytes memory message)\\n        internal\\n        pure\\n        returns (\\n            address staker,\\n            uint96 amount,\\n            uint32 id,\\n            uint32 stakedAt,\\n            uint32 lockedTill,\\n            uint32 claimedAt,\\n            bytes memory data\\n        )\\n    {\\n        // staker, amount, id and 3 timestamps occupy exactly 48 bytes\\n        // (`data` may be of zero length)\\n        require(message.length >= 48, \\\"SMP: unexpected msg length\\\");\\n\\n        uint256 stakerAndAmount;\\n        uint256 idAndStamps;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // the 1st word (32 bytes) contains the `message.length`\\n            // we need the (entire) 2nd word ..\\n            stakerAndAmount := mload(add(message, 0x20))\\n            // .. and (16 bytes of) the 3rd word\\n            idAndStamps := mload(add(message, 0x40))\\n        }\\n\\n        staker = address(uint160(stakerAndAmount >> 96));\\n        amount = uint96(stakerAndAmount & 0xFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        id = uint32((idAndStamps >> 224) & 0xFFFFFFFF);\\n        stakedAt = uint32((idAndStamps >> 192) & 0xFFFFFFFF);\\n        lockedTill = uint32((idAndStamps >> 160) & 0xFFFFFFFF);\\n        claimedAt = uint32((idAndStamps >> 128) & 0xFFFFFFFF);\\n\\n        uint256 dataLength = message.length - 48;\\n        data = new bytes(dataLength);\\n        for (uint256 i = 0; i < dataLength; i++) {\\n            data[i] = message[i + 48];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7262083031b3f49a56ede1d53de2b3a6f113eb868dd8b65845f1d019180c317c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardAdviser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardAdviser {\\n    struct Advice {\\n        // advice on new \\\"shares\\\" (in the reward pool) to create\\n        address createSharesFor;\\n        uint96 sharesToCreate;\\n        // advice on \\\"shares\\\" to redeem\\n        address redeemSharesFrom;\\n        uint96 sharesToRedeem;\\n        // advice on address the reward against redeemed shares to send to\\n        address sendRewardTo;\\n    }\\n\\n    function getRewardAdvice(bytes4 action, bytes memory message)\\n        external\\n        returns (Advice memory);\\n}\\n\",\"keccak256\":\"0x9ecf725af20a11f29d94406fc335d3b20afd60dfb9e398a409966e0568ac1bbb\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\ninterface IStakingTypes {\\n    // Stake type terms\\n    struct Terms {\\n        // if stakes of this kind allowed\\n        bool isEnabled;\\n        // if messages on stakes to be sent to the {RewardMaster}\\n        bool isRewarded;\\n        // limit on the minimum amount staked, no limit if zero\\n        uint32 minAmountScaled;\\n        // limit on the maximum amount staked, no limit if zero\\n        uint32 maxAmountScaled;\\n        // Stakes not accepted before this time, has no effect if zero\\n        uint32 allowedSince;\\n        // Stakes not accepted after this time, has no effect if zero\\n        uint32 allowedTill;\\n        // One (at least) of the following three params must be non-zero\\n        // if non-zero, overrides both `exactLockPeriod` and `minLockPeriod`\\n        uint32 lockedTill;\\n        // ignored if non-zero `lockedTill` defined, overrides `minLockPeriod`\\n        uint32 exactLockPeriod;\\n        // has effect only if both `lockedTill` and `exactLockPeriod` are zero\\n        uint32 minLockPeriod;\\n    }\\n\\n    struct Stake {\\n        // index in the `Stake[]` array of `stakes`\\n        uint32 id;\\n        // defines Terms\\n        bytes4 stakeType;\\n        // time this stake was created at\\n        uint32 stakedAt;\\n        // time this stake can be claimed at\\n        uint32 lockedTill;\\n        // time this stake was claimed at (unclaimed if 0)\\n        uint32 claimedAt;\\n        // amount of tokens on this stake (assumed to be less 1e27)\\n        uint96 amount;\\n        // address stake voting power is delegated to\\n        address delegatee;\\n    }\\n}\\n\",\"keccak256\":\"0xdb6f4a5e54fedb85152a6c80104f98a87713b194e3fd157565c4bd20058864be\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nabstract contract Utils {\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x792e9324cc764dbd45210aa817127d67fae28bee7dc9b91e98cd1253617b04e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161092638038061092683398101604081905261002f91610124565b6001600160e01b031982161580159061004757508015155b6100805760405162461bcd60e51b81526020600482015260066024820152655053413a453160d01b604482015260640160405180910390fd5b610089826100b5565b6001600160e01b03191660805261009f826100f9565b6001600160e01b03191660a05260c0525061015d565b60405163c3a0479560e01b60208201526001600160e01b0319821660248201526000906028015b604051602081830303815290604052805190602001209050919050565b604051637a3e3dfd60e01b60208201526001600160e01b0319821660248201526000906028016100dc565b60008060408385031215610136578182fd5b82516001600160e01b03198116811461014d578283fd5b6020939093015192949293505050565b60805160e01c60e01b60a05160e01c60e01b60c05161078861019e60003960008181604001526101fa015260006102cb0152600061023b01526107886000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806335815b951461003b578063e9cb032414610075575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100886100833660046105e3565b6100ed565b60405161006c9190600060a0820190506001600160a01b0380845116835260208401516bffffffffffffffffffffffff808216602086015282604087015116604086015280606087015116606086015250508060808501511660808401525092915050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290529080610122846103c5565b50505050509150915060006001600160a01b0316826001600160a01b031614156101935760405162461bcd60e51b815260206004820152601b60248201527f5053413a20756e6578706563746564207a65726f207374616b6572000000000060448201526064015b60405180910390fd5b6bffffffffffffffffffffffff81166101ee5760405162461bcd60e51b815260206004820152601b60248201527f5053413a20756e6578706563746564207a65726f20616d6f756e740000000000604482015260640161018a565b6000633b9aca0061022d7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff85166106fe565b61023791906106de565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160e01b031916866001600160e01b03191614156102c9576040518060a00160405280846001600160a01b0316815260200161029883610581565b6bffffffffffffffffffffffff1681526000602082018190526040820181905260609091015293506103bf92505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160e01b031916866001600160e01b0319161415610377576040518060a0016040528060006001600160a01b0316815260200160006bffffffffffffffffffffffff168152602001846001600160a01b0316815260200161034d83610581565b6bffffffffffffffffffffffff168152602001846001600160a01b031681525093505050506103bf565b60405162461bcd60e51b815260206004820152601760248201527f5053413a20756e737570706f7274656420616374696f6e000000000000000000604482015260640161018a565b92915050565b60008060008060008060606030885110156104225760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e677468000000000000604482015260640161018a565b602088015160408901518951606083901c99506bffffffffffffffffffffffff8316985060e082901c975063ffffffff60c083901c8116975060a083901c81169650608083901c16945060009061047b9060309061071d565b90508067ffffffffffffffff8111156104a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104ce576020820181803683370190505b50935060005b81811015610572578b6104e88260306106c6565b8151811061050657634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b85828151811061053157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061056a81610734565b9150506104d4565b50505050919395979092949650565b60006c0100000000000000000000000082106105df5760405162461bcd60e51b815260206004820152600860248201527f554e534146453936000000000000000000000000000000000000000000000000604482015260640161018a565b5090565b600080604083850312156105f5578182fd5b82357fffffffff0000000000000000000000000000000000000000000000000000000081168114610624578283fd5b9150602083013567ffffffffffffffff80821115610640578283fd5b818501915085601f830112610653578283fd5b81358181111561066557610665610765565b604051601f8201601f19908116603f0116810190838211818310171561068d5761068d610765565b816040528281528860208487010111156106a5578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600082198211156106d9576106d961074f565b500190565b6000826106f957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156107185761071861074f565b500290565b60008282101561072f5761072f61074f565b500390565b60006000198214156107485761074861074f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806335815b951461003b578063e9cb032414610075575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100886100833660046105e3565b6100ed565b60405161006c9190600060a0820190506001600160a01b0380845116835260208401516bffffffffffffffffffffffff808216602086015282604087015116604086015280606087015116606086015250508060808501511660808401525092915050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290529080610122846103c5565b50505050509150915060006001600160a01b0316826001600160a01b031614156101935760405162461bcd60e51b815260206004820152601b60248201527f5053413a20756e6578706563746564207a65726f207374616b6572000000000060448201526064015b60405180910390fd5b6bffffffffffffffffffffffff81166101ee5760405162461bcd60e51b815260206004820152601b60248201527f5053413a20756e6578706563746564207a65726f20616d6f756e740000000000604482015260640161018a565b6000633b9aca0061022d7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff85166106fe565b61023791906106de565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160e01b031916866001600160e01b03191614156102c9576040518060a00160405280846001600160a01b0316815260200161029883610581565b6bffffffffffffffffffffffff1681526000602082018190526040820181905260609091015293506103bf92505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160e01b031916866001600160e01b0319161415610377576040518060a0016040528060006001600160a01b0316815260200160006bffffffffffffffffffffffff168152602001846001600160a01b0316815260200161034d83610581565b6bffffffffffffffffffffffff168152602001846001600160a01b031681525093505050506103bf565b60405162461bcd60e51b815260206004820152601760248201527f5053413a20756e737570706f7274656420616374696f6e000000000000000000604482015260640161018a565b92915050565b60008060008060008060606030885110156104225760405162461bcd60e51b815260206004820152601a60248201527f534d503a20756e6578706563746564206d7367206c656e677468000000000000604482015260640161018a565b602088015160408901518951606083901c99506bffffffffffffffffffffffff8316985060e082901c975063ffffffff60c083901c8116975060a083901c81169650608083901c16945060009061047b9060309061071d565b90508067ffffffffffffffff8111156104a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104ce576020820181803683370190505b50935060005b81811015610572578b6104e88260306106c6565b8151811061050657634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b85828151811061053157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061056a81610734565b9150506104d4565b50505050919395979092949650565b60006c0100000000000000000000000082106105df5760405162461bcd60e51b815260206004820152600860248201527f554e534146453936000000000000000000000000000000000000000000000000604482015260640161018a565b5090565b600080604083850312156105f5578182fd5b82357fffffffff0000000000000000000000000000000000000000000000000000000081168114610624578283fd5b9150602083013567ffffffffffffffff80821115610640578283fd5b818501915085601f830112610653578283fd5b81358181111561066557610665610765565b604051601f8201601f19908116603f0116810190838211818310171561068d5761068d610765565b816040528281528860208487010111156106a5578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600082198211156106d9576106d961074f565b500190565b6000826106f957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156107185761071861074f565b500290565b60008282101561072f5761072f61074f565b500390565b60006000198214156107485761074861074f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "devdoc": {
    "details": "It acts as the \"RewardAdviser\" for the \"RewardMaster\": the latter calls this contract to process messages from the \"Staking\" contract.",
    "kind": "dev",
    "methods": {},
    "title": "StakeRewardAdviser",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "It \"advises\" the \"RewardMaster\" on staking rewards (\"shares\").",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}