{
  "address": "0x302ef721A5E78A3EFEBAFD823935bD031dF26B23",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pantherPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "_circuitId",
          "type": "uint160"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "queueId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numUtxosInBatch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leftLeafIndexInBusTree",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "busTreeNewRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "busBranchNewRoot",
          "type": "bytes32"
        }
      ],
      "name": "BusBatchOnboarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "branchIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "busBranchFinalRoot",
          "type": "bytes32"
        }
      ],
      "name": "BusBranchFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "queueId",
          "type": "uint256"
        }
      ],
      "name": "BusQueueOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "queueId",
          "type": "uint256"
        }
      ],
      "name": "BusQueueProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "queueId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accumReward",
          "type": "uint256"
        }
      ],
      "name": "BusQueueRewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservationRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minEmptyQueueAge",
          "type": "uint256"
        }
      ],
      "name": "BusQueueRewardParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usage",
          "type": "uint256"
        }
      ],
      "name": "BusQueueRewardReserveUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extraReseve",
          "type": "uint256"
        }
      ],
      "name": "BusQueueRewardReserved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "MinerRewarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "utxo",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "queueId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "utxoIndexInBatch",
          "type": "uint256"
        }
      ],
      "name": "UtxoBusQueued",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CIRCUIT_ID",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANTHER_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERIFIER",
      "outputs": [
        {
          "internalType": "contract IPantherVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "utxo",
          "type": "bytes32"
        }
      ],
      "name": "addUtxoToBusQueue",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "queueId",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "indexInQueue",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "utxos",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "addUtxosToBusQueue",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "firstUtxoQueueId",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "firstUtxoIndexInQueue",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "utxos",
          "type": "bytes32[]"
        }
      ],
      "name": "addUtxosToBusQueue",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "firstUtxoQueueId",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "firstUtxoIndexInQueue",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basePerUtxoReward",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getAllowedUtxosAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowedUtxos",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "queueId",
          "type": "uint32"
        }
      ],
      "name": "getBusQueue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "queueId",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "nUtxos",
              "type": "uint8"
            },
            {
              "internalType": "uint96",
              "name": "reward",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "potentialExtraReward",
              "type": "uint96"
            },
            {
              "internalType": "uint40",
              "name": "firstUtxoBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "lastUtxoBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "remainingBlocks",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "commitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BusQueues.BusQueueRec",
          "name": "queue",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBusQueuesStats",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "curQueueId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numPendingQueues",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "oldestPendingQueueId",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "rewardReserve",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBusTreeStats",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "numBatchesInBusTree",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numUtxosInBusTree",
          "type": "uint32"
        },
        {
          "internalType": "uint40",
          "name": "latestBranchFirstBatchBlock",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "latestBatchBlock",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "maxLength",
          "type": "uint32"
        }
      ],
      "name": "getOldestPendingQueues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "queueId",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "nUtxos",
              "type": "uint8"
            },
            {
              "internalType": "uint96",
              "name": "reward",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "potentialExtraReward",
              "type": "uint96"
            },
            {
              "internalType": "uint40",
              "name": "firstUtxoBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "lastUtxoBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "remainingBlocks",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "commitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BusQueues.BusQueueRec[]",
          "name": "queues",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParams",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "reservationRate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "minEmptyQueueAge",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUtxoSimulationTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "queueId",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct SnarkProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "onboardQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perMinuteUtxosLimit",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simulateAddUtxosToBusQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_perMinuteUtxosLimit",
          "type": "uint16"
        },
        {
          "internalType": "uint96",
          "name": "_basePerUtxoReward",
          "type": "uint96"
        },
        {
          "internalType": "uint16",
          "name": "reservationRate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "minEmptyQueueAge",
          "type": "uint16"
        }
      ],
      "name": "updateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utxoCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b4bca0e4af597c754031a38eab05c395da53049a9e340fb7c61ba2a7947f657",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x302ef721A5E78A3EFEBAFD823935bD031dF26B23",
    "transactionIndex": 6,
    "gasUsed": "3052164",
    "logsBloom": "0x
    "blockHash": "0x5433fa8df19dd69d7b6b4546d5fde1c320e763da89beabb81923a5c20d1ab79d",
    "transactionHash": "0x7b4bca0e4af597c754031a38eab05c395da53049a9e340fb7c61ba2a7947f657",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 44613594,
        "transactionHash": "0x7b4bca0e4af597c754031a38eab05c395da53049a9e340fb7c61ba2a7947f657",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c66271999cac0000000000000000000000000000000000000000000000000094a4af0c715909500000000000000000000000000000000000000000000051893c15ffcf8adb01c000000000000000000000000000000000000000000000000092de4c9ad7bc5d500000000000000000000000000000000000000000000051893ddc62412477adc",
        "logIndex": 11,
        "blockHash": "0x5433fa8df19dd69d7b6b4546d5fde1c320e763da89beabb81923a5c20d1ab79d"
      }
    ],
    "blockNumber": 44613594,
    "cumulativeGasUsed": "3894231",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0x4004C49aBb96B11D89A52DeCCa2D1522da7f3089",
    "0xfDfD920F2152565E9D7b589e4e9faeE6699AD4bd",
    "0xeeAfce13506847a19141A4513718df17383f4f7b",
    "0x1F200CDAE1D8cc04e16f764591fABd097A8eC43a"
  ],
  "numDeployments": 5,
  "solcInputHash": "8929a618e86647edd07b95deef0dbe59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pantherPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_circuitId\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"queueId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numUtxosInBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leftLeafIndexInBusTree\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"busTreeNewRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"busBranchNewRoot\",\"type\":\"bytes32\"}],\"name\":\"BusBatchOnboarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"branchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"busBranchFinalRoot\",\"type\":\"bytes32\"}],\"name\":\"BusBranchFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueId\",\"type\":\"uint256\"}],\"name\":\"BusQueueOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"queueId\",\"type\":\"uint256\"}],\"name\":\"BusQueueProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accumReward\",\"type\":\"uint256\"}],\"name\":\"BusQueueRewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservationRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minEmptyQueueAge\",\"type\":\"uint256\"}],\"name\":\"BusQueueRewardParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usage\",\"type\":\"uint256\"}],\"name\":\"BusQueueRewardReserveUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraReseve\",\"type\":\"uint256\"}],\"name\":\"BusQueueRewardReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"MinerRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"utxo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utxoIndexInBatch\",\"type\":\"uint256\"}],\"name\":\"UtxoBusQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CIRCUIT_ID\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANTHER_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER\",\"outputs\":[{\"internalType\":\"contract IPantherVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"utxo\",\"type\":\"bytes32\"}],\"name\":\"addUtxoToBusQueue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"queueId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"indexInQueue\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"utxos\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"addUtxosToBusQueue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"firstUtxoQueueId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"firstUtxoIndexInQueue\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"utxos\",\"type\":\"bytes32[]\"}],\"name\":\"addUtxosToBusQueue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"firstUtxoQueueId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"firstUtxoIndexInQueue\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePerUtxoReward\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getAllowedUtxosAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedUtxos\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"queueId\",\"type\":\"uint32\"}],\"name\":\"getBusQueue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"queueId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"nUtxos\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"potentialExtraReward\",\"type\":\"uint96\"},{\"internalType\":\"uint40\",\"name\":\"firstUtxoBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lastUtxoBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"remainingBlocks\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct BusQueues.BusQueueRec\",\"name\":\"queue\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusQueuesStats\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"curQueueId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numPendingQueues\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"oldestPendingQueueId\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"rewardReserve\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusTreeStats\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"numBatchesInBusTree\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numUtxosInBusTree\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"latestBranchFirstBatchBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"latestBatchBlock\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxLength\",\"type\":\"uint32\"}],\"name\":\"getOldestPendingQueues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"queueId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"nUtxos\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"potentialExtraReward\",\"type\":\"uint96\"},{\"internalType\":\"uint40\",\"name\":\"firstUtxoBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lastUtxoBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"remainingBlocks\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct BusQueues.BusQueueRec[]\",\"name\":\"queues\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reservationRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minEmptyQueueAge\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUtxoSimulationTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"queueId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct SnarkProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"onboardQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perMinuteUtxosLimit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simulateAddUtxosToBusQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_perMinuteUtxosLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"_basePerUtxoReward\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"reservationRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minEmptyQueueAge\",\"type\":\"uint16\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utxoCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addUtxosToBusQueue(bytes32[])\":{\"details\":\"If the current queue has no space left to add all UTXOs, a part of UTXOs only are added to the current queue until it gets full, then the remaining UTXOs are added to a new queue. Index of any UTXO (not just the 1st one) may be computed as follows: - index of UTXO in a queue increments by +1 with every new UTXO added,   (from 0 for the 1st UTXO in a queue up to `QUEUE_MAX_SIZE - 1`) - number of UTXOs added to the new queue (if there are such) equals to   `firstUtxoIndexInQueue + utxos[0].length - QUEUE_MAX_SIZE` - new queue (if created) has ID equal to `firstUtxoQueueId + 1`\",\"returns\":{\"firstUtxoIndexInQueue\":\"Index of `utxos[0]` in the queue\",\"firstUtxoQueueId\":\"ID of the queue which `utxos[0]` was added to\"}},\"onboardQueue(address,uint32,uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)))\":{\"details\":\"ZK-circuit public signals:\",\"params\":{\"inputs\":\"[8] - magicalConstraint (non-zero random number)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/PantherBusTree.sol\":\"PantherBusTree\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n// Constants\\n\\nuint256 constant IN_PRP_UTXOs = 1;\\nuint256 constant IN_UTXOs = 2 + IN_PRP_UTXOs;\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\nuint256 constant OUT_MAX_UTXOs = OUT_UTXOs;\\n// Number of UTXOs given as a reward for an \\\"advanced\\\" stake\\nuint256 constant OUT_RWRD_UTXOs = 2;\\n\\n// For overflow protection and circuits optimization\\n// (must be less than the FIELD_SIZE)\\nuint256 constant MAX_EXT_AMOUNT = 2 ** 96;\\nuint256 constant MAX_IN_CIRCUIT_AMOUNT = 2 ** 64;\\nuint256 constant MAX_TIMESTAMP = 2 ** 32;\\nuint256 constant MAX_ZASSET_ID = 2 ** 160;\\n\\n// Maximum amount for PRP\\nuint256 constant MAX_PRP_AMOUNT = (2 ** 64) - 1;\\n\\n// Token types\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant ERC20_TOKEN_TYPE = 0x00;\\nuint8 constant ERC721_TOKEN_TYPE = 0x10;\\nuint8 constant ERC1155_TOKEN_TYPE = 0x11;\\nuint8 constant NATIVE_TOKEN_TYPE = 0xFF;\\n\\n// ZAsset statuses\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant zASSET_ENABLED = 0x01;\\nuint8 constant zASSET_DISABLED = 0x02;\\nuint8 constant zASSET_UNKNOWN = 0x00;\\n\\n// UTXO data (opening values - encrypted and public) formats\\nuint8 constant UTXO_DATA_TYPE5 = 0x00; // for zero UTXO (no data to provide)\\nuint8 constant UTXO_DATA_TYPE1 = 0x01; // for UTXO w/ zero tokenId\\nuint8 constant UTXO_DATA_TYPE3 = 0x02; // for UTXO w/ non-zero tokenId\\n\\n// Grant Types\\n// bytes4(keccak256('panther-onboarding-grantor'))\\nbytes4 constant GT_ONBOARDING = 0x93b212ae;\\n// The \\\"prp grant type\\\" for the \\\"release and bridge\\\" ZKPs\\n// bytes4(keccak256(\\\"panther-zkp-release\\\"))\\nbytes4 constant GT_ZKP_RELEASE = 0x53a1eb85;\\n\\n// Number of 32-bit words of the CiphertextMsg for UTXO_DATA_TYPE1\\n// (ephemeral key (packed) - 32 bytes, encrypted `random` - 32 bytes)\\nuint256 constant CIPHERTEXT1_WORDS = 2;\\n\\n// Number of 32-bit words in the (uncompressed) spending PubKey\\nuint256 constant PUBKEY_WORDS = 2;\\n// Number of elements in `pathElements`\\nuint256 constant PATH_ELEMENTS_NUM = 16;\\n\\n// @dev Unusable on public network address, which is useful for simulations\\n//  in forked test env, e.g. for bypassing SNARK proof verification like this:\\n// `require(isValidProof || tx.origin == DEAD_CODE_ADDRESS)`\\naddress constant DEAD_CODE_ADDRESS = address(uint160(0xDEADC0DE));\\n\\n// 100% expressed in 1/100th of 1% (\\\"pips\\\")\\nuint256 constant HUNDRED_PERCENT = 100 * 100;\\n\",\"keccak256\":\"0x90e1f3e6c9547a0d320e69d419fbf68935c811f8c68c294875761edc59a7dd4a\",\"license\":\"BUSL-1.1\"},\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title ImmutableOwnable\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x06d3e09256c510bd1a5c8f6f05cc99fbc0d51919f2a64e022395bc169c349d90\",\"license\":\"MIT\"},\"contracts/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nstruct G1Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\n// Encoding of field elements is: X[0] * z + X[1]\\nstruct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n}\\n\\n// Verification key for SNARK\\nstruct VerifyingKey {\\n    G1Point alfa1;\\n    G2Point beta2;\\n    G2Point gamma2;\\n    G2Point delta2;\\n    G1Point[] ic;\\n}\\n\\nstruct SnarkProof {\\n    G1Point a;\\n    G2Point b;\\n    G1Point c;\\n}\\n\\nstruct PluginData {\\n    address contractAddress;\\n    bytes callData;\\n}\\n\\nstruct ElGamalCiphertext {\\n    G1Point c1;\\n    G1Point c2;\\n}\\n\\n// For MASP V0 and V1\\nstruct ZAsset {\\n    // reserved (for networkId, tokenIdPolicy. etc..)\\n    uint64 _unused;\\n    // 0x00 by default\\n    uint8 version;\\n    // Refer to Constants.sol\\n    uint8 status;\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // 0x00 - no scaling\\n    uint8 scale;\\n    // token contract address\\n    address token;\\n}\\n\\nstruct LockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint96 extAmount;\\n}\\n\\nstruct SaltedLockData {\\n    // Refer to Constants.sol\\n    uint8 tokenType;\\n    // Token contract address\\n    address token;\\n    // For ERC-721, ERC-1155 tokens\\n    uint256 tokenId;\\n    // The salt to use w/ CREATE2\\n    bytes32 salt;\\n    // The account to transfer the token from/to (on `lock`/`unlock`)\\n    address extAccount;\\n    // The token amount to transfer to/from the Vault (on `lock`/`unlock`)\\n    uint256 extAmount;\\n}\\n\",\"keccak256\":\"0xb086580b8c0d95db80863b6775cc19ba85206cc3197e1577592872e2fee610e7\",\"license\":\"MIT\"},\"contracts/protocol/PantherBusTree.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IPantherPoolV1.sol\\\";\\n\\nimport \\\"./pantherForest/busTree/BusTree.sol\\\";\\nimport { FIELD_SIZE } from \\\"./crypto/SnarkConstants.sol\\\";\\nimport { ERC20_TOKEN_TYPE } from \\\"../common/Constants.sol\\\";\\nimport { LockData } from \\\"../common/Types.sol\\\";\\nimport \\\"../common/ImmutableOwnable.sol\\\";\\nimport \\\"./crypto/PoseidonHashers.sol\\\";\\nimport \\\"./errMsgs/PantherBusTreeErrMsgs.sol\\\";\\n\\ncontract PantherBusTree is BusTree, ImmutableOwnable {\\n    // The contract is supposed to run behind a proxy DELEGATECALLing it.\\n    // On upgrades, adjust `__gap` to match changes of the storage layout.\\n    // slither-disable-next-line shadowing-state unused-state\\n    uint256[50] private __gap;\\n\\n    // address of reward token\\n    address public immutable REWARD_TOKEN;\\n\\n    // TODO: Remove perMinuteUtxosLimit after Testnet (required for Stage #0..2 only)\\n    // avg number of utxos which can be added per minute\\n    uint16 public perMinuteUtxosLimit;\\n\\n    // base reward per each utxo\\n    uint96 public basePerUtxoReward;\\n\\n    // keeps track of number of the added utxos\\n    uint32 public utxoCounter;\\n\\n    // TODO: Remove lastUtxoSimulationTimestamp after Testnet (required for Stage #0..2 only)\\n    // keeps track of the timestamp of the latest added utxos\\n    // lastUtxoUpdateBlockNum\\n    uint32 public lastUtxoSimulationTimestamp;\\n\\n    // timestamp to start adding utxo\\n    uint32 public startTime;\\n\\n    event MinerRewarded(address miner, uint256 reward);\\n\\n    constructor(\\n        address owner,\\n        address rewardToken,\\n        address _pantherPool,\\n        address _verifier,\\n        uint160 _circuitId\\n    ) ImmutableOwnable(owner) BusTree(_verifier, _circuitId, _pantherPool) {\\n        require(rewardToken != address(0), ERR_PBT_INIT);\\n\\n        REWARD_TOKEN = rewardToken;\\n    }\\n\\n    modifier onlyPantherPool() {\\n        require(msg.sender == PANTHER_POOL, ERR_UNAUTHORIZED);\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint16 _perMinuteUtxosLimit,\\n        uint96 _basePerUtxoReward,\\n        uint16 reservationRate,\\n        uint16 premiumRate,\\n        uint16 minEmptyQueueAge\\n    ) external onlyOwner {\\n        BusQueues.updateParams(reservationRate, premiumRate, minEmptyQueueAge);\\n\\n        require(\\n            _perMinuteUtxosLimit > 0 && _basePerUtxoReward > 0,\\n            ERR_ZERO_REWARD_PARAMS\\n        );\\n\\n        if (startTime == 0) startTime = uint32(block.timestamp);\\n\\n        perMinuteUtxosLimit = _perMinuteUtxosLimit;\\n        basePerUtxoReward = _basePerUtxoReward;\\n    }\\n\\n    function rewardMiner(address miner, uint256 reward) internal override {\\n        LockData memory data = LockData({\\n            tokenType: ERC20_TOKEN_TYPE,\\n            token: REWARD_TOKEN,\\n            tokenId: 0,\\n            extAccount: miner,\\n            extAmount: uint96(reward)\\n        });\\n\\n        IPantherPoolV1(PANTHER_POOL).unlockAssetFromVault(data);\\n\\n        emit MinerRewarded(miner, reward);\\n    }\\n\\n    function hash(\\n        bytes32 left,\\n        bytes32 right\\n    ) internal pure override returns (bytes32) {\\n        return PoseidonHashers.poseidonT3([left, right]);\\n    }\\n\\n    // TODO: Remove getAllowedUtxosAt after Testnet (required for Stage #0..2 only)\\n    function getAllowedUtxosAt(\\n        uint256 _timestamp\\n    ) public view returns (uint256 allowedUtxos) {\\n        if (_timestamp <= lastUtxoSimulationTimestamp) return 0;\\n\\n        uint256 secs = _timestamp - lastUtxoSimulationTimestamp;\\n        return (secs / 60 seconds) * perMinuteUtxosLimit;\\n    }\\n\\n    // TODO: add `reward` as a param of `function addUtxoToBusQueue`\\n    function addUtxoToBusQueue(\\n        bytes32 utxo\\n    ) external onlyPantherPool returns (uint32 queueId, uint8 indexInQueue) {\\n        bytes32[] memory utxos = new bytes32[](1);\\n        utxos[0] = utxo;\\n        (queueId, indexInQueue) = addUtxos(utxos, basePerUtxoReward);\\n    }\\n\\n    /// @return firstUtxoQueueId ID of the queue which `utxos[0]` was added to\\n    /// @return firstUtxoIndexInQueue Index of `utxos[0]` in the queue\\n    /// @dev If the current queue has no space left to add all UTXOs, a part of\\n    /// UTXOs only are added to the current queue until it gets full, then the\\n    /// remaining UTXOs are added to a new queue.\\n    /// Index of any UTXO (not just the 1st one) may be computed as follows:\\n    /// - index of UTXO in a queue increments by +1 with every new UTXO added,\\n    ///   (from 0 for the 1st UTXO in a queue up to `QUEUE_MAX_SIZE - 1`)\\n    /// - number of UTXOs added to the new queue (if there are such) equals to\\n    ///   `firstUtxoIndexInQueue + utxos[0].length - QUEUE_MAX_SIZE`\\n    /// - new queue (if created) has ID equal to `firstUtxoQueueId + 1`\\n    function addUtxosToBusQueue(\\n        bytes32[] memory utxos\\n    )\\n        external\\n        onlyPantherPool\\n        returns (uint32 firstUtxoQueueId, uint8 firstUtxoIndexInQueue)\\n    {\\n        require(utxos.length != 0, ERR_EMPTY_UTXOS_ARRAY);\\n        uint96 reward = basePerUtxoReward * uint96(utxos.length);\\n\\n        // TODO: add `reward` as a param and uncomment this line\\n        // _checkReward(reward, utxos.length);\\n        (firstUtxoQueueId, firstUtxoIndexInQueue) = addUtxos(utxos, reward);\\n    }\\n\\n    function addUtxosToBusQueue(\\n        bytes32[] memory utxos,\\n        uint96 reward\\n    )\\n        external\\n        onlyPantherPool\\n        returns (uint32 firstUtxoQueueId, uint8 firstUtxoIndexInQueue)\\n    {\\n        require(utxos.length != 0, ERR_EMPTY_UTXOS_ARRAY);\\n\\n        _checkReward(reward, utxos.length);\\n\\n        (firstUtxoQueueId, firstUtxoIndexInQueue) = addUtxos(utxos, reward);\\n    }\\n\\n    // TODO: Remove simulateAddUtxosToBusQueue after Testnet (required for Stage #0..2 only)\\n    function simulateAddUtxosToBusQueue() external {\\n        uint256 _counter = uint256(utxoCounter);\\n\\n        // generating the first utxo\\n        uint256 utxo = uint256(keccak256(abi.encode(_counter))) % FIELD_SIZE;\\n\\n        // Generating the utxos length between 1 - 4\\n        uint256 length = (utxo & 3) + 1;\\n\\n        if (length > getAllowedUtxosAt(block.timestamp)) return;\\n\\n        bytes32[] memory utxos = new bytes32[](length);\\n\\n        // adding the first commitment\\n        utxos[0] = bytes32(utxo);\\n        _counter++;\\n\\n        // adding the rest of commitment\\n        for (uint256 i = 1; i < length; ) {\\n            utxos[i] = bytes32(\\n                uint256(keccak256(abi.encode(_counter))) % FIELD_SIZE\\n            );\\n\\n            unchecked {\\n                i++;\\n                _counter++;\\n            }\\n        }\\n\\n        // overflow risk ignored\\n        utxoCounter = uint32(_counter);\\n        lastUtxoSimulationTimestamp = uint32(block.timestamp);\\n        uint256 reward = uint256(basePerUtxoReward) * length;\\n\\n        addUtxos(utxos, uint96(reward));\\n    }\\n\\n    function _checkReward(uint96 reward, uint256 nUtxos) private view {\\n        uint96 minReward = basePerUtxoReward * uint96(nUtxos);\\n        require(reward >= minReward, ERR_TOO_SMALL_REWARD);\\n    }\\n}\\n\",\"keccak256\":\"0xd5f1be2fdfcbae2bcccee9b5220c49e245bad0ec2c2df40ec3131d28b884bd2e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/crypto/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// This is a stub to keep solc happy; the actual code is generated\\n// using poseidon_gencontract.js from circomlibjs.\\n\\nlibrary PoseidonT3 {\\n    function poseidon(bytes32[2] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT4 {\\n    function poseidon(bytes32[3] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT5 {\\n    function poseidon(bytes32[4] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(bytes32[5] memory input) external pure returns (bytes32) {\\n        require(input.length == 99, \\\"FAKE\\\"); // always reverts\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x85ba9420af1dcb1218b655c16044d163c9b070ff5913da034a9961e0e8c5aaf2\",\"license\":\"MIT\"},\"contracts/protocol/crypto/PoseidonHashers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { FIELD_SIZE } from \\\"./SnarkConstants.sol\\\";\\nimport \\\"./Poseidon.sol\\\";\\n\\nlibrary PoseidonHashers {\\n    string private constant ERR_INPUT_NOT_IN_FIELD =\\n        \\\"PoseidonHasher: input not in field\\\";\\n\\n    function poseidonT3(\\n        bytes32[2] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE && uint256(input[1]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT3.poseidon(input);\\n    }\\n\\n    function poseidonT4(\\n        bytes32[3] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT4.poseidon(input);\\n    }\\n\\n    function poseidonT5(\\n        bytes32[4] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT5.poseidon(input);\\n    }\\n\\n    function poseidonT6(\\n        bytes32[5] memory input\\n    ) internal pure returns (bytes32) {\\n        require(\\n            uint256(input[0]) < FIELD_SIZE &&\\n                uint256(input[1]) < FIELD_SIZE &&\\n                uint256(input[2]) < FIELD_SIZE &&\\n                uint256(input[3]) < FIELD_SIZE &&\\n                uint256(input[4]) < FIELD_SIZE,\\n            ERR_INPUT_NOT_IN_FIELD\\n        );\\n        return PoseidonT6.poseidon(input);\\n    }\\n}\\n\",\"keccak256\":\"0x93ad83293b12679894b27a4fe8dfbb04ddab44439532b9ef1075b6a7cb116f01\",\"license\":\"MIT\"},\"contracts/protocol/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n// @dev Order of alt_bn128 and the field prime of Baby Jubjub and Poseidon hash\\nuint256 constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n// @dev Field prime of alt_bn128\\nuint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\",\"keccak256\":\"0xb734602ed691e205eed51a0239e8281bf5822487140843a848df20f6a4c95b39\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/BusTreeErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nstring constant ERR_INIT = \\\"BT:E1\\\";\\nstring constant ERR_INVALID_VK = \\\"BT:E2\\\";\\nstring constant ERR_INVALID_BUS_TREE_ROOT = \\\"BT:E3\\\";\\nstring constant ERR_INVALID_EXTRA_INP = \\\"BT:E4\\\";\\nstring constant ERR_ZERO_MAGIC_CONSTR = \\\"BT:E5\\\";\\nstring constant ERR_INVALID_REPLACE_INDEX = \\\"BT:E6\\\";\\nstring constant ERR_INVALID_LEAFS_COMMIT = \\\"BT:E7\\\";\\nstring constant ERR_INVALID_LEAFS_NUM = \\\"BT:E8\\\";\\nstring constant ERR_FAILED_ZK_PROOF = \\\"BT:E9\\\";\\n\",\"keccak256\":\"0x63921dbda4dda69ba49fea14927d25eaa4d2d743690022bd8fbf1dc633edabc4\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/errMsgs/PantherBusTreeErrMsgs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nstring constant ERR_PBT_INIT = \\\"PBT:E1\\\";\\nstring constant ERR_UNAUTHORIZED = \\\"PBT:E2\\\";\\nstring constant ERR_ZERO_REWARD_PARAMS = \\\"PBT:E3\\\";\\nstring constant ERR_EMPTY_UTXOS_ARRAY = \\\"PBT:E4\\\";\\nstring constant ERR_TOO_SMALL_REWARD = \\\"PBT:E5\\\";\\n\",\"keccak256\":\"0x957e9fb521eb29f00642c7776fa45234fb40f92a7e683157dcb1a51e87d42e7e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IPantherPoolV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { SnarkProof } from \\\"../../common/Types.sol\\\";\\nimport { LockData } from \\\"../../common/Types.sol\\\";\\n\\ninterface IPantherPoolV1 {\\n    function accountPrp(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256 utxoBusQueuePos);\\n\\n    function createZzkpUtxoAndSpendPrpUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        bytes memory privateMessages,\\n        uint256 zkpAmountRounded,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256);\\n\\n    function createZAccountUtxo(\\n        uint256[] calldata inputs,\\n        SnarkProof calldata proof,\\n        address zkpPayer,\\n        bytes memory secretMessage,\\n        uint256 cachedForestRootIndex\\n    ) external returns (uint256);\\n\\n    function unlockAssetFromVault(LockData calldata data) external;\\n}\\n\",\"keccak256\":\"0xa5ff0c742dd1b94ff70c4842e88f3d7aae39893f3f54e08a7a113f42171bdf0c\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IPantherVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { VerifyingKey } from \\\"../../common/Types.sol\\\";\\nimport \\\"./IVerifier.sol\\\";\\n\\ninterface IPantherVerifier is IVerifier {\\n    /**\\n     * @notice Get the verifying key for the specified circuits\\n     * @param circuitId ID of the circuit\\n     * @dev circuitId is an address where the key is deployed as bytecode\\n     * @return Verifying key\\n     */\\n    function getVerifyingKey(\\n        uint160 circuitId\\n    ) external view returns (VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0x8b1f03da05951cd47b1dcc4bf7b74805635d754e421b93138c68e17e36f0d2be\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport { SnarkProof } from \\\"../../common/Types.sol\\\";\\nimport \\\"./IVerifier.sol\\\";\\n\\ninterface IVerifier {\\n    /**\\n     * @notice Verify the SNARK proof\\n     * @param circuitId ID of the circuit (it tells which verifying key to use)\\n     * @param input Public input signals\\n     * @param proof SNARK proof\\n     * @return isVerified bool true if proof is valid\\n     */\\n    function verify(\\n        uint160 circuitId,\\n        uint256[] memory input,\\n        SnarkProof memory proof\\n    ) external view returns (bool isVerified);\\n}\\n\",\"keccak256\":\"0x33bce2a4dfeafbb2149077d2d14d0682dbdc51b9f5e0566a57c69fe62c0356d5\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n// `PantherForest` tree leafs indices (leafs store specific merkle trees roots)\\nuint256 constant TAXI_TREE_FOREST_LEAF_INDEX = 0;\\nuint256 constant BUS_TREE_FOREST_LEAF_INDEX = 1;\\nuint256 constant FERRY_TREE_FOREST_LEAF_INDEX = 2;\\nuint256 constant STATIC_TREE_FOREST_LEAF_INDEX = 3;\\n\\n// `PantherStaticTree` leafs indices (leafs store specific merkle trees roots)\\nuint256 constant ZASSET_STATIC_LEAF_INDEX = 0;\\nuint256 constant ZACCOUNT_BLACKLIST_STATIC_LEAF_INDEX = 1;\\nuint256 constant ZNETWORK_STATIC_LEAF_INDEX = 2;\\nuint256 constant ZZONE_STATIC_LEAF_INDEX = 3;\\nuint256 constant PROVIDERS_KEYS_STATIC_LEAF_INDEX = 4;\\n\",\"keccak256\":\"0x418cf4af2f447d34f87043ba87b1c1901a79e4a15902fd9a26f0ee480d410674\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/busTree/BusQueues.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport \\\"../merkleTrees/DegenerateIncrementalBinaryTree.sol\\\";\\nimport { HUNDRED_PERCENT } from \\\"../../../common/Constants.sol\\\";\\n\\n/**\\n * @dev It handles \\\"queues\\\" of commitments to UTXOs (further - \\\"UTXOs\\\").\\n * Queue is an ordered list of UTXOs. All UTXOs in a queue are supposed to be\\n * processed at once.\\n * To save gas, this contract\\n * - stores the commitment to UTXOs in a queue (but not UTXOs) in the storage\\n * - computes the commitment as the root of a degenerate tree (not binary one)\\n * built from UTXOs the queue contains.\\n * For every queue, it also records the amount of rewards associated with the\\n * Queue (think of \\\"reward for processing the queue\\\").\\n * If a queue gets fully populated with UTXOs, it is considered to be \\\"closed\\\".\\n * No more UTXOs may be appended to that queue, and a new queue is created.\\n * There may be many closed which pends processing. But one only partially\\n * populated queue exists (it is always the most recently created queue).\\n * Queues may be processed in any order (say, the 3rd queue may go before the\\n * 1st one; and a fully populated queue may be processed after the partially\\n * populated one).\\n * The contract maintains the doubly-linked list of unprocessed queues.\\n * The queue lifecycle is:\\n * \\\"Opened -> (optionally) Closed -> Processed (and deleted).\\\"\\n */\\nabstract contract BusQueues is DegenerateIncrementalBinaryTree {\\n    // TODO: adding gap to the beginning and end of the storage\\n\\n    uint256 internal constant QUEUE_MAX_LEVELS = 6;\\n    uint256 private constant QUEUE_MAX_SIZE = 2 ** QUEUE_MAX_LEVELS;\\n    // solhint-enable var-name-mixedcase\\n\\n    /**\\n     * @param nUtxos Number of UTXOs in the queue\\n     * @param reward Rewards accumulated for the queue\\n     * @param firstUtxoBlock Block when the 1st UTXO was added to the queue\\n     * @param lastUtxoBlock Block when a UTXO was last added to the queue\\n     * @param prevLink Link to the previous unprocessed queue\\n     * @param nextLink Link to the next unprocessed queue\\n     * @dev If `prevLink` (`nextLink`) is 0, the unprocessed queue is the one\\n     * created right before (after) this queue, or no queues remain unprocessed,\\n     * which were created before (after) this queue. If the value is not 0, the\\n     * value is the unprocessed queue's ID adjusted by +1.\\n     */\\n    struct BusQueue {\\n        uint8 nUtxos;\\n        uint96 reward;\\n        uint40 firstUtxoBlock;\\n        uint40 lastUtxoBlock;\\n        uint32 prevLink;\\n        uint32 nextLink;\\n    }\\n\\n    struct BusQueueRec {\\n        uint32 queueId;\\n        uint8 nUtxos;\\n        uint96 reward;\\n        uint96 potentialExtraReward;\\n        uint40 firstUtxoBlock;\\n        uint40 lastUtxoBlock;\\n        uint40 remainingBlocks;\\n        bytes32 commitment;\\n    }\\n\\n    // Mapping from queue ID to queue params\\n    mapping(uint32 => BusQueue) internal _busQueues;\\n    // Mapping from queue ID to queue commitment\\n    mapping(uint32 => bytes32) private _busQueueCommitments;\\n\\n    // ID of the next queue to create\\n    uint32 internal _nextQueueId;\\n    // Number of unprocessed queues\\n    uint32 private _numPendingQueues;\\n    // Link to the oldest (created but yet) unprocessed queue\\n    // (if 0 - no such queue exists, otherwise the queue's ID adjusted by +1)\\n    uint32 private _oldestPendingQueueLink;\\n\\n    // Part (in 1/100th of 1%) of queue reward to be reserved for \\\"premiums\\\"\\n    uint16 private _reservationRate;\\n    // Part (in 1/100th of 1%) of a queue reward to be accrued as the premium\\n    // (i.e. an extra reward) for every block the queue pends processing\\n    uint16 private _premiumRate;\\n    // Unused yet part of queue rewards which were reserved for premiums\\n    uint96 private _rewardReserve;\\n\\n    // Minimum number of blocks an empty queue must pend processing.\\n    uint16 private _minEmptyQueueAge;\\n\\n    // Emitted for every UTXO appended to a queue\\n    event UtxoBusQueued(\\n        bytes32 indexed utxo,\\n        uint256 indexed queueId,\\n        uint256 utxoIndexInBatch\\n    );\\n\\n    // Emitted when a new queue is opened (it becomes the \\\"current\\\" one)\\n    event BusQueueOpened(uint256 queueId);\\n\\n    // Emitted when a queue is registered as the processed one (and deleted)\\n    event BusQueueProcessed(uint256 indexed queueId);\\n\\n    // Emitted when params of reward computation updated\\n    event BusQueueRewardParamsUpdated(\\n        uint256 reservationRate,\\n        uint256 premiumRate,\\n        uint256 minEmptyQueueAge\\n    );\\n    // Emitted when new reward \\\"reserves\\\" added\\n    event BusQueueRewardReserved(uint256 extraReseve);\\n    // Emitted when (part of) reward \\\"reserves\\\" used\\n    event BusQueueRewardReserveUsed(uint256 usage);\\n\\n    // Emitted when queue reward increased w/o adding UTXOs\\n    event BusQueueRewardAdded(uint256 indexed queueId, uint256 accumReward);\\n\\n    modifier nonEmptyBusQueue(uint32 queueId) {\\n        require(_busQueues[queueId].nUtxos > 0, \\\"BQ:EMPTY_QUEUE\\\");\\n        _;\\n    }\\n\\n    // The contract is intentionally written so, that explicit initialization of\\n    // storage variables is unneeded (zero values are implicitly initialized in\\n    // new storage slots).\\n    // To enable premiums or queue age limit, the `updateParams` call needed.\\n\\n    // @return  reservationRate Part (in 1/100th of 1%) of every queue reward to\\n    // reserve for \\\"premiums\\\" (the remaining reward is \\\"guaranteed\\\" one)\\n    // @return premiumRate Part (in 1/100th of 1%) of a queue reward to accrue as\\n    // the premium for every block the queue pends processing\\n    // @return minEmptyQueueAge Min number of blocks an empty queue must pend\\n    // processing. For a partially filled queue, it declines linearly with the\\n    // number of queue's UTXOs. Full queues are immediately processable.\\n    function getParams()\\n        external\\n        view\\n        returns (\\n            uint16 reservationRate,\\n            uint16 premiumRate,\\n            uint16 minEmptyQueueAge\\n        )\\n    {\\n        reservationRate = _reservationRate;\\n        premiumRate = _premiumRate;\\n        minEmptyQueueAge = _minEmptyQueueAge;\\n    }\\n\\n    function getBusQueuesStats()\\n        external\\n        view\\n        returns (\\n            uint32 curQueueId,\\n            uint32 numPendingQueues,\\n            uint32 oldestPendingQueueId,\\n            uint96 rewardReserve\\n        )\\n    {\\n        uint32 nextQueueId = _nextQueueId;\\n        require(nextQueueId != 0, \\\"BT:NO_QUEUES\\\");\\n        curQueueId = nextQueueId - 1;\\n        numPendingQueues = _numPendingQueues;\\n        oldestPendingQueueId = numPendingQueues == 0\\n            ? 0\\n            : _oldestPendingQueueLink - 1;\\n        rewardReserve = _rewardReserve;\\n    }\\n\\n    function getBusQueue(\\n        uint32 queueId\\n    ) external view returns (BusQueueRec memory queue) {\\n        BusQueue memory q = _busQueues[queueId];\\n        require(\\n            queueId + 1 == _nextQueueId || q.nUtxos > 0,\\n            \\\"BT:UNKNOWN_OR_PROCESSED_QUEUE\\\"\\n        );\\n        (uint256 reward, uint256 premium, ) = _estimateRewarding(q);\\n        queue = BusQueueRec(\\n            queueId,\\n            q.nUtxos,\\n            uint96(reward),\\n            uint96(premium),\\n            q.firstUtxoBlock,\\n            q.lastUtxoBlock,\\n            _getQueueRemainingBlocks(q),\\n            _busQueueCommitments[queueId]\\n        );\\n    }\\n\\n    // @param maxLength Maximum number of queues to return\\n    // @return queues Queues pending processing, starting from the oldest one\\n    function getOldestPendingQueues(\\n        uint32 maxLength\\n    ) external view returns (BusQueueRec[] memory queues) {\\n        uint256 nQueues = _numPendingQueues;\\n        if (nQueues > maxLength) nQueues = maxLength;\\n        queues = new BusQueueRec[](nQueues);\\n\\n        uint32 nextLink = _oldestPendingQueueLink;\\n        for (uint256 i = 0; i < nQueues; i++) {\\n            uint32 queueId = nextLink - 1;\\n            BusQueue memory queue = _busQueues[queueId];\\n\\n            queues[i].queueId = queueId;\\n            queues[i].nUtxos = queue.nUtxos;\\n            (uint256 reward, uint256 premium, ) = _estimateRewarding(queue);\\n            queues[i].reward = uint96(reward);\\n            queues[i].potentialExtraReward = uint96(premium);\\n            queues[i].firstUtxoBlock = queue.firstUtxoBlock;\\n            queues[i].lastUtxoBlock = queue.lastUtxoBlock;\\n            queues[i].remainingBlocks = _getQueueRemainingBlocks(queue);\\n            queues[i].commitment = _busQueueCommitments[queueId];\\n\\n            nextLink = queue.nextLink == 0 ? nextLink + 1 : queue.nextLink;\\n        }\\n\\n        return queues;\\n    }\\n\\n    // @dev Refer to return values of the `getParam` function\\n    function updateParams(\\n        uint16 reservationRate,\\n        uint16 premiumRate,\\n        uint16 minEmptyQueueAge\\n    ) internal {\\n        require(\\n            reservationRate <= HUNDRED_PERCENT &&\\n                premiumRate <= HUNDRED_PERCENT,\\n            \\\"BQ:INVALID_PARAMS\\\"\\n        );\\n        _reservationRate = reservationRate;\\n        _premiumRate = premiumRate;\\n        _minEmptyQueueAge = minEmptyQueueAge;\\n        emit BusQueueRewardParamsUpdated(\\n            reservationRate,\\n            premiumRate,\\n            minEmptyQueueAge\\n        );\\n    }\\n\\n    // @dev Code that calls it MUST ensure utxos[i] < FIELD_SIZE\\n    function addUtxos(\\n        bytes32[] memory utxos,\\n        uint96 reward\\n    ) internal returns (uint32 firstQueueId, uint8 firstIndexInFirstQueue) {\\n        require(utxos.length < QUEUE_MAX_SIZE, \\\"BQ:TOO_MANY_UTXOS\\\");\\n\\n        uint32 queueId;\\n        BusQueue memory queue;\\n        bytes32 commitment;\\n        {\\n            uint32 nextQueueId = _nextQueueId;\\n            if (nextQueueId == 0) {\\n                // Create the 1st queue\\n                (queueId, queue, commitment) = _createNewBusQueue();\\n                _oldestPendingQueueLink = queueId + 1;\\n            } else {\\n                // Read an existing queue from the storage\\n                queueId = nextQueueId - 1;\\n                queue = _busQueues[queueId];\\n                commitment = _busQueueCommitments[queueId];\\n            }\\n        }\\n        firstQueueId = queueId;\\n        firstIndexInFirstQueue = queue.nUtxos;\\n\\n        // Block number overflow risk ignored\\n        uint40 curBlock = uint40(block.number);\\n\\n        for (uint256 n = 0; n < utxos.length; n++) {\\n            if (queue.nUtxos == 0) queue.firstUtxoBlock = curBlock;\\n\\n            bytes32 utxo = utxos[n];\\n            commitment = insertLeaf(utxo, commitment, queue.nUtxos == 0);\\n            emit UtxoBusQueued(utxo, queueId, queue.nUtxos);\\n            queue.nUtxos += 1;\\n\\n            // If the current queue gets fully populated, switch to a new queue\\n            if (queue.nUtxos == QUEUE_MAX_SIZE) {\\n                // Part of the reward relates to the populated queue\\n                uint96 rewardUsed = uint96(\\n                    (uint256(reward) * (n + 1)) / utxos.length\\n                );\\n                queue.reward += rewardUsed;\\n                // Remaining reward is for the new queue\\n                reward -= rewardUsed;\\n\\n                queue.lastUtxoBlock = curBlock;\\n                _busQueues[queueId] = queue;\\n                _busQueueCommitments[queueId] = commitment;\\n\\n                // Create a new queue\\n                (queueId, queue, commitment) = _createNewBusQueue();\\n            }\\n        }\\n\\n        if (queue.nUtxos > 0) {\\n            queue.reward += reward;\\n            queue.lastUtxoBlock = curBlock;\\n            _busQueues[queueId] = queue;\\n            _busQueueCommitments[queueId] = commitment;\\n        }\\n    }\\n\\n    // It delete the processed queue and returns the queue params\\n    function setBusQueueAsProcessed(\\n        uint32 queueId\\n    )\\n        internal\\n        nonEmptyBusQueue(queueId)\\n        returns (bytes32 commitment, uint8 nUtxos, uint96 reward)\\n    {\\n        BusQueue memory queue = _busQueues[queueId];\\n        require(_getQueueRemainingBlocks(queue) == 0, \\\"BQT:IMMATURE_QUEUE\\\");\\n\\n        commitment = _busQueueCommitments[queueId];\\n        nUtxos = queue.nUtxos;\\n        reward = uint96(_computeReward(queue));\\n\\n        // Clear the storage for the processed queue\\n        _busQueues[queueId] = BusQueue(0, 0, 0, 0, 0, 0);\\n        _busQueueCommitments[queueId] = bytes32(0);\\n\\n        _numPendingQueues -= 1;\\n\\n        // If applicable, open a new queue (_nextQueueId can't be 0 here)\\n        uint32 curQueueId = _nextQueueId - 1;\\n        if (queueId == curQueueId) {\\n            (curQueueId, , ) = _createNewBusQueue();\\n        }\\n\\n        // Compute and save links to previous, next, oldest unprocessed queues\\n        // (link, if unequal to 0, is the unprocessed queue's ID adjusted by +1)\\n        uint32 nextLink = queue.nextLink == 0 ? queueId + 2 : queue.nextLink;\\n        uint32 nextPendingQueueId = nextLink - 1;\\n        {\\n            uint32 prevLink;\\n            bool isOldestQueue = _oldestPendingQueueLink == queueId + 1;\\n            if (isOldestQueue) {\\n                prevLink = 0;\\n                _oldestPendingQueueLink = nextLink;\\n            } else {\\n                prevLink = queue.prevLink == 0 ? queueId : queue.prevLink;\\n                _busQueues[prevLink - 1].nextLink = nextLink;\\n            }\\n            _busQueues[nextPendingQueueId].prevLink = prevLink;\\n        }\\n\\n        emit BusQueueProcessed(queueId);\\n    }\\n\\n    function addBusQueueReward(\\n        uint32 queueId,\\n        uint96 extraReward\\n    ) internal nonEmptyBusQueue(queueId) {\\n        require(extraReward > 0, \\\"BQ:ZERO_REWARD\\\");\\n        uint96 accumReward;\\n        unchecked {\\n            // Values are supposed to be too small to cause overflow\\n            accumReward = _busQueues[queueId].reward + extraReward;\\n            _busQueues[queueId].reward = accumReward;\\n        }\\n        emit BusQueueRewardAdded(queueId, accumReward);\\n    }\\n\\n    function _createNewBusQueue()\\n        private\\n        returns (uint32 newQueueId, BusQueue memory queue, bytes32 commitment)\\n    {\\n        newQueueId = _nextQueueId;\\n\\n        // Store updated values in \\\"old\\\" storage slots\\n        unchecked {\\n            // Risks of overflow ignored\\n            _nextQueueId = newQueueId + 1;\\n            _numPendingQueues += 1;\\n        }\\n        // Explicit initialization of new storage slots to zeros is unneeded\\n        queue = BusQueue(0, 0, 0, 0, 0, 0);\\n        commitment = bytes32(0);\\n\\n        emit BusQueueOpened(newQueueId);\\n    }\\n\\n    // Returns the number of blocks to wait until a queue may be processed.\\n    // Always returns 0 for a fully populated queue (immediately processable).\\n    // For an empty queue it returns a meaningless value.\\n    function _getQueueRemainingBlocks(\\n        BusQueue memory queue\\n    ) private view returns (uint40) {\\n        if (queue.nUtxos >= QUEUE_MAX_SIZE) return 0;\\n\\n        // Minimum \\\"age\\\" declines linearly to the number of UTXOs in the queue\\n        uint256 nEmptySeats = uint256(QUEUE_MAX_SIZE - queue.nUtxos);\\n        uint256 minAge = (nEmptySeats * _minEmptyQueueAge) / QUEUE_MAX_SIZE;\\n\\n        uint256 maturityBlock = minAge + queue.firstUtxoBlock;\\n        return\\n            block.number >= maturityBlock\\n                ? 0 // Overflow risk ignored\\n                : uint40(maturityBlock - block.number);\\n    }\\n\\n    function _computeReward(\\n        BusQueue memory queue\\n    ) private returns (uint256 actReward) {\\n        (\\n            uint256 reward,\\n            uint256 premium,\\n            int256 netReserveChange\\n        ) = _estimateRewarding(queue);\\n        uint256 reserve = _rewardReserve;\\n        if (netReserveChange > 0) {\\n            uint256 addition = uint256(netReserveChange);\\n            _rewardReserve = uint96(reserve + addition);\\n            emit BusQueueRewardReserved(addition);\\n        }\\n        if (netReserveChange < 0) {\\n            uint256 usage = uint256(-netReserveChange);\\n            if (usage > reserve) {\\n                premium -= (usage - reserve);\\n                usage = reserve;\\n            }\\n            _rewardReserve = uint96(reserve - usage);\\n            emit BusQueueRewardReserveUsed(usage);\\n        }\\n        actReward = reward + premium;\\n    }\\n\\n    function _estimateRewarding(\\n        BusQueue memory queue\\n    )\\n        private\\n        view\\n        returns (uint256 reward, uint256 premium, int256 netReserveChange)\\n    {\\n        // _reservationRate MUST be less than HUNDRED_PERCENT ...\\n        uint256 contrib = (uint256(queue.reward) * _reservationRate) /\\n            HUNDRED_PERCENT;\\n        // ... so this can't underflow\\n        reward = uint256(queue.reward) - contrib;\\n        uint256 pendBlocks = block.number - queue.firstUtxoBlock;\\n        premium =\\n            (uint256(queue.reward) * pendBlocks * _premiumRate) /\\n            HUNDRED_PERCENT;\\n        // positive/negative value means \\\"supply\\\"/\\\"demand\\\" to/from reserves\\n        netReserveChange = int256(contrib) - int256(premium);\\n    }\\n}\\n\",\"keccak256\":\"0x895f31b553d163ab873c3b47d873e2a8a4007251616bff34499cac6cd869e802\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/busTree/BusTree.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport \\\"./BusQueues.sol\\\";\\nimport \\\"../../interfaces/IPantherVerifier.sol\\\";\\nimport \\\"../interfaces/ITreeRootGetter.sol\\\";\\nimport { FIELD_SIZE } from \\\"../../crypto/SnarkConstants.sol\\\";\\nimport { TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT } from \\\"../zeroTrees/Constants.sol\\\";\\nimport { BUS_TREE_FOREST_LEAF_INDEX } from \\\"../Constants.sol\\\";\\nimport \\\"../interfaces/ITreeRootUpdater.sol\\\";\\nimport \\\"../../errMsgs/BusTreeErrMsgs.sol\\\";\\n\\n/**\\n * @dev The Bus Tree (\\\"Tree\\\") is an incremental binary Merkle tree that stores\\n * commitments to UTXOs (further referred to as \\\"UTXOs\\\").\\n * Unfilled part of the Tree contains leafs with a special \\\"zero\\\" value - such\\n * leafs are deemed to be \\\"empty\\\".\\n * UTXOs are inserted in the Tree in batches called \\\"Queues\\\".\\n * The contract does not compute the Tree's root on-chain. Instead, it verifies\\n * the SNARK-proof, which proves correctness of insertion into the Tree.\\n * For efficient proving, leafs of a Queue get re-organized into a binary fully\\n * balanced Merkle tree called the \\\"Batch\\\". If there are less UTXOs in a Queue\\n * than needed to fill the Batch, empty leafs are appended. This way, insertion\\n * constitutes replacement of an inner node of the Tree with the Batch root.\\n * To ease off-chain re-construction, roots of Tree's branches (\\\"Branches\\\") are\\n * published via on-chain logs.\\n * Each time the Bus Tree root is updated, this contract MUST call PantherPoolV1\\n * contract to trigger updates of that contract state (see PantherForest).\\n */\\nabstract contract BusTree is BusQueues, ITreeRootGetter {\\n    // TODO: add gap to the beginning and end of the storage\\n\\n    bytes32 internal constant EMPTY_BUS_TREE_ROOT =\\n        TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT;\\n\\n    // Number of levels in every Batch (that is a binary tree)\\n    uint256 internal constant BATCH_LEVELS = QUEUE_MAX_LEVELS;\\n\\n    // Number of levels in every Branch, counting from roots of Batches\\n    uint256 private constant BRANCH_LEVELS = 10;\\n    // Number of Batches in a fully filled Branch\\n    uint256 private constant BRANCH_SIZE = 2 ** BRANCH_LEVELS;\\n    // Bitmask for cheaper modulo math\\n    uint256 private constant BRANCH_BITMASK = BRANCH_SIZE - 1;\\n\\n    IPantherVerifier public immutable VERIFIER;\\n    uint160 public immutable CIRCUIT_ID;\\n\\n    // address of panther pool\\n    address public immutable PANTHER_POOL;\\n\\n    bytes32 private _busTreeRoot;\\n\\n    // Number of Batches in the Bus Tree\\n    uint32 private _numBatchesInBusTree;\\n    // Number of UTXOs (excluding empty leafs) in the tree\\n    uint32 private _numUtxosInBusTree;\\n    // Block when the 1st Batch inserted in the latest branch\\n    uint40 private _latestBranchFirstBatchBlock;\\n    // Block when the latest Batch inserted in the Bus Tree\\n    uint40 private _latestBatchBlock;\\n\\n    event BusBatchOnboarded(\\n        uint256 indexed queueId,\\n        bytes32 indexed batchRoot,\\n        uint256 numUtxosInBatch,\\n        // The index of a UTXO's leaf in the Bus Tree is\\n        // `leftLeafIndexInBusTree + UtxoBusQueued::utxoIndexInBatch`\\n        uint256 leftLeafIndexInBusTree,\\n        bytes32 busTreeNewRoot,\\n        bytes32 busBranchNewRoot\\n    );\\n\\n    event BusBranchFilled(\\n        uint256 indexed branchIndex,\\n        bytes32 busBranchFinalRoot\\n    );\\n\\n    // @dev It is \\\"proxy-friendly\\\" as it does not change the storage\\n    constructor(address _verifier, uint160 _circuitId, address _pantherPool) {\\n        require(_pantherPool != address(0), ERR_INIT);\\n        // require(\\n        //     IPantherVerifier(_verifier).getVerifyingKey(_circuitId).ic.length >=\\n        //         1,\\n        //     ERR_INVALID_VK\\n        // );\\n        VERIFIER = IPantherVerifier(_verifier);\\n        CIRCUIT_ID = _circuitId;\\n        // Code of `function getRoot` let avoid explicit initialization:\\n        // `busTreeRoot = EMPTY_BUS_TREE_ROOT`.\\n        // Initial value of storage variables is 0 (which is implicitly set in\\n        // new storage slots). There is no need for explicit initialization.\\n\\n        PANTHER_POOL = _pantherPool;\\n    }\\n\\n    function getRoot() public view returns (bytes32) {\\n        return _busTreeRoot == bytes32(0) ? EMPTY_BUS_TREE_ROOT : _busTreeRoot;\\n    }\\n\\n    function getBusTreeStats()\\n        external\\n        view\\n        returns (\\n            uint32 numBatchesInBusTree,\\n            uint32 numUtxosInBusTree,\\n            uint40 latestBranchFirstBatchBlock,\\n            uint40 latestBatchBlock\\n        )\\n    {\\n        numBatchesInBusTree = _numBatchesInBusTree;\\n        numUtxosInBusTree = _numUtxosInBusTree;\\n        latestBranchFirstBatchBlock = _latestBranchFirstBatchBlock;\\n        latestBatchBlock = _latestBatchBlock;\\n    }\\n\\n    /// @dev ZK-circuit public signals:\\n    /// @param inputs[0] - oldRoot (BusTree root before insertion)\\n    /// @param inputs[1] - newRoot (BusTree root after insertion)\\n    /// @param inputs[2] - replacedNodeIndex\\n    /// @param inputs[3] - newLeafsCommitment (commitment to leafs in batch)\\n    /// @param inputs[4] - nNonEmptyNewLeafs (non-empty leafs in batch number)\\n    /// @param inputs[5] - batchRoot (Root of the batch to insert)\\n    /// @param inputs[6] - branchRoot (BusTree branch root after insertion)\\n    /// @param inputs[7] - extraInput (Hash of `miner` and `queueId`)\\n    /// @param inputs[8] - magicalConstraint (non-zero random number)\\n    function onboardQueue(\\n        address miner,\\n        uint32 queueId,\\n        uint256[] memory inputs,\\n        SnarkProof memory proof\\n    ) external nonEmptyBusQueue(queueId) {\\n        {\\n            bytes32 oldRoot = bytes32(inputs[0]);\\n            require(oldRoot == getRoot(), ERR_INVALID_BUS_TREE_ROOT);\\n        }\\n        {\\n            bytes memory extraInput = abi.encodePacked(miner, queueId);\\n            uint256 extraInputHash = inputs[7];\\n            require(\\n                extraInputHash == uint256(keccak256(extraInput)) % FIELD_SIZE,\\n                ERR_INVALID_EXTRA_INP\\n            );\\n        }\\n        {\\n            uint256 magicalConstraint = inputs[8];\\n            require(magicalConstraint != 0, ERR_ZERO_MAGIC_CONSTR);\\n        }\\n\\n        uint32 nBatches = _numBatchesInBusTree;\\n        {\\n            uint256 replacedNodeIndex = inputs[2];\\n            require(replacedNodeIndex == nBatches, ERR_INVALID_REPLACE_INDEX);\\n        }\\n\\n        (\\n            bytes32 commitment,\\n            uint8 nUtxos,\\n            uint96 reward\\n        ) = setBusQueueAsProcessed(queueId);\\n        {\\n            uint256 newLeafsCommitment = inputs[3];\\n            require(\\n                newLeafsCommitment == uint256(commitment),\\n                ERR_INVALID_LEAFS_COMMIT\\n            );\\n        }\\n        {\\n            uint256 nNonEmptyNewLeafs = inputs[4];\\n            require(nNonEmptyNewLeafs == nUtxos, ERR_INVALID_LEAFS_NUM);\\n        }\\n\\n        // Verify the proof\\n        require(\\n            VERIFIER.verify(CIRCUIT_ID, inputs, proof),\\n            ERR_FAILED_ZK_PROOF\\n        );\\n\\n        bytes32 busBranchNewRoot = bytes32(inputs[6]);\\n        {\\n            // Overflow risk ignored\\n            uint40 curBlock = uint40(block.number);\\n            _latestBatchBlock = curBlock;\\n\\n            // `& BRANCH_BITMASK` is equivalent to `% BRANCH_SIZE`\\n            uint256 batchBranchIndex = uint256(nBatches) & BRANCH_BITMASK;\\n            if (batchBranchIndex == 0) {\\n                _latestBranchFirstBatchBlock = curBlock;\\n            } else {\\n                if (batchBranchIndex + 1 == BRANCH_SIZE) {\\n                    // `>>BRANCH_LEVELS` is equivalent to `/BRANCH_SIZE`\\n                    uint256 branchIndex = nBatches >> BRANCH_LEVELS;\\n                    emit BusBranchFilled(branchIndex, busBranchNewRoot);\\n                }\\n            }\\n        }\\n\\n        // Store updated Bus Tree params\\n        bytes32 busTreeNewRoot = bytes32(inputs[1]);\\n        _busTreeRoot = busTreeNewRoot;\\n        // Overflow impossible as nUtxos and _numBatchesInBusTree are limited\\n        _numBatchesInBusTree = nBatches + 1;\\n        _numUtxosInBusTree += nUtxos;\\n\\n        // Synchronize the sate of `PantherForest` contract\\n        ITreeRootUpdater(PANTHER_POOL).updateRoot(\\n            busTreeNewRoot,\\n            BUS_TREE_FOREST_LEAF_INDEX\\n        );\\n\\n        // `<< BATCH_LEVELS` is equivalent to `* 2**BATCH_LEVELS`\\n        uint32 leftLeafIndex = nBatches << uint32(BATCH_LEVELS);\\n        bytes32 batchRoot = bytes32(inputs[5]);\\n        emit BusBatchOnboarded(\\n            queueId,\\n            batchRoot,\\n            nUtxos,\\n            leftLeafIndex,\\n            busTreeNewRoot,\\n            busBranchNewRoot\\n        );\\n\\n        rewardMiner(miner, reward);\\n    }\\n\\n    function rewardMiner(address miner, uint256 reward) internal virtual;\\n}\\n\",\"keccak256\":\"0x30ba898f39abeddf1a43c03c83bf098f7b285b3fbdac93d700129afcd515719b\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/interfaces/ITreeRootGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\ninterface ITreeRootGetter {\\n    function getRoot() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc6bb37fe4059cfe13c15f4c1d324b2de68a48348e136bf6cc72421f4721dc21d\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/interfaces/ITreeRootUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\ninterface ITreeRootUpdater {\\n    function updateRoot(bytes32 updatedLeaf, uint256 leafIndex) external;\\n}\\n\",\"keccak256\":\"0x4370b8a771095734709c5a2d7d920bc550beb91706364f2bdb8cb451cc539dbb\",\"license\":\"MIT\"},\"contracts/protocol/pantherForest/merkleTrees/DegenerateIncrementalBinaryTree.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev It computes the root of the degenerate binary merkle tree\\n * - i.e. for the tree of this kind (_tree.nLeafs is 4 here):\\n *     root\\n *      /\\\\\\n *     /\\\\ 3\\n *    /\\\\ 2\\n *   0  1\\n * If the tree has just a single leaf, it's root equals to the leaf.\\n */\\nabstract contract DegenerateIncrementalBinaryTree {\\n    function insertLeaf(\\n        bytes32 leaf,\\n        bytes32 root,\\n        bool isFirstLeaf\\n    ) internal pure returns (bytes32 newRoot) {\\n        newRoot = isFirstLeaf ? leaf : hash(root, leaf);\\n    }\\n\\n    function hash(\\n        bytes32 left,\\n        bytes32 right\\n    ) internal pure virtual returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa83c0185d70c9d2dd0e28a37c164279f4f28fc6842df7fe2dbe4da548daf5822\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pantherForest/zeroTrees/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n/// @dev Leaf zero value (`keccak256(\\\"Pantherprotocol\\\")%FIELD_SIZE`)\\nbytes32 constant ZERO_VALUE = bytes32(\\n    uint256(0x0667764c376602b72ef22218e1673c2cc8546201f9a77807570b3e5de137680d)\\n);\\n\\n// The roots of empty trees follow.\\n// An \\\"empty\\\" tree is a binary merkle tree of a given number of levels bellow\\n// the root (depth), fully populated with ZERO_VALUE leafs, with the `poseidon`\\n// hash function applied.\\n// (computed by `../../../../lib/binaryMerkleZerosContractGenerator.ts`)\\n\\nuint256 constant SIX_LEVELS = 6;\\n/// @dev Root of the binary merkle SIX_LEVELS tree with ZERO_VALUE leafs\\n// Level 0: ZERO_VALUE\\n// Level 1: 0x232fc5fea3994c77e07e1bab1ec362727b0f71f291c17c34891dd4faf1457bd4\\n// Level 2: 0x077851cf613fd96280795a3cabc89663f524b1b545a3b1c7c79130b0f7d251c8\\n// Level 3: 0x1d79fd0bc46f7ca934dbcd3386a06f03c43f497851b3815ee726e7f9b26e504c\\n// Level 4: 0x05c0c15753806f506f64c18bf07116542451822479c4a89305cd4eb7ee94c800\\n// Level 5: 0x2b56fd5e780ebebdacdd27e6464cf01aac089461a998814974a7504aabb2023f\\nbytes32 constant SIX_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x2e99dc37b0a4f107b20278c26562b55df197e0b3eb237ec672f4cf729d159b69)\\n);\\n\\nuint256 constant SIXTEEN_LEVELS = 16;\\n/// @dev Root of the binary merkle SIXTEEN_LEVELS tree with ZERO_VALUE leafs\\n// Level 6:  SIX_LEVEL_EMPTY_TREE_ROOT\\n// Level 7:  0x225624653ac89fe211c0c3d303142a4caf24eb09050be08c33af2e7a1e372a0f\\n// Level 8:  0x276c76358db8af465e2073e4b25d6b1d83f0b9b077f8bd694deefe917e2028d7\\n// Level 9:  0x09df92f4ade78ea54b243914f93c2da33414c22328a73274b885f32aa9dea718\\n// Level 10: 0x1c78b565f2bfc03e230e0cf12ecc9613ab8221f607d6f6bc2a583ccd690ecc58\\n// Level 11: 0x2879d62c83d6a3af05c57a4aee11611a03edec5ff8860b07de77968f47ff1c5f\\n// Level 12: 0x28ad970560de01e93b613aabc930fcaf087114743909783e3770a1ed07c2cde6\\n// Level 13: 0x27ca60def9dd0603074444029cbcbeaa9dbe77668479ac1db738bb892d9f3b6d\\n// Level 14: 0x28e4c1e90bbfa69de93abf6cbdc7cd1c0753a128e83b2b3afe34e0471a13ff55\\n// Level 15: 0x1b89c44a9f153266ad5bf754d4b252c26acba7d21fc661b94dc0618c6a82f49c\\nbytes32 constant SIXTEEN_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x0a5e5ec37bd8f9a21a1c2192e7c37d86bf975d947c2b38598b00babe567191c9)\\n);\\n\\nuint256 constant TWENTY_LEVELS = 20;\\n/// @dev Root of the merkle binary TWENTY_LEVELS tree with ZERO_VALUE leafs\\n// Level 16: SIXTEEN_LEVEL_EMPTY_TREE_ROOT\\n// Level 17: 0x21fb04b171b68944c640020a3a464602ec8d02495c44f1e403d9be4a97128e49\\n// Level 18: 0x19151c748859974805eb30feac7a301266dec9f67e23e285fe750f86448a2af9\\n// Level 19: 0x18fb0b755218eaa809681eb87e45925faa9197507d368210d73b5836ebf139e4\\nbytes32 constant TWENTY_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x1e294375b42dfd97795e07e1fe8bd6cefcb16c3bbb71b30bed950f8965861244)\\n);\\n\\nuint256 constant TWENTY_SIX_LEVELS = 26;\\n/// @dev Root of the binary merkle TWENTY_SIX_LEVELS tree with ZERO_VALUE leafs\\n// Level 21: 0x0d3e4235db275d9bab0808dd9ade8789d46d0e1f1c9a99ce73fefca51dc92f4a\\n// Level 22: 0x075ab2ca945c4dc5ea40a9f1c66d5bf3c367cef1e04e73aa17c2bc747eb5fc87\\n// Level 23: 0x26f0f533a8ea2210001aeb8f8306c7c70656ba6afe145c6540bd4ed2c967a230\\n// Level 24: 0x24be7e64f680326e6e3621e5862d7b6b1f31e9e183a0bf5dd04e823be84e6af9\\n// Level 25: 0x212b13c9cbf421942ae3e3c62a3c072903c2a745a220cfb3c43cd520f55f44bf\\nbytes32 constant TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x1bdded415724018275c7fcc2f564f64db01b5bbeb06d65700564b05c3c59c9e6)\\n);\\n\\nuint256 constant THIRTY_TWO_LEVELS = 32;\\n/// @dev Root of the binary merkle THIRTY_TWO_LEVELS tree with ZERO_VALUE leafs\\n// Level 26: TWENTY_SIX_LEVEL_EMPTY_TREE_ROOT\\n// Level 27: 0x038acf368a174e10c45a64161131c0f93faf2f045ff663acbef804eb5644aad7\\n// Level 28: 0x1b3ecbe4131d8d52d60b91ec8e13d5fc82235232bb43007d54cda6b50d932d6f\\n// Level 29: 0x1b0b9059f431d38a66c82317d9ed1b744c439f10193ae44bcf519fe6e1766b65\\n// Level 30: 0x240867e8bb31d6b8057f5ab067dc0bd1c4ba64a42258963ec45b7b4773ce5838\\n// Level 31: 0x2310e5b3543ea766ecaec53003d0e1b73f19a149409190d00561da7090a2c5cb\\nbytes32 constant THIRTY_TWO_LEVEL_EMPTY_TREE_ROOT = bytes32(\\n    uint256(0x24ab16594d418ca2e66ca284f56a4cb7039c6d8f8e0c3c8f362cf18b5afa19d0)\\n);\\n\",\"keccak256\":\"0x21997b2f641d5438810117c645125df9d4a9c2a295c28855ff2c3606909225d7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200390538038062003905833981016040819052620000359162000181565b8482828560006001600160a01b0316816001600160a01b031614156040518060400160405280600581526020016442543a453160d81b81525090620000985760405162461bcd60e51b81526004016200008f919062000201565b60405180910390fd5b506001600160a01b0392831660805290821660a052811660c0528116620001025760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064016200008f565b6001600160a01b0390811660e0526040805180820190915260068152655042543a453160d01b6020820152908516620001505760405162461bcd60e51b81526004016200008f919062000201565b505050506001600160a01b0316610100525062000251565b6001600160a01b03811681146200017e57600080fd5b50565b600080600080600060a086880312156200019a57600080fd5b8551620001a78162000168565b6020870151909550620001ba8162000168565b6040870151909450620001cd8162000168565b6060870151909350620001e08162000168565b6080870151909250620001f38162000168565b809150509295509295909350565b600060208083528351808285015260005b81811015620002305785810183015185820160400152820162000212565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c05160e05161010051613630620002d56000396000818161040d0152611e960152600081816101f00152610ee60152600081816103a801528181610b6c0152818161160e015281816117a5015281816118df0152611f1c0152600081816104a5015261091b0152600081816101ac01526108ee01526136306000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80636fa5f135116100e357806399248ea71161008c578063cc68fe8c11610066578063cc68fe8c1461048d578063ddec19b8146104a0578063fc72e285146104c757600080fd5b806399248ea7146104085780639fc4bca71461042f578063a3548b991461047a57600080fd5b80638309d8fa116100bd5780638309d8fa1461038c5780638f3e52de146103a357806390517d30146103ca57600080fd5b80636fa5f1351461032457806378e97925146103445780637c8487421461035b57600080fd5b806350ef945d116101455780636749a2e41161011f5780636749a2e4146102b25780636817f7db146102e35780636a8d3b4e1461030457600080fd5b806350ef945d146102465780635ca1e165146102595780635e615a6b1461026f57600080fd5b8063117803e311610176578063117803e3146101eb5780631ab7415b146102125780634714071b1461021a57600080fd5b806302d943231461019257806308c84e70146101a7575b600080fd5b6101a56101a0366004612e4c565b6104da565b005b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6101a5610cae565b60375461023190600160701b900463ffffffff1681565b60405163ffffffff90911681526020016101e2565b6101a5610254366004612f4f565b610ee4565b610261611064565b6040519081526020016101e2565b6002546040805161ffff6c01000000000000000000000000840481168252600160701b840481166020830152600160e01b909304909216908201526060016101e2565b6037546102cb906201000090046001600160601b031681565b6040516001600160601b0390911681526020016101e2565b6037546102f19061ffff1681565b60405161ffff90911681526020016101e2565b610317610312366004612fb4565b61109b565b6040516101e29190613057565b610337610332366004612fb4565b61127d565b6040516101e29190613066565b60375461023190600160b01b900463ffffffff1681565b61036e61036936600461311b565b6115e1565b6040805163ffffffff909316835260ff9091166020830152016101e2565b60375461023190600160901b900463ffffffff1681565b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6103d26116ab565b6040805163ffffffff9586168152938516602085015291909316908201526001600160601b0390911660608201526080016101e2565b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6004546040805163ffffffff8084168252640100000000840416602082015264ffffffffff600160401b8404811692820192909252600160681b9092041660608201526080016101e2565b61036e610488366004613169565b611778565b61026161049b36600461319e565b61184e565b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b61036e6104d536600461319e565b6118b2565b63ffffffff8316600090815260208190526040902054839060ff166105375760405162461bcd60e51b815260206004820152600e60248201526d42513a454d5054595f515545554560901b60448201526064015b60405180910390fd5b60008360008151811061054c5761054c6131b7565b602002602001015160001b9050610561611064565b81146040518060400160405280600581526020017f42543a4533000000000000000000000000000000000000000000000000000000815250906105b75760405162461bcd60e51b815260040161052e91906131cd565b50506040516bffffffffffffffffffffffff19606087901b1660208201527fffffffff0000000000000000000000000000000000000000000000000000000060e086901b166034820152600090603801604051602081830303815290604052905060008460078151811061062d5761062d6131b7565b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828051906020012060001c61066d9190613231565b81146040518060400160405280600581526020017f42543a4534000000000000000000000000000000000000000000000000000000815250906106c35760405162461bcd60e51b815260040161052e91906131cd565b5050506000836008815181106106db576106db6131b7565b6020026020010151905080600014156040518060400160405280600581526020017f42543a45350000000000000000000000000000000000000000000000000000008152509061073e5760405162461bcd60e51b815260040161052e91906131cd565b5050600454835163ffffffff9091169060009085906002908110610764576107646131b7565b602002602001015190508163ffffffff1681146040518060400160405280600581526020017f42543a4536000000000000000000000000000000000000000000000000000000815250906107cb5760405162461bcd60e51b815260040161052e91906131cd565b505060008060006107db8861197c565b9250925092506000876003815181106107f6576107f66131b7565b602002602001015190508360001c81146040518060400160405280600581526020017f42543a45370000000000000000000000000000000000000000000000000000008152509061085a5760405162461bcd60e51b815260040161052e91906131cd565b5050600087600481518110610871576108716131b7565b602002602001015190508260ff1681146040518060400160405280600581526020017f42543a4538000000000000000000000000000000000000000000000000000000815250906108d55760405162461bcd60e51b815260040161052e91906131cd565b5050604051634f5267b760e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639ea4cf6e90610947907f0000000000000000000000000000000000000000000000000000000000000000908b908b90600401613268565b602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190613318565b6040518060400160405280600581526020017f42543a4539000000000000000000000000000000000000000000000000000000815250906109dc5760405162461bcd60e51b815260040161052e91906131cd565b506000876006815181106109f2576109f26131b7565b60209081029190910101516004805464ffffffffff43908116600160681b0271ffffffffff00000000000000000000000000199092169190911790915590915060006001610a42600a6002613434565b610a4c9190613440565b8763ffffffff1616905080600003610a8857600480546cffffffffff00000000000000001916600160401b64ffffffffff851602179055610ae6565b610a94600a6002613434565b610a9f826001613453565b03610ae657604051838152600a88901c623fffff169081907f6b4825234564d7696c105338f7976904b9f2119bb3c25b2ecc6f5ff766addc539060200160405180910390a2505b5050600088600181518110610afd57610afd6131b7565b602090810291909101015160038190559050610b1a866001613466565b6004805463ffffffff191663ffffffff9283161780825560ff8716928291610b4c918591640100000000900416613466565b92506101000a81548163ffffffff021916908363ffffffff1602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2e3e62b8260016040518363ffffffff1660e01b8152600401610bc2929190918252602082015260400190565b600060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b50508a51643fffffffc060068a901b169250600091508b906005908110610c1957610c196131b7565b602002602001015160001b9050808c63ffffffff167fd01e2f68a60297b8e6af6f6a73de794cfa4156df3062120b25713ff52049751d88858789604051610c84949392919060ff94909416845263ffffffff9290921660208401526040830152606082015260800190565b60405180910390a3610c9f8d866001600160601b0316611e7d565b50505050505050505050505050565b60375460408051600160701b90920463ffffffff1660208301819052916000917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000191016040516020818303038152906040528051906020012060001c610d149190613231565b90506000610d26600383166001613453565b9050610d314261184e565b811115610d3d57505050565b60008167ffffffffffffffff811115610d5857610d58612c73565b604051908082528060200260200182016040528015610d81578160200160208202803683370190505b5090508260001b81600081518110610d9b57610d9b6131b7565b602090810291909101015283610db08161348a565b9450600190505b82811015610e42577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185604051602001610df391815260200190565b6040516020818303038152906040528051906020012060001c610e169190613231565b60001b828281518110610e2b57610e2b6131b7565b602090810291909101015260019485019401610db7565b50603780544263ffffffff908116600160901b027fffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffffff918816600160701b02919091167fffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffff909216919091171790819055600090610ecf9084906001600160601b0362010000909104166134a3565b9050610edb8282611fc3565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610f5c5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a6564000000000000000000000000604482015260640161052e565b610f6783838361256d565b60008561ffff16118015610f8457506000846001600160601b0316115b6040518060400160405280600681526020017f5042543a4533000000000000000000000000000000000000000000000000000081525090610fd85760405162461bcd60e51b815260040161052e91906131cd565b50603754600160b01b900463ffffffff1660000361102757603780547fffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffff16600160b01b4263ffffffff16021790555b5050603780546001600160601b0390931662010000026dffffffffffffffffffffffffffff1990931661ffff909416939093179190911790915550565b60035460009015611076575060035490565b507f1bdded415724018275c7fcc2f564f64db01b5bbeb06d65700564b05c3c59c9e690565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915263ffffffff80831660009081526020818152604091829020825160c081018452905460ff811682526001600160601b036101008204169282019290925264ffffffffff600160681b8304811693820193909352600160901b82049092166060830152600160b81b810483166080830152600160d81b9004821660a082015260025490911661116b846001613466565b63ffffffff1614806111805750805160ff1615155b6111cc5760405162461bcd60e51b815260206004820152601d60248201527f42543a554e4b4e4f574e5f4f525f50524f4345535345445f5155455545000000604482015260640161052e565b6000806111d883612697565b50915091506040518061010001604052808663ffffffff168152602001846000015160ff168152602001836001600160601b03168152602001826001600160601b03168152602001846040015164ffffffffff168152602001846060015164ffffffffff16815260200161124b8561276a565b64ffffffffff16815263ffffffff90961660009081526001602090815260409091205496019590955250929392505050565b60025460609063ffffffff64010000000090910481169083168111156112a6575063ffffffff82165b8067ffffffffffffffff8111156112bf576112bf612c73565b60405190808252806020026020018201604052801561132e57816020015b604080516101008101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082015282526000199092019101816112dd5790505b50600254909250600160401b900463ffffffff1660005b828110156115d957600061135a6001846134c2565b63ffffffff80821660009081526020818152604091829020825160c081018452905460ff811682526001600160601b036101008204169282019290925264ffffffffff600160681b8304811693820193909352600160901b82049092166060830152600160b81b810483166080830152600160d81b900490911660a082015286519192509082908790859081106113f3576113f36131b7565b602090810291909101015163ffffffff90911690528051865187908590811061141e5761141e6131b7565b60209081029190910181015160ff90921691015260008061143e83612697565b509150915081888681518110611456576114566131b7565b6020026020010151604001906001600160601b031690816001600160601b0316815250508088868151811061148d5761148d6131b7565b6020026020010151606001906001600160601b031690816001600160601b03168152505082604001518886815181106114c8576114c86131b7565b60200260200101516080019064ffffffffff16908164ffffffffff168152505082606001518886815181106114ff576114ff6131b7565b602002602001015160a0019064ffffffffff16908164ffffffffff16815250506115288361276a565b88868151811061153a5761153a6131b7565b602002602001015160c0019064ffffffffff16908164ffffffffff1681525050600160008563ffffffff1663ffffffff1681526020019081526020016000205488868151811061158c5761158c6131b7565b602090810291909101015160e0015260a083015163ffffffff16156115b5578260a001516115c0565b6115c0866001613466565b95505050505080806115d19061348a565b915050611345565b505050919050565b60408051808201909152600681526528212a1d229960d11b60208201526000908190336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461164c5760405162461bcd60e51b815260040161052e91906131cd565b5083516040805180820190915260068152651410950e914d60d21b60208201529061168a5760405162461bcd60e51b815260040161052e91906131cd565b5061169683855161281a565b6116a08484611fc3565b909590945092505050565b60025460009081908190819063ffffffff1680820361170c5760405162461bcd60e51b815260206004820152600c60248201527f42543a4e4f5f5155455545530000000000000000000000000000000000000000604482015260640161052e565b6117176001826134c2565b600254909550640100000000900463ffffffff16935083156117545760025461174f90600190600160401b900463ffffffff166134c2565b611757565b60005b9250600260109054906101000a90046001600160601b031691505090919293565b60408051808201909152600681526528212a1d229960d11b60208201526000908190336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117e35760405162461bcd60e51b815260040161052e91906131cd565b5082516040805180820190915260068152651410950e914d60d21b6020820152906118215760405162461bcd60e51b815260040161052e91906131cd565b508251603754600091611842916201000090046001600160601b03166134df565b90506116a08482611fc3565b603754600090600160901b900463ffffffff16821161186f57506000919050565b60375460009061188c90600160901b900463ffffffff1684613440565b60375490915061ffff166118a1603c8361350e565b6118ab91906134a3565b9392505050565b60408051808201909152600681526528212a1d229960d11b60208201526000908190336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461191d5760405162461bcd60e51b815260040161052e91906131cd565b50604080516001808252818301909252600091602080830190803683370190505090508381600081518110611954576119546131b7565b60209081029190910101526037546116a09082906201000090046001600160601b0316611fc3565b63ffffffff811660009081526020819052604081205481908190849060ff166119d85760405162461bcd60e51b815260206004820152600e60248201526d42513a454d5054595f515545554560901b604482015260640161052e565b63ffffffff80861660009081526020818152604091829020825160c081018452905460ff811682526001600160601b036101008204169282019290925264ffffffffff600160681b8304811693820193909352600160901b82049092166060830152600160b81b810483166080830152600160d81b900490911660a0820152611a608161276a565b64ffffffffff1615611ab45760405162461bcd60e51b815260206004820152601260248201527f4251543a494d4d41545552455f51554555450000000000000000000000000000604482015260640161052e565b63ffffffff861660009081526001602052604090205481519095509350611ada816128ac565b92506040518060c00160405280600060ff16815260200160006001600160601b03168152602001600064ffffffffff168152602001600064ffffffffff168152602001600063ffffffff168152602001600063ffffffff168152506000808863ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600001600d6101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160126101000a81548164ffffffffff021916908364ffffffffff16021790555060808201518160000160176101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001601b6101000a81548163ffffffff021916908363ffffffff1602179055509050506000801b600160008863ffffffff1663ffffffff168152602001908152602001600020819055506001600260048282829054906101000a900463ffffffff16611c8d91906134c2565b92506101000a81548163ffffffff021916908363ffffffff16021790555060006001600260009054906101000a900463ffffffff16611ccc91906134c2565b90508063ffffffff168763ffffffff1603611cef57611ce9612a2a565b50909150505b60008260a0015163ffffffff16600014611d0d578260a00151611d18565b611d18886002613466565b90506000611d276001836134c2565b9050600080611d378b6001613466565b600254600160401b900463ffffffff90811691161490508015611d8057600280546bffffffff00000000000000001916600160401b63ffffffff87160217905560009150611dfa565b608086015163ffffffff1615611d9a578560800151611d9c565b8a5b915083600080611dad6001866134c2565b63ffffffff9081168252602082019290925260400160002080547fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d81b93909216929092021790555b5063ffffffff8083166000908152602081905260408082208054948416600160b81b027fffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffff909516949094179093559151908b16917f81f0d9af25a73b8f7cf554b545eca60fbd59ab3d640c9d0c00b8914c60f5553d91a250505050509193909250565b6040805160a08101825260008082526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660208401908152838501928352868216606085019081526001600160601b03878116608087019081529651637b01fb1b60e01b8152865160ff1660048201529251841660248401529351604483015251821660648201529351909116608484015290917f000000000000000000000000000000000000000000000000000000000000000090911690637b01fb1b9060a401600060405180830381600087803b158015611f6257600080fd5b505af1158015611f76573d6000803e3d6000fd5b5050604080516001600160a01b0387168152602081018690527fad874d382891006d1fa6192a11e479ffc8f49a8402d2075bcd6957cc09ebd41093500190505b60405180910390a1505050565b600080611fd260066002613434565b8451106120215760405162461bcd60e51b815260206004820152601160248201527f42513a544f4f5f4d414e595f5554584f53000000000000000000000000000000604482015260640161052e565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260025460009063ffffffff168082036120a45761206d612a2a565b9195509350915061207f846001613466565b600260086101000a81548163ffffffff021916908363ffffffff160217905550612136565b6120af6001826134c2565b63ffffffff808216600081815260208181526040808320815160c081018352905460ff811682526001600160601b036101008204168285015264ffffffffff600160681b8204811683850152600160901b8204166060830152600160b81b810487166080830152600160d81b900490951660a0860152928252600190522054919550935091505b50815192945091925083914360005b88518110156123db57835160ff166000036121685764ffffffffff821660408501525b600089828151811061217c5761217c6131b7565b6020026020010151905061219b8185876000015160ff16600014612b0c565b855160405160ff909116815290945063ffffffff87169082907ff0028dc6ea18f6779defbbbede247eb20ab68a721dd25f2dd7e2243d84c02e7a9060200160405180910390a36001856000018181516121f49190613522565b60ff1690525061220660066002613434565b855160ff16036123c8578951600090612220846001613453565b612233906001600160601b038d166134a3565b61223d919061350e565b90508086602001818151612251919061353b565b6001600160601b0316905250612267818b61355b565b995083866060019064ffffffffff16908164ffffffffff1681525050856000808963ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600001600d6101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160126101000a81548164ffffffffff021916908364ffffffffff16021790555060808201518160000160176101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001601b6101000a81548163ffffffff021916908363ffffffff16021790555090505084600160008963ffffffff1663ffffffff168152602001908152602001600020819055506123bf612a2a565b91985096509450505b50806123d38161348a565b915050612145565b50825160ff16156125625786836020018181516123f8919061353b565b9150906001600160601b031690816001600160601b03168152505080836060019064ffffffffff16908164ffffffffff1681525050826000808663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600001600d6101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160126101000a81548164ffffffffff021916908364ffffffffff16021790555060808201518160000160176101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001601b6101000a81548163ffffffff021916908363ffffffff16021790555090505081600160008663ffffffff1663ffffffff168152602001908152602001600020819055505b505050509250929050565b6127108361ffff161115801561258957506127108261ffff1611155b6125d55760405162461bcd60e51b815260206004820152601160248201527f42513a494e56414c49445f504152414d53000000000000000000000000000000604482015260640161052e565b600280546fffffffff00000000000000000000000019166c0100000000000000000000000061ffff8681169182026fffff0000000000000000000000000000191692909217600160701b868416908102919091177fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b93861693840217909355604080519182526020820193909352918201527fefe7e0ed4b98044f7cb42a3ec461e836abb61e7ef0e9caa6593abd768ff8f91590606001611fb6565b6000806000806127106002600c9054906101000a900461ffff1661ffff1686602001516001600160601b03166126cd91906134a3565b6126d7919061350e565b90508085602001516001600160601b03166126f29190613440565b93506000856040015164ffffffffff164361270d9190613440565b90506127106002600e9054906101000a900461ffff1661ffff168288602001516001600160601b031661274091906134a3565b61274a91906134a3565b612754919061350e565b9350612760848361357b565b9496939550505050565b600061277860066002613434565b825160ff161061278a57506000919050565b815160009060ff1661279e60066002613434565b6127a89190613440565b905060006127b860066002613434565b6002546127d090600160e01b900461ffff16846134a3565b6127da919061350e565b90506000846040015164ffffffffff16826127f59190613453565b90508043101561280e576128094382613440565b612811565b60005b95945050505050565b60375460009061283a9083906201000090046001600160601b03166134df565b9050806001600160601b0316836001600160601b031610156040518060400160405280600681526020017f5042543a45350000000000000000000000000000000000000000000000000000815250906128a65760405162461bcd60e51b815260040161052e91906131cd565b50505050565b6000806000806128bb85612697565b6002549295509093509150600160801b90046001600160601b0316600082131561295f57816128ea8183613453565b600280546001600160601b0392909216600160801b027fffffffff000000000000000000000000ffffffffffffffffffffffffffffffff9092169190911790556040518181527f37609a2ba4ee8305b625c65b22eb2b06ed2a8fa770f21e1231857e824c46dbc99060200160405180910390a1505b6000821215612a165760006129738361359b565b905081811115612997576129878282613440565b6129919085613440565b93508190505b6129a18183613440565b600280546001600160601b0392909216600160801b027fffffffff000000000000000000000000ffffffffffffffffffffffffffffffff9092169190911790556040518181527f61066a888817843f3bfeca62dcb688f8c02ef711d970adce75a181818c59ee1e9060200160405180910390a1505b612a208385613453565b9695505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905250506002805467ffffffffffffffff198116600163ffffffff808416828101821693841764010000000063ffffffff19909616909417859004821690920116909202179091556040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a083018290529251848152919290917f86a50f6bd16ba014690cf73c5bc4b4bf369cc6dbcd9a055f54b1cd926972c6ae910160405180910390a1909192565b600081612b2257612b1d8385612b2c565b612b24565b835b949350505050565b6000612b4b604051806040016040528085815260200184815250612b54565b90505b92915050565b80516000907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001118015612baa575060208201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b6040518060600160405280602281526020016136026022913990612be15760405162461bcd60e51b815260040161052e91906131cd565b5060405163014cf2b360e51b8152737Ae48edd2Ee06Ba80863A196361B4bAAa5d8F8b19063299e566090612c199085906004016135b7565b602060405180830381865af4158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4e91906135e8565b803563ffffffff81168114612c6e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612cac57612cac612c73565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cdb57612cdb612c73565b604052919050565b600067ffffffffffffffff821115612cfd57612cfd612c73565b5060051b60200190565b600060408284031215612d1957600080fd5b6040516040810181811067ffffffffffffffff82111715612d3c57612d3c612c73565b604052823581526020928301359281019290925250919050565b600082601f830112612d6757600080fd5b612d6f612c89565b806040840185811115612d8157600080fd5b845b81811015612d9b578035845260209384019301612d83565b509095945050505050565b6000818303610100811215612dba57600080fd5b6040516060810181811067ffffffffffffffff82111715612ddd57612ddd612c73565b604052915081612ded8585612d07565b81526080603f1983011215612e0157600080fd5b612e09612c89565b9150612e188560408601612d56565b8252612e278560808601612d56565b6020830152816020820152612e3f8560c08601612d07565b6040820152505092915050565b6000806000806101608587031215612e6357600080fd5b84356001600160a01b0381168114612e7a57600080fd5b93506020612e89868201612c5a565b9350604086013567ffffffffffffffff811115612ea557600080fd5b8601601f81018813612eb657600080fd5b8035612ec9612ec482612ce3565b612cb2565b81815260059190911b8201830190838101908a831115612ee857600080fd5b928401925b82841015612f0657833582529284019290840190612eed565b8096505050505050612f1b8660608701612da6565b905092959194509250565b803561ffff81168114612c6e57600080fd5b80356001600160601b0381168114612c6e57600080fd5b600080600080600060a08688031215612f6757600080fd5b612f7086612f26565b9450612f7e60208701612f38565b9350612f8c60408701612f26565b9250612f9a60608701612f26565b9150612fa860808701612f26565b90509295509295909350565b600060208284031215612fc657600080fd5b612b4b82612c5a565b63ffffffff815116825260ff602082015116602083015260408101516001600160601b038082166040850152806060840151166060850152505064ffffffffff608082015116608083015260a081015161303260a084018264ffffffffff169052565b5060c081015161304b60c084018264ffffffffff169052565b5060e090810151910152565b6101008101612b4e8284612fcf565b6020808252825182820181905260009190848201906040850190845b818110156130a957613095838551612fcf565b928401926101009290920191600101613082565b50909695505050505050565b600082601f8301126130c657600080fd5b813560206130d6612ec483612ce3565b82815260059290921b840181019181810190868411156130f557600080fd5b8286015b8481101561311057803583529183019183016130f9565b509695505050505050565b6000806040838503121561312e57600080fd5b823567ffffffffffffffff81111561314557600080fd5b613151858286016130b5565b92505061316060208401612f38565b90509250929050565b60006020828403121561317b57600080fd5b813567ffffffffffffffff81111561319257600080fd5b612b24848285016130b5565b6000602082840312156131b057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600060208083528351808285015260005b818110156131fa578581018301518582016040015282016131de565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601260045260246000fd5b6000826132405761324061321b565b500690565b8060005b60028110156128a6578151845260209384019390910190600101613249565b6001600160a01b03841681526101406020808301829052845191830182905260009161016084019186810191845b818110156132b257835185529382019392820192600101613296565b50508293506132cf60408601875180518252602090810151910152565b8086015192506132e3608086018451613245565b919091015190506132f760c0840182613245565b50604092909201518051610100830152602001516101209091015292915050565b60006020828403121561332a57600080fd5b815180151581146118ab57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561338b5781600019048211156133715761337161333a565b8085161561337e57918102915b93841c9390800290613355565b509250929050565b6000826133a257506001612b4e565b816133af57506000612b4e565b81600181146133c557600281146133cf576133eb565b6001915050612b4e565b60ff8411156133e0576133e061333a565b50506001821b612b4e565b5060208310610133831016604e8410600b841016171561340e575081810a612b4e565b6134188383613350565b806000190482111561342c5761342c61333a565b029392505050565b6000612b4b8383613393565b81810381811115612b4e57612b4e61333a565b80820180821115612b4e57612b4e61333a565b63ffffffff8181168382160190808211156134835761348361333a565b5092915050565b60006001820161349c5761349c61333a565b5060010190565b60008160001904831182151516156134bd576134bd61333a565b500290565b63ffffffff8281168282160390808211156134835761348361333a565b60006001600160601b03808316818516818304811182151516156135055761350561333a565b02949350505050565b60008261351d5761351d61321b565b500490565b60ff8181168382160190811115612b4e57612b4e61333a565b6001600160601b038181168382160190808211156134835761348361333a565b6001600160601b038281168282160390808211156134835761348361333a565b81810360008312801583831316838312821617156134835761348361333a565b6000600160ff1b82016135b0576135b061333a565b5060000390565b60408101818360005b60028110156135df5781518352602092830192909101906001016135c0565b50505092915050565b6000602082840312156135fa57600080fd5b505191905056fe506f736569646f6e4861736865723a20696e707574206e6f7420696e206669656c64a164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c80636fa5f135116100e357806399248ea71161008c578063cc68fe8c11610066578063cc68fe8c1461048d578063ddec19b8146104a0578063fc72e285146104c757600080fd5b806399248ea7146104085780639fc4bca71461042f578063a3548b991461047a57600080fd5b80638309d8fa116100bd5780638309d8fa1461038c5780638f3e52de146103a357806390517d30146103ca57600080fd5b80636fa5f1351461032457806378e97925146103445780637c8487421461035b57600080fd5b806350ef945d116101455780636749a2e41161011f5780636749a2e4146102b25780636817f7db146102e35780636a8d3b4e1461030457600080fd5b806350ef945d146102465780635ca1e165146102595780635e615a6b1461026f57600080fd5b8063117803e311610176578063117803e3146101eb5780631ab7415b146102125780634714071b1461021a57600080fd5b806302d943231461019257806308c84e70146101a7575b600080fd5b6101a56101a0366004612e4c565b6104da565b005b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6101a5610cae565b60375461023190600160701b900463ffffffff1681565b60405163ffffffff90911681526020016101e2565b6101a5610254366004612f4f565b610ee4565b610261611064565b6040519081526020016101e2565b6002546040805161ffff6c01000000000000000000000000840481168252600160701b840481166020830152600160e01b909304909216908201526060016101e2565b6037546102cb906201000090046001600160601b031681565b6040516001600160601b0390911681526020016101e2565b6037546102f19061ffff1681565b60405161ffff90911681526020016101e2565b610317610312366004612fb4565b61109b565b6040516101e29190613057565b610337610332366004612fb4565b61127d565b6040516101e29190613066565b60375461023190600160b01b900463ffffffff1681565b61036e61036936600461311b565b6115e1565b6040805163ffffffff909316835260ff9091166020830152016101e2565b60375461023190600160901b900463ffffffff1681565b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6103d26116ab565b6040805163ffffffff9586168152938516602085015291909316908201526001600160601b0390911660608201526080016101e2565b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b6004546040805163ffffffff8084168252640100000000840416602082015264ffffffffff600160401b8404811692820192909252600160681b9092041660608201526080016101e2565b61036e610488366004613169565b611778565b61026161049b36600461319e565b61184e565b6101ce7f000000000000000000000000000000000000000000000000000000000000000081565b61036e6104d536600461319e565b6118b2565b63ffffffff8316600090815260208190526040902054839060ff166105375760405162461bcd60e51b815260206004820152600e60248201526d42513a454d5054595f515545554560901b60448201526064015b60405180910390fd5b60008360008151811061054c5761054c6131b7565b602002602001015160001b9050610561611064565b81146040518060400160405280600581526020017f42543a4533000000000000000000000000000000000000000000000000000000815250906105b75760405162461bcd60e51b815260040161052e91906131cd565b50506040516bffffffffffffffffffffffff19606087901b1660208201527fffffffff0000000000000000000000000000000000000000000000000000000060e086901b166034820152600090603801604051602081830303815290604052905060008460078151811061062d5761062d6131b7565b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828051906020012060001c61066d9190613231565b81146040518060400160405280600581526020017f42543a4534000000000000000000000000000000000000000000000000000000815250906106c35760405162461bcd60e51b815260040161052e91906131cd565b5050506000836008815181106106db576106db6131b7565b6020026020010151905080600014156040518060400160405280600581526020017f42543a45350000000000000000000000000000000000000000000000000000008152509061073e5760405162461bcd60e51b815260040161052e91906131cd565b5050600454835163ffffffff9091169060009085906002908110610764576107646131b7565b602002602001015190508163ffffffff1681146040518060400160405280600581526020017f42543a4536000000000000000000000000000000000000000000000000000000815250906107cb5760405162461bcd60e51b815260040161052e91906131cd565b505060008060006107db8861197c565b9250925092506000876003815181106107f6576107f66131b7565b602002602001015190508360001c81146040518060400160405280600581526020017f42543a45370000000000000000000000000000000000000000000000000000008152509061085a5760405162461bcd60e51b815260040161052e91906131cd565b5050600087600481518110610871576108716131b7565b602002602001015190508260ff1681146040518060400160405280600581526020017f42543a4538000000000000000000000000000000000000000000000000000000815250906108d55760405162461bcd60e51b815260040161052e91906131cd565b5050604051634f5267b760e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639ea4cf6e90610947907f0000000000000000000000000000000000000000000000000000000000000000908b908b90600401613268565b602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190613318565b6040518060400160405280600581526020017f42543a4539000000000000000000000000000000000000000000000000000000815250906109dc5760405162461bcd60e51b815260040161052e91906131cd565b506000876006815181106109f2576109f26131b7565b60209081029190910101516004805464ffffffffff43908116600160681b0271ffffffffff00000000000000000000000000199092169190911790915590915060006001610a42600a6002613434565b610a4c9190613440565b8763ffffffff1616905080600003610a8857600480546cffffffffff00000000000000001916600160401b64ffffffffff851602179055610ae6565b610a94600a6002613434565b610a9f826001613453565b03610ae657604051838152600a88901c623fffff169081907f6b4825234564d7696c105338f7976904b9f2119bb3c25b2ecc6f5ff766addc539060200160405180910390a2505b5050600088600181518110610afd57610afd6131b7565b602090810291909101015160038190559050610b1a866001613466565b6004805463ffffffff191663ffffffff9283161780825560ff8716928291610b4c918591640100000000900416613466565b92506101000a81548163ffffffff021916908363ffffffff1602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2e3e62b8260016040518363ffffffff1660e01b8152600401610bc2929190918252602082015260400190565b600060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b50508a51643fffffffc060068a901b169250600091508b906005908110610c1957610c196131b7565b602002602001015160001b9050808c63ffffffff167fd01e2f68a60297b8e6af6f6a73de794cfa4156df3062120b25713ff52049751d88858789604051610c84949392919060ff94909416845263ffffffff9290921660208401526040830152606082015260800190565b60405180910390a3610c9f8d866001600160601b0316611e7d565b50505050505050505050505050565b60375460408051600160701b90920463ffffffff1660208301819052916000917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000191016040516020818303038152906040528051906020012060001c610d149190613231565b90506000610d26600383166001613453565b9050610d314261184e565b811115610d3d57505050565b60008167ffffffffffffffff811115610d5857610d58612c73565b604051908082528060200260200182016040528015610d81578160200160208202803683370190505b5090508260001b81600081518110610d9b57610d9b6131b7565b602090810291909101015283610db08161348a565b9450600190505b82811015610e42577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185604051602001610df391815260200190565b6040516020818303038152906040528051906020012060001c610e169190613231565b60001b828281518110610e2b57610e2b6131b7565b602090810291909101015260019485019401610db7565b50603780544263ffffffff908116600160901b027fffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffffff918816600160701b02919091167fffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffff909216919091171790819055600090610ecf9084906001600160601b0362010000909104166134a3565b9050610edb8282611fc3565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610f5c5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a6564000000000000000000000000604482015260640161052e565b610f6783838361256d565b60008561ffff16118015610f8457506000846001600160601b0316115b6040518060400160405280600681526020017f5042543a4533000000000000000000000000000000000000000000000000000081525090610fd85760405162461bcd60e51b815260040161052e91906131cd565b50603754600160b01b900463ffffffff1660000361102757603780547fffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffff16600160b01b4263ffffffff16021790555b5050603780546001600160601b0390931662010000026dffffffffffffffffffffffffffff1990931661ffff909416939093179190911790915550565b60035460009015611076575060035490565b507f1bdded415724018275c7fcc2f564f64db01b5bbeb06d65700564b05c3c59c9e690565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915263ffffffff80831660009081526020818152604091829020825160c081018452905460ff811682526001600160601b036101008204169282019290925264ffffffffff600160681b8304811693820193909352600160901b82049092166060830152600160b81b810483166080830152600160d81b9004821660a082015260025490911661116b846001613466565b63ffffffff1614806111805750805160ff1615155b6111cc5760405162461bcd60e51b815260206004820152601d60248201527f42543a554e4b4e4f574e5f4f525f50524f4345535345445f5155455545000000604482015260640161052e565b6000806111d883612697565b50915091506040518061010001604052808663ffffffff168152602001846000015160ff168152602001836001600160601b03168152602001826001600160601b03168152602001846040015164ffffffffff168152602001846060015164ffffffffff16815260200161124b8561276a565b64ffffffffff16815263ffffffff90961660009081526001602090815260409091205496019590955250929392505050565b60025460609063ffffffff64010000000090910481169083168111156112a6575063ffffffff82165b8067ffffffffffffffff8111156112bf576112bf612c73565b60405190808252806020026020018201604052801561132e57816020015b604080516101008101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082015282526000199092019101816112dd5790505b50600254909250600160401b900463ffffffff1660005b828110156115d957600061135a6001846134c2565b63ffffffff80821660009081526020818152604091829020825160c081018452905460ff811682526001600160601b036101008204169282019290925264ffffffffff600160681b8304811693820193909352600160901b82049092166060830152600160b81b810483166080830152600160d81b900490911660a082015286519192509082908790859081106113f3576113f36131b7565b602090810291909101015163ffffffff90911690528051865187908590811061141e5761141e6131b7565b60209081029190910181015160ff90921691015260008061143e83612697565b509150915081888681518110611456576114566131b7565b6020026020010151604001906001600160601b031690816001600160601b0316815250508088868151811061148d5761148d6131b7565b6020026020010151606001906001600160601b031690816001600160601b03168152505082604001518886815181106114c8576114c86131b7565b60200260200101516080019064ffffffffff16908164ffffffffff168152505082606001518886815181106114ff576114ff6131b7565b602002602001015160a0019064ffffffffff16908164ffffffffff16815250506115288361276a565b88868151811061153a5761153a6131b7565b602002602001015160c0019064ffffffffff16908164ffffffffff1681525050600160008563ffffffff1663ffffffff1681526020019081526020016000205488868151811061158c5761158c6131b7565b602090810291909101015160e0015260a083015163ffffffff16156115b5578260a001516115c0565b6115c0866001613466565b95505050505080806115d19061348a565b915050611345565b505050919050565b60408051808201909152600681526528212a1d229960d11b60208201526000908190336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461164c5760405162461bcd60e51b815260040161052e91906131cd565b5083516040805180820190915260068152651410950e914d60d21b60208201529061168a5760405162461bcd60e51b815260040161052e91906131cd565b5061169683855161281a565b6116a08484611fc3565b909590945092505050565b60025460009081908190819063ffffffff1680820361170c5760405162461bcd60e51b815260206004820152600c60248201527f42543a4e4f5f5155455545530000000000000000000000000000000000000000604482015260640161052e565b6117176001826134c2565b600254909550640100000000900463ffffffff16935083156117545760025461174f90600190600160401b900463ffffffff166134c2565b611757565b60005b9250600260109054906101000a90046001600160601b031691505090919293565b60408051808201909152600681526528212a1d229960d11b60208201526000908190336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117e35760405162461bcd60e51b815260040161052e91906131cd565b5082516040805180820190915260068152651410950e914d60d21b6020820152906118215760405162461bcd60e51b815260040161052e91906131cd565b508251603754600091611842916201000090046001600160601b03166134df565b90506116a08482611fc3565b603754600090600160901b900463ffffffff16821161186f57506000919050565b60375460009061188c90600160901b900463ffffffff1684613440565b60375490915061ffff166118a1603c8361350e565b6118ab91906134a3565b9392505050565b60408051808201909152600681526528212a1d229960d11b60208201526000908190336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461191d5760405162461bcd60e51b815260040161052e91906131cd565b50604080516001808252818301909252600091602080830190803683370190505090508381600081518110611954576119546131b7565b60209081029190910101526037546116a09082906201000090046001600160601b0316611fc3565b63ffffffff811660009081526020819052604081205481908190849060ff166119d85760405162461bcd60e51b815260206004820152600e60248201526d42513a454d5054595f515545554560901b604482015260640161052e565b63ffffffff80861660009081526020818152604091829020825160c081018452905460ff811682526001600160601b036101008204169282019290925264ffffffffff600160681b8304811693820193909352600160901b82049092166060830152600160b81b810483166080830152600160d81b900490911660a0820152611a608161276a565b64ffffffffff1615611ab45760405162461bcd60e51b815260206004820152601260248201527f4251543a494d4d41545552455f51554555450000000000000000000000000000604482015260640161052e565b63ffffffff861660009081526001602052604090205481519095509350611ada816128ac565b92506040518060c00160405280600060ff16815260200160006001600160601b03168152602001600064ffffffffff168152602001600064ffffffffff168152602001600063ffffffff168152602001600063ffffffff168152506000808863ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600001600d6101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160126101000a81548164ffffffffff021916908364ffffffffff16021790555060808201518160000160176101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001601b6101000a81548163ffffffff021916908363ffffffff1602179055509050506000801b600160008863ffffffff1663ffffffff168152602001908152602001600020819055506001600260048282829054906101000a900463ffffffff16611c8d91906134c2565b92506101000a81548163ffffffff021916908363ffffffff16021790555060006001600260009054906101000a900463ffffffff16611ccc91906134c2565b90508063ffffffff168763ffffffff1603611cef57611ce9612a2a565b50909150505b60008260a0015163ffffffff16600014611d0d578260a00151611d18565b611d18886002613466565b90506000611d276001836134c2565b9050600080611d378b6001613466565b600254600160401b900463ffffffff90811691161490508015611d8057600280546bffffffff00000000000000001916600160401b63ffffffff87160217905560009150611dfa565b608086015163ffffffff1615611d9a578560800151611d9c565b8a5b915083600080611dad6001866134c2565b63ffffffff9081168252602082019290925260400160002080547fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d81b93909216929092021790555b5063ffffffff8083166000908152602081905260408082208054948416600160b81b027fffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffff909516949094179093559151908b16917f81f0d9af25a73b8f7cf554b545eca60fbd59ab3d640c9d0c00b8914c60f5553d91a250505050509193909250565b6040805160a08101825260008082526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660208401908152838501928352868216606085019081526001600160601b03878116608087019081529651637b01fb1b60e01b8152865160ff1660048201529251841660248401529351604483015251821660648201529351909116608484015290917f000000000000000000000000000000000000000000000000000000000000000090911690637b01fb1b9060a401600060405180830381600087803b158015611f6257600080fd5b505af1158015611f76573d6000803e3d6000fd5b5050604080516001600160a01b0387168152602081018690527fad874d382891006d1fa6192a11e479ffc8f49a8402d2075bcd6957cc09ebd41093500190505b60405180910390a1505050565b600080611fd260066002613434565b8451106120215760405162461bcd60e51b815260206004820152601160248201527f42513a544f4f5f4d414e595f5554584f53000000000000000000000000000000604482015260640161052e565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260025460009063ffffffff168082036120a45761206d612a2a565b9195509350915061207f846001613466565b600260086101000a81548163ffffffff021916908363ffffffff160217905550612136565b6120af6001826134c2565b63ffffffff808216600081815260208181526040808320815160c081018352905460ff811682526001600160601b036101008204168285015264ffffffffff600160681b8204811683850152600160901b8204166060830152600160b81b810487166080830152600160d81b900490951660a0860152928252600190522054919550935091505b50815192945091925083914360005b88518110156123db57835160ff166000036121685764ffffffffff821660408501525b600089828151811061217c5761217c6131b7565b6020026020010151905061219b8185876000015160ff16600014612b0c565b855160405160ff909116815290945063ffffffff87169082907ff0028dc6ea18f6779defbbbede247eb20ab68a721dd25f2dd7e2243d84c02e7a9060200160405180910390a36001856000018181516121f49190613522565b60ff1690525061220660066002613434565b855160ff16036123c8578951600090612220846001613453565b612233906001600160601b038d166134a3565b61223d919061350e565b90508086602001818151612251919061353b565b6001600160601b0316905250612267818b61355b565b995083866060019064ffffffffff16908164ffffffffff1681525050856000808963ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600001600d6101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160126101000a81548164ffffffffff021916908364ffffffffff16021790555060808201518160000160176101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001601b6101000a81548163ffffffff021916908363ffffffff16021790555090505084600160008963ffffffff1663ffffffff168152602001908152602001600020819055506123bf612a2a565b91985096509450505b50806123d38161348a565b915050612145565b50825160ff16156125625786836020018181516123f8919061353b565b9150906001600160601b031690816001600160601b03168152505080836060019064ffffffffff16908164ffffffffff1681525050826000808663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600001600d6101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160126101000a81548164ffffffffff021916908364ffffffffff16021790555060808201518160000160176101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001601b6101000a81548163ffffffff021916908363ffffffff16021790555090505081600160008663ffffffff1663ffffffff168152602001908152602001600020819055505b505050509250929050565b6127108361ffff161115801561258957506127108261ffff1611155b6125d55760405162461bcd60e51b815260206004820152601160248201527f42513a494e56414c49445f504152414d53000000000000000000000000000000604482015260640161052e565b600280546fffffffff00000000000000000000000019166c0100000000000000000000000061ffff8681169182026fffff0000000000000000000000000000191692909217600160701b868416908102919091177fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b93861693840217909355604080519182526020820193909352918201527fefe7e0ed4b98044f7cb42a3ec461e836abb61e7ef0e9caa6593abd768ff8f91590606001611fb6565b6000806000806127106002600c9054906101000a900461ffff1661ffff1686602001516001600160601b03166126cd91906134a3565b6126d7919061350e565b90508085602001516001600160601b03166126f29190613440565b93506000856040015164ffffffffff164361270d9190613440565b90506127106002600e9054906101000a900461ffff1661ffff168288602001516001600160601b031661274091906134a3565b61274a91906134a3565b612754919061350e565b9350612760848361357b565b9496939550505050565b600061277860066002613434565b825160ff161061278a57506000919050565b815160009060ff1661279e60066002613434565b6127a89190613440565b905060006127b860066002613434565b6002546127d090600160e01b900461ffff16846134a3565b6127da919061350e565b90506000846040015164ffffffffff16826127f59190613453565b90508043101561280e576128094382613440565b612811565b60005b95945050505050565b60375460009061283a9083906201000090046001600160601b03166134df565b9050806001600160601b0316836001600160601b031610156040518060400160405280600681526020017f5042543a45350000000000000000000000000000000000000000000000000000815250906128a65760405162461bcd60e51b815260040161052e91906131cd565b50505050565b6000806000806128bb85612697565b6002549295509093509150600160801b90046001600160601b0316600082131561295f57816128ea8183613453565b600280546001600160601b0392909216600160801b027fffffffff000000000000000000000000ffffffffffffffffffffffffffffffff9092169190911790556040518181527f37609a2ba4ee8305b625c65b22eb2b06ed2a8fa770f21e1231857e824c46dbc99060200160405180910390a1505b6000821215612a165760006129738361359b565b905081811115612997576129878282613440565b6129919085613440565b93508190505b6129a18183613440565b600280546001600160601b0392909216600160801b027fffffffff000000000000000000000000ffffffffffffffffffffffffffffffff9092169190911790556040518181527f61066a888817843f3bfeca62dcb688f8c02ef711d970adce75a181818c59ee1e9060200160405180910390a1505b612a208385613453565b9695505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905250506002805467ffffffffffffffff198116600163ffffffff808416828101821693841764010000000063ffffffff19909616909417859004821690920116909202179091556040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a083018290529251848152919290917f86a50f6bd16ba014690cf73c5bc4b4bf369cc6dbcd9a055f54b1cd926972c6ae910160405180910390a1909192565b600081612b2257612b1d8385612b2c565b612b24565b835b949350505050565b6000612b4b604051806040016040528085815260200184815250612b54565b90505b92915050565b80516000907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001118015612baa575060208201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001115b6040518060600160405280602281526020016136026022913990612be15760405162461bcd60e51b815260040161052e91906131cd565b5060405163014cf2b360e51b815273__$3d381aec2d571db697c779e211a438fb21$__9063299e566090612c199085906004016135b7565b602060405180830381865af4158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4e91906135e8565b803563ffffffff81168114612c6e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612cac57612cac612c73565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cdb57612cdb612c73565b604052919050565b600067ffffffffffffffff821115612cfd57612cfd612c73565b5060051b60200190565b600060408284031215612d1957600080fd5b6040516040810181811067ffffffffffffffff82111715612d3c57612d3c612c73565b604052823581526020928301359281019290925250919050565b600082601f830112612d6757600080fd5b612d6f612c89565b806040840185811115612d8157600080fd5b845b81811015612d9b578035845260209384019301612d83565b509095945050505050565b6000818303610100811215612dba57600080fd5b6040516060810181811067ffffffffffffffff82111715612ddd57612ddd612c73565b604052915081612ded8585612d07565b81526080603f1983011215612e0157600080fd5b612e09612c89565b9150612e188560408601612d56565b8252612e278560808601612d56565b6020830152816020820152612e3f8560c08601612d07565b6040820152505092915050565b6000806000806101608587031215612e6357600080fd5b84356001600160a01b0381168114612e7a57600080fd5b93506020612e89868201612c5a565b9350604086013567ffffffffffffffff811115612ea557600080fd5b8601601f81018813612eb657600080fd5b8035612ec9612ec482612ce3565b612cb2565b81815260059190911b8201830190838101908a831115612ee857600080fd5b928401925b82841015612f0657833582529284019290840190612eed565b8096505050505050612f1b8660608701612da6565b905092959194509250565b803561ffff81168114612c6e57600080fd5b80356001600160601b0381168114612c6e57600080fd5b600080600080600060a08688031215612f6757600080fd5b612f7086612f26565b9450612f7e60208701612f38565b9350612f8c60408701612f26565b9250612f9a60608701612f26565b9150612fa860808701612f26565b90509295509295909350565b600060208284031215612fc657600080fd5b612b4b82612c5a565b63ffffffff815116825260ff602082015116602083015260408101516001600160601b038082166040850152806060840151166060850152505064ffffffffff608082015116608083015260a081015161303260a084018264ffffffffff169052565b5060c081015161304b60c084018264ffffffffff169052565b5060e090810151910152565b6101008101612b4e8284612fcf565b6020808252825182820181905260009190848201906040850190845b818110156130a957613095838551612fcf565b928401926101009290920191600101613082565b50909695505050505050565b600082601f8301126130c657600080fd5b813560206130d6612ec483612ce3565b82815260059290921b840181019181810190868411156130f557600080fd5b8286015b8481101561311057803583529183019183016130f9565b509695505050505050565b6000806040838503121561312e57600080fd5b823567ffffffffffffffff81111561314557600080fd5b613151858286016130b5565b92505061316060208401612f38565b90509250929050565b60006020828403121561317b57600080fd5b813567ffffffffffffffff81111561319257600080fd5b612b24848285016130b5565b6000602082840312156131b057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600060208083528351808285015260005b818110156131fa578581018301518582016040015282016131de565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601260045260246000fd5b6000826132405761324061321b565b500690565b8060005b60028110156128a6578151845260209384019390910190600101613249565b6001600160a01b03841681526101406020808301829052845191830182905260009161016084019186810191845b818110156132b257835185529382019392820192600101613296565b50508293506132cf60408601875180518252602090810151910152565b8086015192506132e3608086018451613245565b919091015190506132f760c0840182613245565b50604092909201518051610100830152602001516101209091015292915050565b60006020828403121561332a57600080fd5b815180151581146118ab57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561338b5781600019048211156133715761337161333a565b8085161561337e57918102915b93841c9390800290613355565b509250929050565b6000826133a257506001612b4e565b816133af57506000612b4e565b81600181146133c557600281146133cf576133eb565b6001915050612b4e565b60ff8411156133e0576133e061333a565b50506001821b612b4e565b5060208310610133831016604e8410600b841016171561340e575081810a612b4e565b6134188383613350565b806000190482111561342c5761342c61333a565b029392505050565b6000612b4b8383613393565b81810381811115612b4e57612b4e61333a565b80820180821115612b4e57612b4e61333a565b63ffffffff8181168382160190808211156134835761348361333a565b5092915050565b60006001820161349c5761349c61333a565b5060010190565b60008160001904831182151516156134bd576134bd61333a565b500290565b63ffffffff8281168282160390808211156134835761348361333a565b60006001600160601b03808316818516818304811182151516156135055761350561333a565b02949350505050565b60008261351d5761351d61321b565b500490565b60ff8181168382160190811115612b4e57612b4e61333a565b6001600160601b038181168382160190808211156134835761348361333a565b6001600160601b038281168282160390808211156134835761348361333a565b81810360008312801583831316838312821617156134835761348361333a565b6000600160ff1b82016135b0576135b061333a565b5060000390565b60408101818360005b60028110156135df5781518352602092830192909101906001016135c0565b50505092915050565b6000602082840312156135fa57600080fd5b505191905056fe506f736569646f6e4861736865723a20696e707574206e6f7420696e206669656c64a164736f6c6343000810000a",
  "libraries": {
    "PoseidonT3": "0x7Ae48edd2Ee06Ba80863A196361B4bAAa5d8F8b1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addUtxosToBusQueue(bytes32[])": {
        "details": "If the current queue has no space left to add all UTXOs, a part of UTXOs only are added to the current queue until it gets full, then the remaining UTXOs are added to a new queue. Index of any UTXO (not just the 1st one) may be computed as follows: - index of UTXO in a queue increments by +1 with every new UTXO added,   (from 0 for the 1st UTXO in a queue up to `QUEUE_MAX_SIZE - 1`) - number of UTXOs added to the new queue (if there are such) equals to   `firstUtxoIndexInQueue + utxos[0].length - QUEUE_MAX_SIZE` - new queue (if created) has ID equal to `firstUtxoQueueId + 1`",
        "returns": {
          "firstUtxoIndexInQueue": "Index of `utxos[0]` in the queue",
          "firstUtxoQueueId": "ID of the queue which `utxos[0]` was added to"
        }
      },
      "onboardQueue(address,uint32,uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)))": {
        "details": "ZK-circuit public signals:",
        "params": {
          "inputs": "[8] - magicalConstraint (non-zero random number)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21553,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_busQueues",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint32,t_struct(BusQueue)21531_storage)"
      },
      {
        "astId": 21557,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_busQueueCommitments",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 21559,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_nextQueueId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 21561,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_numPendingQueues",
        "offset": 4,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 21563,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_oldestPendingQueueLink",
        "offset": 8,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 21565,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_reservationRate",
        "offset": 12,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 21567,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_premiumRate",
        "offset": 14,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 21569,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_rewardReserve",
        "offset": 16,
        "slot": "2",
        "type": "t_uint96"
      },
      {
        "astId": 21571,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_minEmptyQueueAge",
        "offset": 28,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 22715,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_busTreeRoot",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 22717,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_numBatchesInBusTree",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 22719,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_numUtxosInBusTree",
        "offset": 4,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 22721,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_latestBranchFirstBatchBlock",
        "offset": 8,
        "slot": "4",
        "type": "t_uint40"
      },
      {
        "astId": 22723,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "_latestBatchBlock",
        "offset": 13,
        "slot": "4",
        "type": "t_uint40"
      },
      {
        "astId": 7204,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7208,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "perMinuteUtxosLimit",
        "offset": 0,
        "slot": "55",
        "type": "t_uint16"
      },
      {
        "astId": 7210,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "basePerUtxoReward",
        "offset": 2,
        "slot": "55",
        "type": "t_uint96"
      },
      {
        "astId": 7212,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "utxoCounter",
        "offset": 14,
        "slot": "55",
        "type": "t_uint32"
      },
      {
        "astId": 7214,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "lastUtxoSimulationTimestamp",
        "offset": 18,
        "slot": "55",
        "type": "t_uint32"
      },
      {
        "astId": 7216,
        "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
        "label": "startTime",
        "offset": 22,
        "slot": "55",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_struct(BusQueue)21531_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct BusQueues.BusQueue)",
        "numberOfBytes": "32",
        "value": "t_struct(BusQueue)21531_storage"
      },
      "t_struct(BusQueue)21531_storage": {
        "encoding": "inplace",
        "label": "struct BusQueues.BusQueue",
        "members": [
          {
            "astId": 21520,
            "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
            "label": "nUtxos",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 21522,
            "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
            "label": "reward",
            "offset": 1,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 21524,
            "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
            "label": "firstUtxoBlock",
            "offset": 13,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 21526,
            "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
            "label": "lastUtxoBlock",
            "offset": 18,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 21528,
            "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
            "label": "prevLink",
            "offset": 23,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21530,
            "contract": "contracts/protocol/PantherBusTree.sol:PantherBusTree",
            "label": "nextLink",
            "offset": 27,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}