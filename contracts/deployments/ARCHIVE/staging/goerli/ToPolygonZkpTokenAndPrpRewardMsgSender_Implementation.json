{
  "address": "0x065915B17a373953f0b4E11aB30766634F077e66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prpConverter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolRewardMessageRelayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pantherRewardController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootChainManagerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20PredicateProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "PrpRewardMessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zkpAmount",
          "type": "uint256"
        }
      ],
      "name": "ZkpTokenSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANTHER_REWARD_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_REWARD_MESSAGE_RELAYER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRP_CONVERTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "bridgeZkpTokensAndPrpRewardsMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBridgeExecution",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6b191249156dcba78ab6235df840265526aa554957f830333210254fb39d89a",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x065915B17a373953f0b4E11aB30766634F077e66",
    "transactionIndex": 13,
    "gasUsed": "525783",
    "logsBloom": "0x
    "blockHash": "0xb4f9e00e14959648c39f07258399f83d8132c91eeaca4c7c6a20ae4b13de4524",
    "transactionHash": "0xb6b191249156dcba78ab6235df840265526aa554957f830333210254fb39d89a",
    "logs": [],
    "blockNumber": 10018822,
    "cumulativeGasUsed": "7288004",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0x2ca8E95f31B6576aEe0559189bdC7b655ba72132",
    "0xCf82931099154FA52F4f8619e1B9d19FeDB8D9Ca",
    "0x3Eb4f42B303f865B2409e67031927E4c4FEB3f1F",
    "0x542c2c3e6BBfD5979E5FEC6708764B93Ba210c51",
    "0xA543d6badE63ff48dEed3ceC066003f295A09790",
    "0xA543d6badE63ff48dEed3ceC066003f295A09790",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "numDeployments": 2,
  "solcInputHash": "c1be949b0fd8c0217e2d6a92595fd866",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prpConverter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolRewardMessageRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pantherRewardController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootChainManagerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20PredicateProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"PrpRewardMessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zkpAmount\",\"type\":\"uint256\"}],\"name\":\"ZkpTokenSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANTHER_REWARD_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_REWARD_MESSAGE_RELAYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRP_CONVERTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"bridgeZkpTokensAndPrpRewardsMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBridgeExecution\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pantherprotocol Contributors\",\"details\":\"This contract lives on Ethereum chain and asks from PantherRewardController to release $ZKP rewards and then if there are releasable $ZKPs, it interacts with the ETH<->Polygon bridge to send them to the Polygon chain via Polygon FXRoot contract. Anyone can try to release and bridge ZKPs. This contract also bridge the data which contains the address of user who has bridged ZKPs along with the specific grant type (ZKP_RELEASE_AND_BRIDGE_PRP_GRANT_TYPE) which then is used to grant PRP rewards to the user.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"FX_ROOT\":{\"details\":\"`FxRoot` is the contract of the \\\"Fx-Portal\\\" on the mainnet/Goerli.\"}},\"title\":\"ToPolygonZkpTokenAndPrpRewardMsgSender\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"PANTHER_REWARD_CONTROLLER()\":{\"notice\":\"address of PrpConverter on Polygon\"},\"PROTOCOL_REWARD_MESSAGE_RELAYER()\":{\"notice\":\"address of protocolMessageRelayer on Polygon\"},\"PRP_CONVERTER()\":{\"notice\":\"address of PrpConverter on Polygon\"},\"lastBridgeExecution()\":{\"notice\":\"Last bridge execution timestamp\"},\"nonce()\":{\"notice\":\"Message nonce (i.e. sequential number of the latest message)\"}},\"notice\":\"Responsible for Bridging $ZKPs and arbitrary messages to the Polygon chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/ToPolygonZkpTokenAndPrpRewardMsgSender.sol\":\"ToPolygonZkpTokenAndPrpRewardMsgSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n// Constants\\n\\nuint256 constant IN_PRP_UTXOs = 1;\\nuint256 constant IN_UTXOs = 2 + IN_PRP_UTXOs;\\n\\nuint256 constant OUT_PRP_UTXOs = 1;\\nuint256 constant OUT_UTXOs = 2 + OUT_PRP_UTXOs;\\nuint256 constant OUT_MAX_UTXOs = OUT_UTXOs;\\n// Number of UTXOs given as a reward for an \\\"advanced\\\" stake\\nuint256 constant OUT_RWRD_UTXOs = 2;\\n\\n// For overflow protection and circuits optimization\\n// (must be less than the FIELD_SIZE)\\nuint256 constant MAX_EXT_AMOUNT = 2 ** 96;\\nuint256 constant MAX_IN_CIRCUIT_AMOUNT = 2 ** 64;\\nuint256 constant MAX_TIMESTAMP = 2 ** 32;\\nuint256 constant MAX_ZASSET_ID = 2 ** 160;\\n\\n// Token types\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant ERC20_TOKEN_TYPE = 0x00;\\nuint8 constant ERC721_TOKEN_TYPE = 0x10;\\nuint8 constant ERC1155_TOKEN_TYPE = 0x11;\\n// defined for every tokenId rather than for all tokens on the contract\\n// (unsupported in the V0 and V1 of the MASP)\\nuint8 constant BY_TOKENID_TOKEN_TYPE = 0xFF;\\n\\n// ZAsset statuses\\n// (not `enum` to let protocol extensions use bits, if needed)\\nuint8 constant zASSET_ENABLED = 0x01;\\nuint8 constant zASSET_DISABLED = 0x02;\\nuint8 constant zASSET_UNKNOWN = 0x00;\\n\\n// UTXO data (opening values - encrypted and public) formats\\nuint8 constant UTXO_DATA_TYPE5 = 0x00; // for zero UTXO (no data to provide)\\nuint8 constant UTXO_DATA_TYPE1 = 0x01; // for UTXO w/ zero tokenId\\nuint8 constant UTXO_DATA_TYPE3 = 0x02; // for UTXO w/ non-zero tokenId\\n\\n// Grant Types\\n// bytes4(keccak256('panther-onboarding-grantor'))\\nbytes4 constant GT_ONBOARDING = 0x93b212ae;\\n// The \\\"prp grant type\\\" for the \\\"release and bridge\\\" ZKPs\\n// bytes4(keccak256(\\\"panther-zkp-release\\\"))\\nbytes4 constant GT_ZKP_RELEASE = 0x53a1eb85;\\n\\n// Number of 32-bit words of the CiphertextMsg for UTXO_DATA_TYPE1\\n// (ephemeral key (packed) - 32 bytes, encrypted `random` - 32 bytes)\\nuint256 constant CIPHERTEXT1_WORDS = 2;\\n\\n// Number of 32-bit words in the (uncompressed) spending PubKey\\nuint256 constant PUBKEY_WORDS = 2;\\n// Number of elements in `pathElements`\\nuint256 constant PATH_ELEMENTS_NUM = 16;\\n\\n// @dev Unusable on public network address, which is useful for simulations\\n//  in forked test env, e.g. for bypassing SNARK proof verification like this:\\n// `require(isValidProof || tx.origin == DEAD_CODE_ADDRESS)`\\naddress constant DEAD_CODE_ADDRESS = address(uint160(0xDEADC0DE));\\n\\n// 100% expressed in 1/100th of 1% (\\\"pips\\\")\\nuint256 constant HUNDRED_PERCENT = 100 * 100;\\n\",\"keccak256\":\"0x92933200610d94877d8f677514087dd630769590141a4df9c48bcc41ecc3bd21\",\"license\":\"BUSL-1.1\"},\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title ImmutableOwnable\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x06d3e09256c510bd1a5c8f6f05cc99fbc0d51919f2a64e022395bc169c349d90\",\"license\":\"MIT\"},\"contracts/common/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title TransferHelper library\\n/// @dev Helper methods for interacting with ERC20, ERC721, ERC1155 tokens and sending ETH\\n/// Based on the Uniswap/solidity-lib/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n    /// @dev Throws if the deployed code of the `token` is empty.\\n    // Low-level CALL to a non-existing contract returns `success` of 1 and empty `data`.\\n    // It may be misinterpreted as a successful call to a deployed token contract.\\n    // So, the code calling a token contract must insure the contract code exists.\\n    modifier onlyDeployedToken(address token) {\\n        uint256 codeSize;\\n        // slither-disable-next-line assembly\\n        assembly {\\n            codeSize := extcodesize(token)\\n        }\\n        require(codeSize > 0, \\\"TransferHelper: zero codesize\\\");\\n        _;\\n    }\\n\\n    /// @dev Approve the `operator` to spend all of ERC720 tokens on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeSetApprovalForAll(\\n        address token,\\n        address operator,\\n        bool approved\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('setApprovalForAll(address,bool)'));\\n            abi.encodeWithSelector(0xa22cb465, operator, approved)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Get the ERC20 balance of `account`\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeBalanceOf(\\n        address token,\\n        address account\\n    ) internal returns (uint256 balance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('balanceOf(address)')));\\n            abi.encodeWithSelector(0x70a08231, account)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: balanceOf call failed\\\"\\n        );\\n\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the ERC20 allowance of `spender`\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeAllowance(\\n        address token,\\n        address owner,\\n        address spender\\n    ) internal onlyDeployedToken(token) returns (uint256 allowance) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n            abi.encodeWithSelector(0xdd62ed3e, owner, spender)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: allowance call failed\\\"\\n        );\\n\\n        allowance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Approve the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('approve(address,uint256)'));\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Increase approval of the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeIncreaseAllowance(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(\\\"increaseAllowance(address,uint256)\\\"));\\n            abi.encodeWithSelector(0x39509351, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transfer(address,uint256)'));\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer an ERC721 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc721SafeTransferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x42842e0e, from, to, tokenId)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `amount` ERC1155 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)'));\\n            abi.encodeWithSelector(0xf242432a, from, to, tokenId, amount, _data)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` Ether from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferETH(address to, uint256 value) internal {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH transfer failed\\\");\\n    }\\n\\n    function _requireSuccess(bool success, bytes memory res) private pure {\\n        require(\\n            success && (res.length == 0 || abi.decode(res, (bool))),\\n            \\\"TransferHelper: token contract call failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x287fdd8c63a2b66ac25947309942af61b4647c88ae2e9cfc38495b0b3d9f0836\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/interfaces/IPolygonRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface IPolygonRootChainManager {\\n    function depositFor(\\n        address receiver,\\n        address token,\\n        bytes calldata depositData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xec2a4e725b23c3bdaad234d65039289513b80e922cfbc4b7fb732f5a6093f9bb\",\"license\":\"MIT\"},\"contracts/protocol/ToPolygonZkpTokenAndPrpRewardMsgSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\nimport \\\"../staking/interfaces/IFxStateSender.sol\\\";\\nimport \\\"../common/interfaces/IPolygonRootChainManager.sol\\\";\\n\\nimport \\\"../common/ImmutableOwnable.sol\\\";\\nimport \\\"../common/TransferHelper.sol\\\";\\n\\nimport \\\"./interfaces/IProtocolRewardController.sol\\\";\\nimport \\\"./actions/PrpRewardBridgedDataCoder.sol\\\";\\nimport { GT_ZKP_RELEASE } from \\\"../common/Constants.sol\\\";\\n\\n/**\\n * @title ToPolygonZkpTokenAndPrpRewardMsgSender\\n * @author Pantherprotocol Contributors\\n * @notice Responsible for Bridging $ZKPs and arbitrary messages to the Polygon chain.\\n * @dev This contract lives on Ethereum chain and asks from PantherRewardController to\\n * release $ZKP rewards and then if there are releasable $ZKPs, it interacts with the ETH<->Polygon bridge to\\n * send them to the Polygon chain via Polygon FXRoot contract. Anyone can try to release and bridge ZKPs.\\n * This contract also bridge the data which contains the address of user who has bridged ZKPs along with\\n * the specific grant type (ZKP_RELEASE_AND_BRIDGE_PRP_GRANT_TYPE) which then is used to grant\\n * PRP rewards to the user.\\n */\\n\\ncontract ToPolygonZkpTokenAndPrpRewardMsgSender is\\n    ImmutableOwnable,\\n    PrpRewardBridgedDataCoder\\n{\\n    // solhint-disable var-name-mixedcase\\n\\n    /// @notice address of PrpConverter on Polygon\\n    address public immutable PRP_CONVERTER;\\n\\n    /// @notice address of protocolMessageRelayer on Polygon\\n    address public immutable PROTOCOL_REWARD_MESSAGE_RELAYER;\\n\\n    /// @notice address of PrpConverter on Polygon\\n    address public immutable PANTHER_REWARD_CONTROLLER;\\n\\n    /// @notice Address of the $ZKP token contract\\n    address private immutable ZKP_TOKEN;\\n\\n    /// @notice address RootChainManagerProxy on Ethereum\\n    address private immutable ROOR_CHAIN_MANAGER_PROXY;\\n\\n    /// @notice erc20PRedicateProxy must be approved for transferring ERC20s\\n    address private immutable ERC20_PREDICATE_PROXY;\\n\\n    /// @notice Address of the `FxRoot` contract on the mainnet/Goerli network\\n    /// @dev `FxRoot` is the contract of the \\\"Fx-Portal\\\" on the mainnet/Goerli.\\n    address private immutable FX_ROOT;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /// @notice Message nonce (i.e. sequential number of the latest message)\\n    uint128 public nonce;\\n\\n    /// @notice Last bridge execution timestamp\\n    uint128 public lastBridgeExecution;\\n\\n    event ZkpTokenSent(uint256 zkpAmount);\\n    event PrpRewardMessageSent(bytes message);\\n\\n    constructor(\\n        address _owner,\\n        address _prpConverter,\\n        address _protocolRewardMessageRelayer,\\n        address _pantherRewardController,\\n        address _zkpToken,\\n        address _rootChainManagerProxy,\\n        address _erc20PredicateProxy,\\n        address _fxRoot\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            _prpConverter != address(0) &&\\n                _protocolRewardMessageRelayer != address(0) &&\\n                _pantherRewardController != address(0) &&\\n                _zkpToken != address(0) &&\\n                _rootChainManagerProxy != address(0) &&\\n                _erc20PredicateProxy != address(0) &&\\n                _fxRoot != address(0),\\n            \\\"PRS:E1\\\"\\n        );\\n\\n        PRP_CONVERTER = _prpConverter;\\n        PROTOCOL_REWARD_MESSAGE_RELAYER = _protocolRewardMessageRelayer;\\n        PANTHER_REWARD_CONTROLLER = _pantherRewardController;\\n        ZKP_TOKEN = _zkpToken;\\n        ROOR_CHAIN_MANAGER_PROXY = _rootChainManagerProxy;\\n        ERC20_PREDICATE_PROXY = _erc20PredicateProxy;\\n        FX_ROOT = _fxRoot;\\n    }\\n\\n    function bridgeZkpTokensAndPrpRewardsMessage(bytes32 secret) external {\\n        // known contract - no reentrancy guard needed\\n        uint256 releasable = IProtocolRewardController(\\n            PANTHER_REWARD_CONTROLLER\\n        ).vestRewards();\\n\\n        if (releasable > 0) {\\n            bridgeZkpTokens(releasable);\\n\\n            bridgePrpRewardMessage(secret);\\n\\n            lastBridgeExecution = uint128(block.timestamp);\\n        }\\n    }\\n\\n    function bridgeZkpTokens(uint256 _amount) private {\\n        TransferHelper.safeApprove(ZKP_TOKEN, ERC20_PREDICATE_PROXY, _amount);\\n\\n        IPolygonRootChainManager(ROOR_CHAIN_MANAGER_PROXY).depositFor(\\n            PRP_CONVERTER,\\n            ZKP_TOKEN,\\n            abi.encode(_amount)\\n        );\\n\\n        emit ZkpTokenSent(_amount);\\n    }\\n\\n    function bridgePrpRewardMessage(bytes32 secret) private {\\n        // Overflow ignored as the nonce is unexpected ever be that big\\n        uint32 _nonce = uint32(nonce + 1);\\n        nonce = uint128(_nonce);\\n\\n        bytes memory content = _encodeBridgedData(\\n            _nonce,\\n            GT_ZKP_RELEASE,\\n            secret\\n        );\\n\\n        IFxStateSender(FX_ROOT).sendMessageToChild(\\n            PROTOCOL_REWARD_MESSAGE_RELAYER,\\n            content\\n        );\\n\\n        emit PrpRewardMessageSent(content);\\n    }\\n}\\n\",\"keccak256\":\"0xf0fb59cc9d7641dbb97356a169c5e9a0de7bb7bd6e63d075533fcee9159d355b\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/actions/PrpRewardBridgedDataCoder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// SPDX-FileCopyrightText: Copyright 2021-25 Panther Protocol Foundation\\npragma solidity ^0.8.16;\\n\\n/***\\n * @title PrpRewardBridgedDataCoder\\n * @dev It encode (pack) and decodes (unpack) messages for bridging them between networks\\n */\\nabstract contract PrpRewardBridgedDataCoder {\\n    function _encodeBridgedData(\\n        uint32 _nonce,\\n        bytes4 prpGrantType,\\n        bytes32 secret\\n    ) internal pure returns (bytes memory content) {\\n        content = abi.encodePacked(_nonce, prpGrantType, secret);\\n    }\\n\\n    // For efficiency we use \\\"packed\\\" (rather than \\\"ABI\\\") encoding.\\n    // It results in shorter data, but requires custom unpack function.\\n    function _decodeBridgedData(\\n        bytes memory content\\n    )\\n        internal\\n        pure\\n        returns (uint256 nonce, bytes4 prpGrantType, bytes32 secret)\\n    {\\n        require(content.length == 40, \\\"PBD: WRONG_LENGTH\\\");\\n\\n        nonce =\\n            (uint256(uint8(content[0])) << 24) |\\n            (uint256(uint8(content[1])) << 16) |\\n            (uint256(uint8(content[2])) << 8) |\\n            (uint256(uint8(content[3])));\\n\\n        prpGrantType = bytes4(\\n            uint32(\\n                (uint256(uint8(content[4])) << 24) |\\n                    (uint256(uint8(content[5])) << 16) |\\n                    (uint256(uint8(content[6])) << 8) |\\n                    uint256(uint8(content[7]))\\n            )\\n        );\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            secret := div(mload(add(add(content, 0x20), 8)), 0x1)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7afc670cbd02f635147137c8a94c8d5f268cb344c2d04be0f0a4a151bae2a35\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IProtocolRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IProtocolRewardController {\\n    function vestRewards() external returns (uint256 releasable);\\n}\\n\",\"keccak256\":\"0x2b666176d5d953f783be37b684152f6f4153da489f560bfcb1168d8f81dc096e\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IFxStateSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/***\\n * @dev An interface of the `FxRoot` contract\\n * `FxRoot` is the contract of the \\\"Fx-Portal\\\" (a PoS bridge run by the Polygon team) on the\\n * mainnet/Goerli network. It passes data to s user-defined contract on the Polygon/Mumbai.\\n * See https://docs.polygon.technology/docs/develop/l1-l2-communication/fx-portal\\n */\\ninterface IFxStateSender {\\n    function sendMessageToChild(\\n        address _receiver,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x81f9bbd2a34f52dbfb1d5358fb6ef2341eebdd374720c5d445008465f3cc3040\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162000b3538038062000b358339810160408190526200003591620001af565b876001600160a01b038116620000925760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b03908116608052871615801590620000b957506001600160a01b03861615155b8015620000ce57506001600160a01b03851615155b8015620000e357506001600160a01b03841615155b8015620000f857506001600160a01b03831615155b80156200010d57506001600160a01b03821615155b80156200012257506001600160a01b03811615155b620001595760405162461bcd60e51b81526020600482015260066024820152655052533a453160d01b604482015260640162000089565b6001600160a01b0396871660a05294861660c05292851660e0529084166101005283166101205282166101405216610160525062000257565b80516001600160a01b0381168114620001aa57600080fd5b919050565b600080600080600080600080610100898b031215620001cd57600080fd5b620001d88962000192565b9750620001e860208a0162000192565b9650620001f860408a0162000192565b95506200020860608a0162000192565b94506200021860808a0162000192565b93506200022860a08a0162000192565b92506200023860c08a0162000192565b91506200024860e08a0162000192565b90509295985092959890939650565b60805160a05160c05160e0516101005161012051610140516101605161085e620002d760003960006104670152600061027a015260006102a101526000818161025901526102f101526000818160cb0152610199015260008181610124015261049401526000818161017301526102d0015260006087015261085e6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634a2b1d191161005b5780634a2b1d191461011f578063568a096a14610146578063affed0e01461015b578063ef92a79f1461016e57600080fd5b8063117803e31461008257806332bcc041146100c6578063496a507d146100ed575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60005461010790600160801b90046001600160801b031681565b6040516001600160801b0390911681526020016100bd565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6101596101543660046106e3565b610195565b005b600054610107906001600160801b031681565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633c43059d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b91906106fc565b905080156102505761022c81610254565b610235826103be565b600080546001600160801b03428116600160801b0291161790555b5050565b61029f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361052c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e3dec8fb7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008460405160200161032391815260200190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161035093929190610765565b600060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b505050507f084a3ecff1644f6f18d2a345e327590c4f30d4bb73b808342d0b0741adf6f9e8816040516103b391815260200190565b60405180910390a150565b600080546103d6906001600160801b0316600161079a565b600080546fffffffffffffffffffffffffffffffff191663ffffffff8316179055604080517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1660208201526353a1eb8560e01b6024820152602880820186905282518083039091018152604882019283905263b472047760e01b909252919250906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b4720477906104be907f0000000000000000000000000000000000000000000000000000000000000000908590604c016107cf565b600060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b505050507f77cfcad0d5e6377a2695f4e9ad251e55bf180b2939cda1cf41c840acdf8cb4ca8160405161051f91906107f9565b60405180910390a1505050565b82803b806105815760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a6500000060448201526064015b60405180910390fd5b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905291516000928392908916916105f29190610813565b6000604051808303816000865af19150503d806000811461062f576040519150601f19603f3d011682016040523d82523d6000602084013e610634565b606091505b5091509150610643828261064c565b50505050505050565b818015610671575080511580610671575080806020019051810190610671919061082f565b6102505760405162461bcd60e51b815260206004820152602a60248201527f5472616e7366657248656c7065723a20746f6b656e20636f6e7472616374206360448201527f616c6c206661696c6564000000000000000000000000000000000000000000006064820152608401610578565b6000602082840312156106f557600080fd5b5035919050565b60006020828403121561070e57600080fd5b5051919050565b60005b83811015610730578181015183820152602001610718565b50506000910152565b60008151808452610751816020860160208601610715565b601f01601f19169290920160200192915050565b60006001600160a01b038086168352808516602084015250606060408301526107916060830184610739565b95945050505050565b6001600160801b038181168382160190808211156107c857634e487b7160e01b600052601160045260246000fd5b5092915050565b6001600160a01b03831681526040602082015260006107f16040830184610739565b949350505050565b60208152600061080c6020830184610739565b9392505050565b60008251610825818460208701610715565b9190910192915050565b60006020828403121561084157600080fd5b8151801515811461080c57600080fdfea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80634a2b1d191161005b5780634a2b1d191461011f578063568a096a14610146578063affed0e01461015b578063ef92a79f1461016e57600080fd5b8063117803e31461008257806332bcc041146100c6578063496a507d146100ed575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60005461010790600160801b90046001600160801b031681565b6040516001600160801b0390911681526020016100bd565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6101596101543660046106e3565b610195565b005b600054610107906001600160801b031681565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633c43059d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b91906106fc565b905080156102505761022c81610254565b610235826103be565b600080546001600160801b03428116600160801b0291161790555b5050565b61029f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361052c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e3dec8fb7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008460405160200161032391815260200190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161035093929190610765565b600060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b505050507f084a3ecff1644f6f18d2a345e327590c4f30d4bb73b808342d0b0741adf6f9e8816040516103b391815260200190565b60405180910390a150565b600080546103d6906001600160801b0316600161079a565b600080546fffffffffffffffffffffffffffffffff191663ffffffff8316179055604080517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1660208201526353a1eb8560e01b6024820152602880820186905282518083039091018152604882019283905263b472047760e01b909252919250906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b4720477906104be907f0000000000000000000000000000000000000000000000000000000000000000908590604c016107cf565b600060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b505050507f77cfcad0d5e6377a2695f4e9ad251e55bf180b2939cda1cf41c840acdf8cb4ca8160405161051f91906107f9565b60405180910390a1505050565b82803b806105815760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a6500000060448201526064015b60405180910390fd5b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905291516000928392908916916105f29190610813565b6000604051808303816000865af19150503d806000811461062f576040519150601f19603f3d011682016040523d82523d6000602084013e610634565b606091505b5091509150610643828261064c565b50505050505050565b818015610671575080511580610671575080806020019051810190610671919061082f565b6102505760405162461bcd60e51b815260206004820152602a60248201527f5472616e7366657248656c7065723a20746f6b656e20636f6e7472616374206360448201527f616c6c206661696c6564000000000000000000000000000000000000000000006064820152608401610578565b6000602082840312156106f557600080fd5b5035919050565b60006020828403121561070e57600080fd5b5051919050565b60005b83811015610730578181015183820152602001610718565b50506000910152565b60008151808452610751816020860160208601610715565b601f01601f19169290920160200192915050565b60006001600160a01b038086168352808516602084015250606060408301526107916060830184610739565b95945050505050565b6001600160801b038181168382160190808211156107c857634e487b7160e01b600052601160045260246000fd5b5092915050565b6001600160a01b03831681526040602082015260006107f16040830184610739565b949350505050565b60208152600061080c6020830184610739565b9392505050565b60008251610825818460208701610715565b9190910192915050565b60006020828403121561084157600080fd5b8151801515811461080c57600080fdfea164736f6c6343000810000a",
  "devdoc": {
    "author": "Pantherprotocol Contributors",
    "details": "This contract lives on Ethereum chain and asks from PantherRewardController to release $ZKP rewards and then if there are releasable $ZKPs, it interacts with the ETH<->Polygon bridge to send them to the Polygon chain via Polygon FXRoot contract. Anyone can try to release and bridge ZKPs. This contract also bridge the data which contains the address of user who has bridged ZKPs along with the specific grant type (ZKP_RELEASE_AND_BRIDGE_PRP_GRANT_TYPE) which then is used to grant PRP rewards to the user.",
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "FX_ROOT": {
        "details": "`FxRoot` is the contract of the \"Fx-Portal\" on the mainnet/Goerli."
      }
    },
    "title": "ToPolygonZkpTokenAndPrpRewardMsgSender",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "PANTHER_REWARD_CONTROLLER()": {
        "notice": "address of PrpConverter on Polygon"
      },
      "PROTOCOL_REWARD_MESSAGE_RELAYER()": {
        "notice": "address of protocolMessageRelayer on Polygon"
      },
      "PRP_CONVERTER()": {
        "notice": "address of PrpConverter on Polygon"
      },
      "lastBridgeExecution()": {
        "notice": "Last bridge execution timestamp"
      },
      "nonce()": {
        "notice": "Message nonce (i.e. sequential number of the latest message)"
      }
    },
    "notice": "Responsible for Bridging $ZKPs and arbitrary messages to the Polygon chain.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12482,
        "contract": "contracts/protocol/ToPolygonZkpTokenAndPrpRewardMsgSender.sol:ToPolygonZkpTokenAndPrpRewardMsgSender",
        "label": "nonce",
        "offset": 0,
        "slot": "0",
        "type": "t_uint128"
      },
      {
        "astId": 12485,
        "contract": "contracts/protocol/ToPolygonZkpTokenAndPrpRewardMsgSender.sol:ToPolygonZkpTokenAndPrpRewardMsgSender",
        "label": "lastBridgeExecution",
        "offset": 16,
        "slot": "0",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}