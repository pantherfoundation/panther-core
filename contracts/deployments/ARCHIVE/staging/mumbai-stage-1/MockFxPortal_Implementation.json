{
  "address": "0xA543d6badE63ff48dEed3ceC066003f295A09790",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pZkpToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "DepositForLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ProcessMessageFromRootLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "SendMessageToChildLog",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PZKP_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZKP_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22691d97719957d3938d709b4d47782da61c48e5d5afa2132f70af83770d9e8d",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0xA543d6badE63ff48dEed3ceC066003f295A09790",
    "transactionIndex": 20,
    "gasUsed": "480267",
    "logsBloom": "0x
    "blockHash": "0xb2fd9583cbad1d7b2a04477a73e7639cc6899fd4b3eb34e4a27aa2a4f60df350",
    "transactionHash": "0x22691d97719957d3938d709b4d47782da61c48e5d5afa2132f70af83770d9e8d",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 37763960,
        "transactionHash": "0x22691d97719957d3938d709b4d47782da61c48e5d5afa2132f70af83770d9e8d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000028f334fe605000000000000000000000000000000000000000000000000001a4d5df74f6510e80000000000000000000000000000000000000000000011fed77c0c79b9a762fa0000000000000000000000000000000000000000000000001a4acec3ff7f0be80000000000000000000000000000000000000000000011fed77e9bad098d67fa",
        "logIndex": 50,
        "blockHash": "0xb2fd9583cbad1d7b2a04477a73e7639cc6899fd4b3eb34e4a27aa2a4f60df350"
      }
    ],
    "blockNumber": 37763960,
    "cumulativeGasUsed": "6386201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0xfD466eF2c700E2f66b2d05D92896b95d541e66e5",
    "0x4004C49aBb96B11D89A52DeCCa2D1522da7f3089"
  ],
  "numDeployments": 1,
  "solcInputHash": "b8eeeddae64fd5c3b79a196914bed59a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pZkpToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"DepositForLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ProcessMessageFromRootLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"SendMessageToChildLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PZKP_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZKP_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendMessageToChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/mocks/MockFxPortal.sol\":\"MockFxPortal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x50d471ce507ca3796ff407b52d0dffead3b4eb6c0f0afea9350f712f9c5f1416\",\"license\":\"MIT\"},\"contracts/common/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title TransferHelper library\\n/// @dev Helper methods for interacting with ERC20, ERC721, ERC1155 tokens and sending ETH\\n/// Based on the Uniswap/solidity-lib/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n    /// @dev Throws if the deployed code of the `token` is empty.\\n    // Low-level CALL to a non-existing contract returns `success` of 1 and empty `data`.\\n    // It may be misinterpreted as a successful call to a deployed token contract.\\n    // So, the code calling a token contract must insure the contract code exists.\\n    modifier onlyDeployedToken(address token) {\\n        uint256 codeSize;\\n        // slither-disable-next-line assembly\\n        assembly {\\n            codeSize := extcodesize(token)\\n        }\\n        require(codeSize > 0, \\\"TransferHelper: zero codesize\\\");\\n        _;\\n    }\\n\\n    /// @dev Approve the `operator` to spend all of ERC720 tokens on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeSetApprovalForAll(\\n        address token,\\n        address operator,\\n        bool approved\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('setApprovalForAll(address,bool)'));\\n            abi.encodeWithSelector(0xa22cb465, operator, approved)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Get the ERC20 balance of `account`\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeBalanceOf(address token, address account)\\n        internal\\n        returns (uint256 balance)\\n    {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256(bytes('balanceOf(address)')));\\n            abi.encodeWithSelector(0x70a08231, account)\\n        );\\n        require(\\n            // since `data` can't be empty, `onlyDeployedToken` unneeded\\n            success && (data.length != 0),\\n            \\\"TransferHelper: balanceOff call failed\\\"\\n        );\\n\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Approve the `spender` to spend the `amount` of ERC20 token on behalf of `owner`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('approve(address,uint256)'));\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transfer(address,uint256)'));\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` ERC20 tokens on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('transferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer an ERC721 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc721SafeTransferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\\n            abi.encodeWithSelector(0x42842e0e, from, to, tokenId)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `amount` ERC1155 token with id of `tokenId` on behalf of `from` to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal onlyDeployedToken(token) {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)'));\\n            abi.encodeWithSelector(0xf242432a, from, to, tokenId, amount, _data)\\n        );\\n        _requireSuccess(success, data);\\n    }\\n\\n    /// @dev Transfer `value` Ether from caller to `to`.\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safeTransferETH(address to, uint256 value) internal {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH transfer failed\\\");\\n    }\\n\\n    function _requireSuccess(bool success, bytes memory res) private pure {\\n        require(\\n            success && (res.length == 0 || abi.decode(res, (bool))),\\n            \\\"TransferHelper: token contract call failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xca5a24eae0771696d9bfc96eb4929faa5ab8d1300d3174968653cd22b6348fe4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/mocks/MockFxPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"../TransferHelper.sol\\\";\\nimport \\\"../ImmutableOwnable.sol\\\";\\n\\nimport \\\"../../staking/interfaces/IFxStateSender.sol\\\";\\nimport \\\"../../staking/interfaces/IFxMessageProcessor.sol\\\";\\n\\ninterface IPZkp {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\\ninterface IRootChainManager {\\n    function depositFor(\\n        address receiver,\\n        address token,\\n        bytes calldata depositData\\n    ) external;\\n}\\n\\ncontract MockFxPortal is ImmutableOwnable, IRootChainManager, IFxStateSender {\\n    using TransferHelper for address;\\n\\n    uint256[50] private __gap;\\n\\n    address public immutable PZKP_TOKEN;\\n    address public immutable ZKP_TOKEN;\\n\\n    event DepositForLog(address receiver, address token, bytes depositData);\\n    event SendMessageToChildLog(address _receiver, bytes _data);\\n    event ProcessMessageFromRootLog(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes data\\n    );\\n\\n    constructor(\\n        address _owner,\\n        address _zkpToken,\\n        address _pZkpToken\\n    ) ImmutableOwnable(_owner) {\\n        require(\\n            _zkpToken != address(0) && _pZkpToken != address(0),\\n            \\\"init: zero address\\\"\\n        );\\n\\n        ZKP_TOKEN = _zkpToken;\\n        PZKP_TOKEN = _pZkpToken;\\n    }\\n\\n    // simulate message bridging\\n    function sendMessageToChild(address receiver, bytes calldata data)\\n        external\\n    {\\n        IFxMessageProcessor(receiver).processMessageFromRoot(\\n            uint256(0), // stateId\\n            msg.sender, // rootMessageSender\\n            data // content\\n        );\\n\\n        emit SendMessageToChildLog(receiver, data);\\n    }\\n\\n    // simulate token bridging\\n    function depositFor(\\n        address receiver,\\n        address token,\\n        bytes calldata depositData\\n    ) external {\\n        require(token == ZKP_TOKEN, \\\"MOCKFX::depositFor: invalid token\\\");\\n\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        require(amount > 0, \\\"MOCKFX::depositFor: zero amount\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        IPZkp(PZKP_TOKEN).deposit(receiver, depositData);\\n\\n        emit DepositForLog(receiver, token, depositData);\\n    }\\n}\\n\",\"keccak256\":\"0xc279b5bcc310a0d2c5389d75cf76c7a97d81147209e71fb6e5ad9a77541f3977\",\"license\":\"GPL-3.0\"},\"contracts/staking/interfaces/IFxMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/***\\n * @dev A receiver on the Polygon (or Mumbai) network of a message sent over the\\n * \\\"Fx-Portal\\\" must implement this interface.\\n * The \\\"Fx-Portal\\\" is the PoS bridge run by the Polygon team.\\n * See https://docs.polygon.technology/docs/develop/l1-l2-communication/fx-portal\\n */\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xef2f4ca5a0d36f4e1d9b13d065c304595398ec685e78f33325dffca63781bb40\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IFxStateSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/***\\n * @dev An interface of the `FxRoot` contract\\n * `FxRoot` is the contract of the \\\"Fx-Portal\\\" (a PoS bridge run by the Polygon team) on the\\n * mainnet/Goerli network. It passes data to s user-defined contract on the Polygon/Mumbai.\\n * See https://docs.polygon.technology/docs/develop/l1-l2-communication/fx-portal\\n */\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data)\\n        external;\\n}\\n\",\"keccak256\":\"0xeec34c433400233fdac828876b0b15931cf4c7e17271f37dde85ae03cc3744ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161094438038061094483398101604081905261002f91610126565b826001600160a01b03811661008b5760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b039081166080528216158015906100b157506001600160a01b03811615155b6100f25760405162461bcd60e51b8152602060048201526012602482015271696e69743a207a65726f206164647265737360701b6044820152606401610082565b6001600160a01b0391821660c0521660a05250610169565b80516001600160a01b038116811461012157600080fd5b919050565b60008060006060848603121561013b57600080fd5b6101448461010a565b92506101526020850161010a565b91506101606040850161010a565b90509250925092565b60805160a05160c0516107a06101a46000396000818160b401526101cc01526000818161010301526102e601526000607101526107a06000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063b472047711610050578063b4720477146100d6578063e3dec8fb146100eb578063f0bb58e5146100fe57600080fd5b8063117803e31461006c578063830caefa146100af575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100e96100e43660046105b9565b610125565b005b6100e96100f936600461060c565b6101ca565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b604051639a7c4b7160e01b81526001600160a01b03841690639a7c4b719061015890600090339087908790600401610696565b600060405180830381600087803b15801561017257600080fd5b505af1158015610186573d6000803e3d6000fd5b505050507fb8a3e8f2c9b8ad291f031f9300e6da16d8ec76737c5c0dbe4b789758e2766f208383836040516101bd939291906106c9565b60405180910390a1505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461025a5760405162461bcd60e51b815260206004820152602160248201527f4d4f434b46583a3a6465706f736974466f723a20696e76616c696420746f6b656044820152603760f91b60648201526084015b60405180910390fd5b6000610268828401846106f5565b9050600081116102ba5760405162461bcd60e51b815260206004820152601f60248201527f4d4f434b46583a3a6465706f736974466f723a207a65726f20616d6f756e74006044820152606401610251565b6102cf6001600160a01b038516333084610395565b60405163cf2c52cb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cf2c52cb9061031f908890879087906004016106c9565b600060405180830381600087803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b505050507fb468779add4cf865ada64b40972742070701c7564c6353c49d4541bfffcea55c85858585604051610386949392919061070e565b60405180910390a15050505050565b83803b806103e55760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a650000006044820152606401610251565b604080516001600160a01b0387811660248301528681166044830152606480830187905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908a169161045e919061073b565b6000604051808303816000865af19150503d806000811461049b576040519150601f19603f3d011682016040523d82523d6000602084013e6104a0565b606091505b50915091506104af82826104b9565b5050505050505050565b8180156104de5750805115806104de5750808060200190518101906104de919061076a565b6105505760405162461bcd60e51b815260206004820152602a60248201527f5472616e7366657248656c7065723a20746f6b656e20636f6e7472616374206360448201527f616c6c206661696c6564000000000000000000000000000000000000000000006064820152608401610251565b5050565b80356001600160a01b038116811461056b57600080fd5b919050565b60008083601f84011261058257600080fd5b50813567ffffffffffffffff81111561059a57600080fd5b6020830191508360208285010111156105b257600080fd5b9250929050565b6000806000604084860312156105ce57600080fd5b6105d784610554565b9250602084013567ffffffffffffffff8111156105f357600080fd5b6105ff86828701610570565b9497909650939450505050565b6000806000806060858703121561062257600080fd5b61062b85610554565b935061063960208601610554565b9250604085013567ffffffffffffffff81111561065557600080fd5b61066187828801610570565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481526001600160a01b03841660208201526060604082015260006106bf60608301848661066d565b9695505050505050565b6001600160a01b03841681526040602082015260006106ec60408301848661066d565b95945050505050565b60006020828403121561070757600080fd5b5035919050565b60006001600160a01b038087168352808616602084015250606060408301526106bf60608301848661066d565b6000825160005b8181101561075c5760208186018101518583015201610742565b506000920191825250919050565b60006020828403121561077c57600080fd5b8151801515811461078c57600080fd5b939250505056fea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063b472047711610050578063b4720477146100d6578063e3dec8fb146100eb578063f0bb58e5146100fe57600080fd5b8063117803e31461006c578063830caefa146100af575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100e96100e43660046105b9565b610125565b005b6100e96100f936600461060c565b6101ca565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b604051639a7c4b7160e01b81526001600160a01b03841690639a7c4b719061015890600090339087908790600401610696565b600060405180830381600087803b15801561017257600080fd5b505af1158015610186573d6000803e3d6000fd5b505050507fb8a3e8f2c9b8ad291f031f9300e6da16d8ec76737c5c0dbe4b789758e2766f208383836040516101bd939291906106c9565b60405180910390a1505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461025a5760405162461bcd60e51b815260206004820152602160248201527f4d4f434b46583a3a6465706f736974466f723a20696e76616c696420746f6b656044820152603760f91b60648201526084015b60405180910390fd5b6000610268828401846106f5565b9050600081116102ba5760405162461bcd60e51b815260206004820152601f60248201527f4d4f434b46583a3a6465706f736974466f723a207a65726f20616d6f756e74006044820152606401610251565b6102cf6001600160a01b038516333084610395565b60405163cf2c52cb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cf2c52cb9061031f908890879087906004016106c9565b600060405180830381600087803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b505050507fb468779add4cf865ada64b40972742070701c7564c6353c49d4541bfffcea55c85858585604051610386949392919061070e565b60405180910390a15050505050565b83803b806103e55760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657248656c7065723a207a65726f20636f646573697a650000006044820152606401610251565b604080516001600160a01b0387811660248301528681166044830152606480830187905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908a169161045e919061073b565b6000604051808303816000865af19150503d806000811461049b576040519150601f19603f3d011682016040523d82523d6000602084013e6104a0565b606091505b50915091506104af82826104b9565b5050505050505050565b8180156104de5750805115806104de5750808060200190518101906104de919061076a565b6105505760405162461bcd60e51b815260206004820152602a60248201527f5472616e7366657248656c7065723a20746f6b656e20636f6e7472616374206360448201527f616c6c206661696c6564000000000000000000000000000000000000000000006064820152608401610251565b5050565b80356001600160a01b038116811461056b57600080fd5b919050565b60008083601f84011261058257600080fd5b50813567ffffffffffffffff81111561059a57600080fd5b6020830191508360208285010111156105b257600080fd5b9250929050565b6000806000604084860312156105ce57600080fd5b6105d784610554565b9250602084013567ffffffffffffffff8111156105f357600080fd5b6105ff86828701610570565b9497909650939450505050565b6000806000806060858703121561062257600080fd5b61062b85610554565b935061063960208601610554565b9250604085013567ffffffffffffffff81111561065557600080fd5b61066187828801610570565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481526001600160a01b03841660208201526060604082015260006106bf60608301848661066d565b9695505050505050565b6001600160a01b03841681526040602082015260006106ec60408301848661066d565b95945050505050565b60006020828403121561070757600080fd5b5035919050565b60006001600160a01b038087168352808616602084015250606060408301526106bf60608301848661066d565b6000825160005b8181101561075c5760208186018101518583015201610742565b506000920191825250919050565b60006020828403121561077c57600080fd5b8151801515811461078c57600080fd5b939250505056fea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2252,
        "contract": "contracts/common/mocks/MockFxPortal.sol:MockFxPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}