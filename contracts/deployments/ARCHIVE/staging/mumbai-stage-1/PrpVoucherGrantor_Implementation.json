{
  "address": "0x52C9C5A1bd67e437fC3b4ed47066F6A17773D491",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prpAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardVoucherGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "allowedContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "voucherType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "limit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "amount",
          "type": "uint64"
        }
      ],
      "name": "VoucherTermsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_CONTRACT",
      "outputs": [
        {
          "internalType": "contract PoolContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_amount",
          "type": "uint64"
        },
        {
          "internalType": "bytes4",
          "name": "_voucherType",
          "type": "bytes4"
        }
      ],
      "name": "generateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedContract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_voucherType",
          "type": "bytes4"
        },
        {
          "internalType": "uint64",
          "name": "_limit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_amount",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "updateVoucherTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "voucherTerms",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "rewardsGranted",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "limit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "amount",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "uint56",
          "name": "_reserved",
          "type": "uint56"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67bdb581cee2be69a5794ae275d1ee34c1da4fc5e4efd6c97f8ed3dea4c02a93",
  "receipt": {
    "to": null,
    "from": "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "contractAddress": "0x52C9C5A1bd67e437fC3b4ed47066F6A17773D491",
    "transactionIndex": 4,
    "gasUsed": "695063",
    "logsBloom": "0x
    "blockHash": "0xe5c0e3f440d3a09fd84b764093e5b571068cdf2dd53bc6339d35c08ff1b0ed3f",
    "transactionHash": "0x67bdb581cee2be69a5794ae275d1ee34c1da4fc5e4efd6c97f8ed3dea4c02a93",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 39410508,
        "transactionHash": "0x67bdb581cee2be69a5794ae275d1ee34c1da4fc5e4efd6c97f8ed3dea4c02a93",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fb474a7fecdafbd412ebf0d60a0c32794f82d3dd",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000060cc85029f6f90000000000000000000000000000000000000000000000001830bf5145bdd94e000000000000000000000000000000000000000000000067d1bf02235e5e657a000000000000000000000000000000000000000000000000182ab288f593e255000000000000000000000000000000000000000000000067d1c50eebae885c73",
        "logIndex": 30,
        "blockHash": "0xe5c0e3f440d3a09fd84b764093e5b571068cdf2dd53bc6339d35c08ff1b0ed3f"
      }
    ],
    "blockNumber": 39410508,
    "cumulativeGasUsed": "1444005",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfB474a7FeCDaFBD412ebF0d60A0C32794F82d3dD",
    "0xfDfD920F2152565E9D7b589e4e9faeE6699AD4bd"
  ],
  "numDeployments": 2,
  "solcInputHash": "07f9844c51eb8ce8c38e1cae3052ea10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prpAmount\",\"type\":\"uint256\"}],\"name\":\"RewardVoucherGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"voucherType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"VoucherTermsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_CONTRACT\",\"outputs\":[{\"internalType\":\"contract PoolContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"_voucherType\",\"type\":\"bytes4\"}],\"name\":\"generateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_voucherType\",\"type\":\"bytes4\"},{\"internalType\":\"uint64\",\"name\":\"_limit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateVoucherTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"voucherTerms\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"rewardsGranted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint56\",\"name\":\"_reserved\",\"type\":\"uint56\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RewardClaimed(bytes32)\":{\"details\":\"Emitted when a reward voucher is successfully claimed.\",\"params\":{\"secretHash\":\"The secret hash for the claimed reward voucher.\"}},\"RewardVoucherGenerated(bytes32,uint256)\":{\"details\":\"Emitted when a new reward voucher is generated.\",\"params\":{\"secretHash\":\"The secret hash for the reward voucher.\"}},\"VoucherTermsUpdated(address,bytes4,uint64,uint64)\":{\"details\":\"Emitted when the voucher terms are updated.\",\"params\":{\"allowedContract\":\"The address of the contract allowed to generate reward vouchers.\",\"amount\":\"The amount of the reward voucher.\",\"limit\":\"The limit of the reward voucher.\",\"voucherType\":\"The type of the reward voucher.\"}}},\"kind\":\"dev\",\"methods\":{\"claimRewards(bytes32,bytes)\":{\"params\":{\"proof\":\"A proof associated with the zAccount and a secret.\",\"secretHash\":\"The secret hash for the reward voucher.\"}},\"constructor\":{\"params\":{\"_owner\":\"The owner of the PrpVoucherGrantor contract.\",\"_poolContract\":\"The address of the pool contract.\"}},\"generateRewards(bytes32,uint64,bytes4)\":{\"params\":{\"_amount\":\"The amount of the reward voucher.\",\"_secretHash\":\"The secret hash for the reward voucher.\",\"_voucherType\":\"The type of the reward voucher.\"},\"returns\":{\"_0\":\"The prp amount which has be granted.\"}},\"updateVoucherTerms(address,bytes4,uint64,uint64,bool)\":{\"params\":{\"_allowedContract\":\"The address of the contract allowed to generate reward vouchers.\",\"_amount\":\"The amount of PRP to grant for the voucher.\",\"_enabled\":\"The status of the voucher type.\",\"_limit\":\"The limit for the voucher grants.\",\"_voucherType\":\"The type of the reward voucher.\"}}},\"title\":\"PrpVoucherGrantor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"claimRewards(bytes32,bytes)\":{\"notice\":\"Claims a rewards collected for the given secret hash.\"},\"constructor\":{\"notice\":\"Constructor that sets the initial owner, pool contract and verifier contract.\"},\"generateRewards(bytes32,uint64,bytes4)\":{\"notice\":\"Generates a reward voucher for a given secret hash and voucher type.\"},\"updateVoucherTerms(address,bytes4,uint64,uint64,bool)\":{\"notice\":\"Sets the terms for action rewards for a given voucher type.\"}},\"notice\":\"The PRPGrantor smart contract is designed to facilitate rewarding users with Panther Protocol rewards (nominated in PRPs) other than rewards generated by/within MASP transactions. Reward claims to be generated and utilised by users. The contract maintains a mapping of claimable PRP balances  associated with individual secrets. It accumulates generated claims associated with the same secret. A claim \\u201cutilisation\\u201d results in increasing the PRP balance inside the zAccount of a user by the amount of the claim. To utilise a claim (it\\u2019s entire balance) associated with a secret, a user must provide proof of zAccount ownership and knowledge of the secret. The contract owner has the authority to update the terms, and the smart contract is upgradable to extend the action list as needed upon DAO voting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/PrpVoucherGrantor.sol\":\"PrpVoucherGrantor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x50d471ce507ca3796ff407b52d0dffead3b4eb6c0f0afea9350f712f9c5f1416\",\"license\":\"MIT\"},\"contracts/common/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\nabstract contract Utils {\\n    // false positive\\n    // slither-disable-next-line timestamp\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    // disabled since false positive\\n    // slither-disable-next-line dead-code\\n    function revertZeroAddress(address account) internal pure {\\n        require(account != address(0), \\\"UNEXPECTED_ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x09fa28f59621b7f53937df57eaf0f348010dc330e049da6036a4505235122006\",\"license\":\"MIT\"},\"contracts/protocol/PrpVoucherGrantor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"../common/ImmutableOwnable.sol\\\";\\nimport \\\"../common/Utils.sol\\\";\\n\\n// TODO: Remove this interface once the pool contract is updated.\\ninterface PoolContract {\\n    function increasePRPBalance(uint256 amount, bytes calldata proof) external;\\n}\\n\\n/// @title PrpVoucherGrantor\\n/// @notice The PRPGrantor smart contract is designed to facilitate rewarding\\n/// users with Panther Protocol rewards (nominated in PRPs) other than rewards\\n/// generated by/within MASP transactions. Reward claims to be generated and\\n/// utilised by users. The contract maintains a mapping of claimable PRP\\n/// balances  associated with individual secrets. It accumulates generated\\n/// claims associated with the same secret. A claim \\u201cutilisation\\u201d results in\\n/// increasing the PRP balance inside the zAccount of a user by the amount\\n/// of the claim. To utilise a claim (it\\u2019s entire balance) associated with a\\n/// secret, a user must provide proof of zAccount ownership and knowledge of\\n/// the secret. The contract owner has the authority to update the terms, and\\n/// the smart contract is upgradable to extend the action list as needed upon\\n/// DAO voting.\\ncontract PrpVoucherGrantor is ImmutableOwnable, Utils {\\n    // The contract is supposed to run behind a proxy DELEGATECALLing it.\\n    // On upgrades, adjust `__gap` to match changes of the storage layout.\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n\\n    // solhint-disable-next-line\\n    PoolContract public immutable POOL_CONTRACT;\\n    // solhint-disable-next-line\\n    uint64 private ZERO_VALUE = 1;\\n\\n    mapping(bytes32 => uint256) public balance;\\n    mapping(address => mapping(bytes4 => VoucherTerms)) public voucherTerms;\\n\\n    /// @dev Struct for storing voucher terms.\\n\\n    /// @param rewardsGranted The total amount (accumulator) of rewards granted\\n    /// for this voucher\\n    /// @param limit The rewards limit of the reward voucher. rewardsGranted <=\\n    //limit\\n    /// @param amount The amount of the reward that voucher generates.\\n    /// @param enabled The status of the voucher terms.\\n    struct VoucherTerms {\\n        uint64 rewardsGranted;\\n        uint64 limit;\\n        uint64 amount;\\n        bool enabled;\\n        // rest of the storage slot (uint120) are available for upgrades\\n        uint56 _reserved;\\n    }\\n\\n    /// @dev Emitted when a new reward voucher is generated.\\n    /// @param secretHash The secret hash for the reward voucher.\\n    event RewardVoucherGenerated(bytes32 indexed secretHash, uint256 prpAmount);\\n\\n    /// @dev Emitted when a reward voucher is successfully claimed.\\n    /// @param secretHash The secret hash for the claimed reward voucher.\\n    event RewardClaimed(bytes32 indexed secretHash);\\n\\n    /// @dev Emitted when the voucher terms are updated.\\n    /// @param allowedContract The address of the contract allowed to generate\\n    /// reward vouchers.\\n    /// @param voucherType The type of the reward voucher.\\n    /// @param limit The limit of the reward voucher.\\n    /// @param amount The amount of the reward voucher.\\n    event VoucherTermsUpdated(\\n        address allowedContract,\\n        bytes4 voucherType,\\n        uint64 limit,\\n        uint64 amount\\n    );\\n\\n    /// @notice Constructor that sets the initial owner, pool contract and\\n    /// verifier contract.\\n    /// @param _owner The owner of the PrpVoucherGrantor contract.\\n    /// @param _poolContract The address of the pool contract.\\n    constructor(address _owner, address _poolContract)\\n        ImmutableOwnable(_owner)\\n    {\\n        revertZeroAddress(_poolContract);\\n        POOL_CONTRACT = PoolContract(_poolContract);\\n    }\\n\\n    modifier onlyValidVoucherTypes(bytes4 _voucherType) {\\n        require(\\n            voucherTerms[msg.sender][_voucherType].enabled,\\n            \\\"PrpVoucherGrantor: Inactive or invalid voucher type\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Generates a reward voucher for a given secret hash and voucher\\n    /// type.\\n    /// @param _secretHash The secret hash for the reward voucher.\\n    /// @param _amount The amount of the reward voucher.\\n    /// @param _voucherType The type of the reward voucher.\\n    /// @return The prp amount which has be granted.\\n    function generateRewards(\\n        bytes32 _secretHash,\\n        uint64 _amount,\\n        bytes4 _voucherType\\n    ) external onlyValidVoucherTypes(_voucherType) returns (uint256) {\\n        VoucherTerms memory voucherTerm = voucherTerms[msg.sender][\\n            _voucherType\\n        ];\\n\\n        // If amount in the voucher is not set, then the amount is specified\\n        // by the calling smart contract, otherwise it is specified by the\\n        uint64 prpToGrant = _amount > 0 ? _amount : voucherTerm.amount;\\n\\n        if (voucherTerm.rewardsGranted + prpToGrant > voucherTerm.limit)\\n            return 0;\\n\\n        // we are setting the balance to non-zero to save gas\\n        if (balance[_secretHash] > ZERO_VALUE) {\\n            balance[_secretHash] += prpToGrant;\\n        } else {\\n            balance[_secretHash] = ZERO_VALUE + prpToGrant;\\n        }\\n\\n        voucherTerms[msg.sender][_voucherType].rewardsGranted += prpToGrant;\\n\\n        emit RewardVoucherGenerated(_secretHash, prpToGrant);\\n\\n        return prpToGrant;\\n    }\\n\\n    /// @notice Claims a rewards collected for the given secret hash.\\n    /// @param secretHash The secret hash for the reward voucher.\\n    /// @param proof A proof associated with the zAccount and a secret.\\n    function claimRewards(\\n        bytes32 secretHash,\\n        // solhint-disable-next-line\\n        bytes calldata proof\\n    ) external {\\n        uint256 rewardAmount = balance[secretHash];\\n        require(\\n            rewardAmount > ZERO_VALUE,\\n            \\\"PrpVoucherGrantor: No reward to claim\\\"\\n        );\\n\\n        // we are setting the balance to non-zero to save gas for the next\\n        // rearward generation\\n        balance[secretHash] = ZERO_VALUE;\\n\\n        // TODO: implement the rest of the logic in the Pool contract\\n        // POOL_CONTRACT.increasePRPBalance(\\n        //     rewardAmount,\\n        //     secretHash,\\n        //     _secretAndzAccountProof\\n        //     // zAccountTree root\\n        //     // commitmentHash\\n        //     // newZAccountUTXOCommitment\\n        //     // and a couple of other things\\n        // );\\n        emit RewardClaimed(secretHash);\\n    }\\n\\n    /// @notice Sets the terms for action rewards for a given voucher type.\\n    /// @param _allowedContract The address of the contract allowed to generate\\n    /// reward vouchers.\\n    /// @param _voucherType The type of the reward voucher.\\n    /// @param _limit The limit for the voucher grants.\\n    /// @param _amount The amount of PRP to grant for the voucher.\\n    /// @param _enabled The status of the voucher type.\\n    function updateVoucherTerms(\\n        address _allowedContract,\\n        bytes4 _voucherType,\\n        uint64 _limit,\\n        uint64 _amount,\\n        bool _enabled\\n    ) external onlyOwner {\\n        revertZeroAddress(_allowedContract);\\n        uint64 rewardsGenerated = voucherTerms[_allowedContract][_voucherType]\\n            .rewardsGranted;\\n\\n        require(\\n            _limit + _amount >= rewardsGenerated,\\n            \\\"PrpVoucherGrantor: Limit cannot be less than rewards generated\\\"\\n        );\\n\\n        voucherTerms[_allowedContract][_voucherType] = VoucherTerms(\\n            rewardsGenerated,\\n            _limit,\\n            _amount,\\n            _enabled,\\n            uint56(0) // reserved\\n        );\\n        emit VoucherTermsUpdated(\\n            _allowedContract,\\n            _voucherType,\\n            _limit,\\n            _amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdfd0d3b2b2323229b1f5be2a3356991fe3e53fab109b17619ce2109a2896363c\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c0604052603280546001600160401b031916600117905534801561002357600080fd5b50604051610cb6380380610cb68339810160408190526100429161013a565b816001600160a01b03811661009e5760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b03166080526100b3816100c5565b6001600160a01b031660a0525061016d565b6001600160a01b03811661011b5760405162461bcd60e51b815260206004820152601760248201527f554e45585045435445445f5a45524f5f414444524553530000000000000000006044820152606401610095565b50565b80516001600160a01b038116811461013557600080fd5b919050565b6000806040838503121561014d57600080fd5b6101568361011e565b91506101646020840161011e565b90509250929050565b60805160a051610b1f610197600039600060e0015260008181608701526105b40152610b1f6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806389eba4211161005b57806389eba421146101025780638abfdf8714610130578063bd37399414610143578063e85c3cb0146101f257600080fd5b8063117803e3146100825780632e00f869146100c65780633836564b146100db575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d43660046108fd565b610205565b005b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b610122610110366004610979565b60336020526000908152604090205481565b6040519081526020016100bd565b61012261013e3660046109c7565b6102e8565b6101ae610151366004610a1a565b603460209081526000928352604080842090915290825290205467ffffffffffffffff80821691680100000000000000008104821691600160801b82041690600160c01b810460ff1690600160c81b900466ffffffffffffff1685565b6040805167ffffffffffffffff9687168152948616602086015292909416918301919091521515606082015266ffffffffffffff909116608082015260a0016100bd565b6100d9610200366004610a4d565b6105b2565b60008381526033602052604090205460325467ffffffffffffffff16811161029a5760405162461bcd60e51b815260206004820152602560248201527f507270566f75636865724772616e746f723a204e6f2072657761726420746f2060448201527f636c61696d00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60325460008581526033602052604080822067ffffffffffffffff909316909255905185917f1d0eb023ad533d7ca88117e904d40b4d1d92a113aedffb0ae7cecbeae9987e0b91a250505050565b3360009081526034602090815260408083206001600160e01b0319851684529091528120548290600160c01b900460ff1661038b5760405162461bcd60e51b815260206004820152603360248201527f507270566f75636865724772616e746f723a20496e616374697665206f72206960448201527f6e76616c696420766f75636865722074797065000000000000000000000000006064820152608401610291565b3360009081526034602090815260408083206001600160e01b0319871684528252808320815160a081018352905467ffffffffffffffff8082168352680100000000000000008204811694830194909452600160801b8104841692820192909252600160c01b820460ff1615156060820152600160c81b90910466ffffffffffffff16608082015291908616610425578160400151610427565b855b9050816020015167ffffffffffffffff168183600001516104489190610ad1565b67ffffffffffffffff161115610463576000935050506105aa565b60325460008881526033602052604090205467ffffffffffffffff90911610156104ba576000878152603360205260408120805467ffffffffffffffff841692906104af908490610af9565b909155506104f09050565b6032546104d290829067ffffffffffffffff16610ad1565b600088815260336020526040902067ffffffffffffffff9190911690555b3360009081526034602090815260408083206001600160e01b0319891684529091528120805483929061052e90849067ffffffffffffffff16610ad1565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550867f333ec773258dd165a05b0a80e10fe36df819de075d42d667ba12533380368a3f82604051610594919067ffffffffffffffff91909116815260200190565b60405180910390a267ffffffffffffffff169250505b509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461062a5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a65640000000000000000000000006044820152606401610291565b610633856108a4565b6001600160a01b03851660009081526034602090815260408083206001600160e01b03198816845290915290205467ffffffffffffffff16806106768486610ad1565b67ffffffffffffffff1610156106f45760405162461bcd60e51b815260206004820152603e60248201527f507270566f75636865724772616e746f723a204c696d69742063616e6e6f742060448201527f6265206c657373207468616e20726577617264732067656e65726174656400006064820152608401610291565b6040805160a08101825267ffffffffffffffff80841682528681166020808401918252878316848601908152871515606086019081526000608087018181526001600160a01b038f168252603485528882206001600160e01b03198f16835290945287902095518654945192519151935166ffffffffffffff16600160c81b0278ffffffffffffffffffffffffffffffffffffffffffffffffff941515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff938816600160801b02939093167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff94881668010000000000000000026fffffffffffffffffffffffffffffffff1990971692909716919091179490941791909116939093179290921791909116179055517f8dd4edec761e0d339fcdff8e7cbbb774e5ebe9b848ce7ca0a55fc239bdc0806f906108949088908890889088906001600160a01b039490941684526001600160e01b031992909216602084015267ffffffffffffffff908116604084015216606082015260800190565b60405180910390a1505050505050565b6001600160a01b0381166108fa5760405162461bcd60e51b815260206004820152601760248201527f554e45585045435445445f5a45524f5f414444524553530000000000000000006044820152606401610291565b50565b60008060006040848603121561091257600080fd5b83359250602084013567ffffffffffffffff8082111561093157600080fd5b818601915086601f83011261094557600080fd5b81358181111561095457600080fd5b87602082850101111561096657600080fd5b6020830194508093505050509250925092565b60006020828403121561098b57600080fd5b5035919050565b803567ffffffffffffffff811681146109aa57600080fd5b919050565b80356001600160e01b0319811681146109aa57600080fd5b6000806000606084860312156109dc57600080fd5b833592506109ec60208501610992565b91506109fa604085016109af565b90509250925092565b80356001600160a01b03811681146109aa57600080fd5b60008060408385031215610a2d57600080fd5b610a3683610a03565b9150610a44602084016109af565b90509250929050565b600080600080600060a08688031215610a6557600080fd5b610a6e86610a03565b9450610a7c602087016109af565b9350610a8a60408701610992565b9250610a9860608701610992565b915060808601358015158114610aad57600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff818116838216019080821115610af257610af2610abb565b5092915050565b80820180821115610b0c57610b0c610abb565b9291505056fea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806389eba4211161005b57806389eba421146101025780638abfdf8714610130578063bd37399414610143578063e85c3cb0146101f257600080fd5b8063117803e3146100825780632e00f869146100c65780633836564b146100db575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d43660046108fd565b610205565b005b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b610122610110366004610979565b60336020526000908152604090205481565b6040519081526020016100bd565b61012261013e3660046109c7565b6102e8565b6101ae610151366004610a1a565b603460209081526000928352604080842090915290825290205467ffffffffffffffff80821691680100000000000000008104821691600160801b82041690600160c01b810460ff1690600160c81b900466ffffffffffffff1685565b6040805167ffffffffffffffff9687168152948616602086015292909416918301919091521515606082015266ffffffffffffff909116608082015260a0016100bd565b6100d9610200366004610a4d565b6105b2565b60008381526033602052604090205460325467ffffffffffffffff16811161029a5760405162461bcd60e51b815260206004820152602560248201527f507270566f75636865724772616e746f723a204e6f2072657761726420746f2060448201527f636c61696d00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60325460008581526033602052604080822067ffffffffffffffff909316909255905185917f1d0eb023ad533d7ca88117e904d40b4d1d92a113aedffb0ae7cecbeae9987e0b91a250505050565b3360009081526034602090815260408083206001600160e01b0319851684529091528120548290600160c01b900460ff1661038b5760405162461bcd60e51b815260206004820152603360248201527f507270566f75636865724772616e746f723a20496e616374697665206f72206960448201527f6e76616c696420766f75636865722074797065000000000000000000000000006064820152608401610291565b3360009081526034602090815260408083206001600160e01b0319871684528252808320815160a081018352905467ffffffffffffffff8082168352680100000000000000008204811694830194909452600160801b8104841692820192909252600160c01b820460ff1615156060820152600160c81b90910466ffffffffffffff16608082015291908616610425578160400151610427565b855b9050816020015167ffffffffffffffff168183600001516104489190610ad1565b67ffffffffffffffff161115610463576000935050506105aa565b60325460008881526033602052604090205467ffffffffffffffff90911610156104ba576000878152603360205260408120805467ffffffffffffffff841692906104af908490610af9565b909155506104f09050565b6032546104d290829067ffffffffffffffff16610ad1565b600088815260336020526040902067ffffffffffffffff9190911690555b3360009081526034602090815260408083206001600160e01b0319891684529091528120805483929061052e90849067ffffffffffffffff16610ad1565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550867f333ec773258dd165a05b0a80e10fe36df819de075d42d667ba12533380368a3f82604051610594919067ffffffffffffffff91909116815260200190565b60405180910390a267ffffffffffffffff169250505b509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461062a5760405162461bcd60e51b815260206004820152601460248201527f496d6d4f776e3a20756e617574686f72697a65640000000000000000000000006044820152606401610291565b610633856108a4565b6001600160a01b03851660009081526034602090815260408083206001600160e01b03198816845290915290205467ffffffffffffffff16806106768486610ad1565b67ffffffffffffffff1610156106f45760405162461bcd60e51b815260206004820152603e60248201527f507270566f75636865724772616e746f723a204c696d69742063616e6e6f742060448201527f6265206c657373207468616e20726577617264732067656e65726174656400006064820152608401610291565b6040805160a08101825267ffffffffffffffff80841682528681166020808401918252878316848601908152871515606086019081526000608087018181526001600160a01b038f168252603485528882206001600160e01b03198f16835290945287902095518654945192519151935166ffffffffffffff16600160c81b0278ffffffffffffffffffffffffffffffffffffffffffffffffff941515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff938816600160801b02939093167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff94881668010000000000000000026fffffffffffffffffffffffffffffffff1990971692909716919091179490941791909116939093179290921791909116179055517f8dd4edec761e0d339fcdff8e7cbbb774e5ebe9b848ce7ca0a55fc239bdc0806f906108949088908890889088906001600160a01b039490941684526001600160e01b031992909216602084015267ffffffffffffffff908116604084015216606082015260800190565b60405180910390a1505050505050565b6001600160a01b0381166108fa5760405162461bcd60e51b815260206004820152601760248201527f554e45585045435445445f5a45524f5f414444524553530000000000000000006044820152606401610291565b50565b60008060006040848603121561091257600080fd5b83359250602084013567ffffffffffffffff8082111561093157600080fd5b818601915086601f83011261094557600080fd5b81358181111561095457600080fd5b87602082850101111561096657600080fd5b6020830194508093505050509250925092565b60006020828403121561098b57600080fd5b5035919050565b803567ffffffffffffffff811681146109aa57600080fd5b919050565b80356001600160e01b0319811681146109aa57600080fd5b6000806000606084860312156109dc57600080fd5b833592506109ec60208501610992565b91506109fa604085016109af565b90509250925092565b80356001600160a01b03811681146109aa57600080fd5b60008060408385031215610a2d57600080fd5b610a3683610a03565b9150610a44602084016109af565b90509250929050565b600080600080600060a08688031215610a6557600080fd5b610a6e86610a03565b9450610a7c602087016109af565b9350610a8a60408701610992565b9250610a9860608701610992565b915060808601358015158114610aad57600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff818116838216019080821115610af257610af2610abb565b5092915050565b80820180821115610b0c57610b0c610abb565b9291505056fea164736f6c6343000810000a",
  "devdoc": {
    "events": {
      "RewardClaimed(bytes32)": {
        "details": "Emitted when a reward voucher is successfully claimed.",
        "params": {
          "secretHash": "The secret hash for the claimed reward voucher."
        }
      },
      "RewardVoucherGenerated(bytes32,uint256)": {
        "details": "Emitted when a new reward voucher is generated.",
        "params": {
          "secretHash": "The secret hash for the reward voucher."
        }
      },
      "VoucherTermsUpdated(address,bytes4,uint64,uint64)": {
        "details": "Emitted when the voucher terms are updated.",
        "params": {
          "allowedContract": "The address of the contract allowed to generate reward vouchers.",
          "amount": "The amount of the reward voucher.",
          "limit": "The limit of the reward voucher.",
          "voucherType": "The type of the reward voucher."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimRewards(bytes32,bytes)": {
        "params": {
          "proof": "A proof associated with the zAccount and a secret.",
          "secretHash": "The secret hash for the reward voucher."
        }
      },
      "constructor": {
        "params": {
          "_owner": "The owner of the PrpVoucherGrantor contract.",
          "_poolContract": "The address of the pool contract."
        }
      },
      "generateRewards(bytes32,uint64,bytes4)": {
        "params": {
          "_amount": "The amount of the reward voucher.",
          "_secretHash": "The secret hash for the reward voucher.",
          "_voucherType": "The type of the reward voucher."
        },
        "returns": {
          "_0": "The prp amount which has be granted."
        }
      },
      "updateVoucherTerms(address,bytes4,uint64,uint64,bool)": {
        "params": {
          "_allowedContract": "The address of the contract allowed to generate reward vouchers.",
          "_amount": "The amount of PRP to grant for the voucher.",
          "_enabled": "The status of the voucher type.",
          "_limit": "The limit for the voucher grants.",
          "_voucherType": "The type of the reward voucher."
        }
      }
    },
    "title": "PrpVoucherGrantor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "claimRewards(bytes32,bytes)": {
        "notice": "Claims a rewards collected for the given secret hash."
      },
      "constructor": {
        "notice": "Constructor that sets the initial owner, pool contract and verifier contract."
      },
      "generateRewards(bytes32,uint64,bytes4)": {
        "notice": "Generates a reward voucher for a given secret hash and voucher type."
      },
      "updateVoucherTerms(address,bytes4,uint64,uint64,bool)": {
        "notice": "Sets the terms for action rewards for a given voucher type."
      }
    },
    "notice": "The PRPGrantor smart contract is designed to facilitate rewarding users with Panther Protocol rewards (nominated in PRPs) other than rewards generated by/within MASP transactions. Reward claims to be generated and utilised by users. The contract maintains a mapping of claimable PRP balances  associated with individual secrets. It accumulates generated claims associated with the same secret. A claim “utilisation” results in increasing the PRP balance inside the zAccount of a user by the amount of the claim. To utilise a claim (it’s entire balance) associated with a secret, a user must provide proof of zAccount ownership and knowledge of the secret. The contract owner has the authority to update the terms, and the smart contract is upgradable to extend the action list as needed upon DAO voting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 209,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 215,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "ZERO_VALUE",
        "offset": 0,
        "slot": "50",
        "type": "t_uint64"
      },
      {
        "astId": 219,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "balance",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 226,
        "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
        "label": "voucherTerms",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_struct(VoucherTerms)237_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_struct(VoucherTerms)237_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => struct PrpVoucherGrantor.VoucherTerms))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_struct(VoucherTerms)237_storage)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_struct(VoucherTerms)237_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct PrpVoucherGrantor.VoucherTerms)",
        "numberOfBytes": "32",
        "value": "t_struct(VoucherTerms)237_storage"
      },
      "t_struct(VoucherTerms)237_storage": {
        "encoding": "inplace",
        "label": "struct PrpVoucherGrantor.VoucherTerms",
        "members": [
          {
            "astId": 228,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "rewardsGranted",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 230,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 232,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "amount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 234,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "enabled",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 236,
            "contract": "contracts/protocol/PrpVoucherGrantor.sol:PrpVoucherGrantor",
            "label": "_reserved",
            "offset": 25,
            "slot": "0",
            "type": "t_uint56"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}