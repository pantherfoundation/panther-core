// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

// Content is autogenerated by `lib/generateTriadMerkleZerosContract.ts`

/**
 * @notice The "triad" tree populated with zeros.
 * @dev The "triad" tree is a modified Merkle (full) binary tree:
 * - every node, from the root upto the level preceding leaves, excluding
 * that level, has 2 child nodes (i.e. this subtree is a full binary tree);
 * - every node of the layer preceding leaves has 3 child nodes (3 leaves).
 * Example:
 * [4]                              0
 *                                  |
 * [3]               0-------------------------------1
 *                   |                               |
 * [2]       0---------------1                2--------------3
 *           |               |                |              |
 * [1]   0-------1       2-------3       4-------5       6-------7
 *      /|\     /|\     /|\     /|\     /|\     /|\     /|\     /|\
 * [0]  0..2    3..5    6..8    9..11  12..14  15..17  18..20  21..24
 *
 * Number in a root/node/leaf position is the "node index" that starts from 0
 * for the leftmost node/leaf of every level.
 * Number in [] is the "level index" that starts from 0 for the leaves level.
 */
abstract contract TriadMerkleZeros {
    // @dev <% NOTE %>
    uint256 public constant FIELD_SIZE =
        <% FIELD %>;

    // Number of levels in a tree including both leaf and root levels
    uint256 internal constant TREE_LEVELS = <% LEVELS %>;
    // @dev Number of levels in a tree excluding the root level
    uint256 public constant TREE_DEPTH = <% DEPTH %>;

    // Max number of leaves in a tree
    uint256 internal constant MAX_LEAVES_NUM = (2 ** (TREE_DEPTH - 1)) * 3;
    // @dev Leaf zero value (`keccak256("<% SEED %>")%SNARK_SCALAR_FIELD`)
    bytes32 public constant ZERO_VALUE = bytes32(
        uint256(<% ZERO %>)
    );
    // Merkle root of a tree that contains zeros only
    bytes32 internal constant ZERO_ROOT = bytes32(
        uint256(<% ROOT %>)
    );

    function populateZeros(bytes32[TREE_DEPTH] memory zeros) internal pure {
<% ZEROS %>
    }
}
