// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

// Content is autogenerated by `lib/generateMerkleZerosContract.ts`

abstract contract MerkleZeros {
    // @dev <% NOTE %>
    uint256 public constant FIELD_SIZE =
        <% FIELD %>;

    // Number of levels in a tree including both leaf and root levels
    uint256 internal constant TREE_LEVELS = <% LEVELS %>;
    // @dev Number of levels in a tree excluding the root level
    uint256 public constant TREE_DEPTH = <% DEPTH %>;

    // Max number of leaves in a tree
    uint256 internal constant MAX_LEAVES_NUM = 2 ** TREE_DEPTH;
    // @dev Leaf zero value (`keccak256("<% SEED %>")%SNARK_SCALAR_FIELD`)
    bytes32 public constant ZERO_VALUE = bytes32(
        uint256(<% ZERO %>)
    );
    // Merkle root of a tree that contains zeros only
    bytes32 internal constant ZERO_ROOT = bytes32(
        uint256(<% ROOT %>)
    );

    function populateZeros(bytes32[TREE_DEPTH] memory zeros) internal pure {
<% ZEROS %>
    }
}
