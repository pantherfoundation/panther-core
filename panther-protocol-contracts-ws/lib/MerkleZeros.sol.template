// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

// @dev Content is autogenerated by `lib/genZerosContract.ts`

abstract contract MerkleZeros {

    // @dev <% NOTE %>
    uint256 public constant FIELD_SIZE =
        <% FIELD %>;

    // Number of levels in a tree including both leaf and root levels
    uint256 internal constant TREE_LEVELS = <% LEVELS %>;
    // @dev Number of levels with nodes/leaves in a tree (excl. the root level)
    uint256 public constant TREE_DEPTH = <% DEPTH %>;

    // Max number of leaves in a tree
    uint256 internal constant MAX_LEAVES_NUM = 2 ** TREE_DEPTH;
    // Leaf zero value (`uint256(keccak256("<% SEED %>")) % SNARK_SCALAR_FIELD`)
    uint256 internal constant ZERO_VALUE = <% ZERO %>;
    // Merkle root of a tree that contains zeros only
    uint256 internal constant ZERO_ROOT = <% ROOT %>;

    function populateZeros(uint256[TREE_DEPTH] memory zeros) internal pure {
        // The code that calls this function ignores `zeros[0]` and `zeros[1]`
        // zeros[0] = ZERO_VALUE;
<% ZEROS %>
    }
}
