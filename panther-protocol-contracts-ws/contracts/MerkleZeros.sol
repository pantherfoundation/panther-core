// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

// @dev Content is autogenerated by `lib/genZerosContract.ts`

abstract contract MerkleZeros {
    // @dev Order of alt_bn128 and the field prime of Baby Jubjub and Poseidon hash
    uint256 public constant FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;

    // Number of levels in a tree including both leaf and root levels
    uint256 internal constant TREE_LEVELS = 16;
    // @dev Number of levels with nodes/leaves in a tree (excl. the root level)
    uint256 public constant TREE_DEPTH = 15;

    // Max number of leaves in a tree
    uint256 internal constant MAX_LEAVES_NUM = 2**TREE_DEPTH;
    // Leaf zero value (`uint256(keccak256("Pantherprotocol")) % SNARK_SCALAR_FIELD`)
    uint256 internal constant ZERO_VALUE =
        2896678800030780677881716886212119387589061708732637213728415628433288554509;
    // Merkle root of a tree that contains zeros only
    uint256 internal constant ZERO_ROOT =
        12455859713696229724526221339047857485467607588813434501517928769317308134556;

    function populateZeros(uint256[TREE_DEPTH] memory zeros) internal pure {
        // The code that calls this function ignores `zeros[0]` and `zeros[1]`
        // zeros[0] = ZERO_VALUE;
        zeros[2] = uint256(
            3378776220260879286502089033253596247983977280165117209776494090180287943112
        );
        zeros[3] = uint256(
            13332607562825133358947880930907706925768730553195841232963500270946125500492
        );
        zeros[4] = uint256(
            2602133270707827583410190225239044634523625207877234879733211246465561970688
        );
        zeros[5] = uint256(
            19603150025355661252212198237607440386334054455687766589389473805115541553727
        );
        zeros[6] = uint256(
            21078238521337523625806977154031988767929399923323679789427062985634312723305
        );
        zeros[7] = uint256(
            15530836891415741166399860451702547522959094984965127719828675838122418186767
        );
        zeros[8] = uint256(
            17831836427614557290431652044145414371925087626131808598362009890774438652119
        );
        zeros[9] = uint256(
            4465836784202878977538296341471470300441964855135851519008900812038788261656
        );
        zeros[10] = uint256(
            12878033372712703816810492505815415858124057351499708737135229819203122809944
        );
        zeros[11] = uint256(
            18307780612008914306024415546812737365063691384665843671053755584619447524447
        );
        zeros[12] = uint256(
            18399220794236723308907532455368503933105202479015828179801520916772962880998
        );
        zeros[13] = uint256(
            17997772780903759195601581429183819619412163062353143936165307874482723961709
        );
        zeros[14] = uint256(
            18496693394049906980893311686550786982256672525298758106045562727433199943509
        );
    }
}
