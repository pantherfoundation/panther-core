// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

/*
 * @dev Poseidon hash functions
 */
abstract contract Hasher {
    function hashLeftRight(uint256 _left, uint256 _right)
        internal
        pure
        returns (uint256)
    {
        uint256[2] memory input;
        input[0] = _left;
        input[1] = _right;
        return PoseidonT3.poseidon(input);
    }

    function poseidon(
        uint256 _first,
        uint256 _second,
        uint256 _third
    ) internal pure returns (uint256) {
        uint256[3] memory input;
        input[0] = _first;
        input[1] = _second;
        input[2] = _third;
        return PoseidonT4.poseidon(input);
    }
}

// Stub to keep solc happy - the actual code is generated by poseidon_gencontract.js from circomlib.
library PoseidonT3 {
    function poseidon(uint256[2] memory input) public pure returns (uint256) {}
}

library PoseidonT4 {
    function poseidon(uint256[3] memory input) public pure returns (uint256) {}
}
