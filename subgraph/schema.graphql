type Staker @entity {
    id: ID!
    lastUpdatedTime: Int!
    lastBlockNumber: Int!
    advancedStakingRewards: [AdvancedStakingReward!]!
        @derivedFrom(field: "staker")
}

type AdvancedStakingReward @entity {
    id: ID!
    creationTime: Int!
    commitments: [Bytes!]
    utxoData: Bytes
    zZkpAmount: BigInt
    staker: Staker!
}

type Triad @entity {
    id: ID!
    leafId: Int!
    commitments: [Bytes!]!
    utxoData: Bytes!
    treeId: Int!
    blockNumber: Int!
    creationTime: Int!
    txHash: Bytes!
}

type BusBatchOnboarded @entity(immutable: true) {
    id: Bytes!
    queueId: BigInt! # uint256
    batchRoot: Bytes! # bytes32
    numUtxosInBatch: BigInt! # uint256
    leftLeafIndexInBusTree: BigInt! # uint256
    busTreeNewRoot: Bytes! # bytes32
    busBranchNewRoot: Bytes! # bytes32
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type BusBranchFilled @entity(immutable: true) {
    id: Bytes!
    branchIndex: BigInt! # uint256
    busBranchFinalRoot: Bytes! # bytes32
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type BusQueueOpened @entity(immutable: false) {
    id: String!
    queueId: BigInt! # uint256
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    isOnboarded: Boolean!
}

type BusQueueProcessed @entity(immutable: true) {
    id: Bytes!
    queueId: BigInt! # uint256
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type MinerRewarded @entity(immutable: true) {
    id: Bytes!
    miner: Bytes! # address
    reward: BigInt! # uint256
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type UtxoBusQueued @entity(immutable: true) {
    id: Bytes!
    utxo: Bytes! # bytes32
    queueId: BigInt! # uint256
    utxoIndexInBatch: BigInt! # uint256
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}
