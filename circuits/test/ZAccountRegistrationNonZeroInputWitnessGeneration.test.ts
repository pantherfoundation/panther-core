import * as path from 'path';
import {toBeHex} from 'ethers';

import circom_wasm_tester from 'circom_tester';
const wasm_tester = circom_wasm_tester.wasm;

import {getOptions} from './helpers/circomTester';
import {wtns} from 'snarkjs';

import {MerkleTree} from '@zk-kit/merkle-tree';
import assert from 'assert';

import {poseidon, eddsa} from 'circomlibjs';
import {bigIntToUint8Array, uint8ArrayToBigInt} from './helpers/utils';
import {
    generateRandom256Bits,
    moduloBabyJubSubFieldPrime,
} from '@panther-core/crypto/lib/base/field-operations';

import {
    deriveKeypairFromSeed,
    derivePubKeyFromPrivKey,
    deriveChildPubKeyFromRootPubKey,
    deriveChildPrivKeyFromRootPrivKey,
} from '@panther-core/crypto/lib/base/keypairs';

describe('ZAccount Registration - Non-Zero Input - Witness computation', async function (this: any) {
    const poseidon2or3 = (inputs: bigint[]): bigint => {
        assert(inputs.length === 3 || inputs.length === 2);
        return poseidon(inputs);
    };

    let circuit: any;
    let mainZAccountRegistrationWasm: any;
    let mainZAccountRegistrationWitness: any;

    let zAssetMerkleTree: any;
    let zAssetMerkleTreeLeaf: any;

    let zAccountBlackListMerkleTree: any;
    let zAccountBlackListMerkleTreeLeaf: any;

    let zNetworkMerkleTree: any;
    let zNetworkMerkleTreeLeaf: any;

    let kycKytMerkleTree: any;
    let kycKytMerkleTreeLeaf: any;

    let zZoneRecordMerkleTree: any;
    let zZoneRecordMerkleTreeLeaf: any;

    let taxiMerkleTree: any;
    let busMerkleTree: any;
    let ferryMerkleTree: any;

    before(async () => {
        const opts = getOptions();
        const input = path.join(
            opts.basedir,
            './circuits/mainZAccountRegistrationV1.circom',
        );
        circuit = await wasm_tester(input, opts);

        mainZAccountRegistrationWasm = path.join(
            opts.basedir,
            './compiled/zAccountRegistration/circuits.wasm',
        );

        mainZAccountRegistrationWitness = path.join(
            opts.basedir,
            './compiled/generate_witness.js',
        );

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== Key generation for ZAccount ========== */
        const seed = moduloBabyJubSubFieldPrime(generateRandom256Bits());
        const fixedSeed =
            1373679790059947716009348979891666704441891413152620235533738526566441607836n;

        // Generate root spending keypair - private key + public keys
        const rootKeypair = deriveKeypairFromSeed(fixedSeed);
        const rootPublicKeys = rootKeypair.publicKey;
        // console.log('rootPublicKeys=>', rootPublicKeys);
        // root public keys - output
        // [
        //     12145192005176226861521344364385235319411642944472049576533844974362874884912n,
        //     3806360534113678626454222391663570333911286964678234024800930715719248331406n
        //   ]

        const rootPrivateKey = rootKeypair.privateKey;
        // console.log('rootPrivateKey=>', rootPrivateKey);
        // root private key - output
        // 1373679790059947716009348979891666704441891413152620235533738526566441607836n

        // Derive child spending keys - child spending public keys
        // Random generated by the sender
        const randomByZAccount =
            2340137772334602010357676040383629302593269637370615234782832501387264356683n;

        const derivedPublicKeys = deriveChildPubKeyFromRootPubKey(
            rootPublicKeys,
            randomByZAccount,
        );
        // console.log('derivedPublicKeys=>', derivedPublicKeys);
        // derivedPublicKeys - output
        // [
        //     17038548925136330597901776143419600886904054884722333959338076954470037655999n,
        //     15181232296682046932319227486729475921640708467464477865639020738569527794871n
        // ]

        // Derive child spending private key from root spending private key
        const deriveChildPrivKey = deriveChildPrivKeyFromRootPrivKey(
            rootPrivateKey,
            // ex: random for private key
            randomByZAccount,
        );
        // console.log('deriveChildPrivKey=>', deriveChildPrivKey);
        // 156870929726825551122083882677471670183390372112846378310250647439531170967n
        /* END ========== Key generation for ZAccount ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        // START ============= zAccountReadPubKey ======
        // const seedForReadPubKey = moduloBabyJubSubFieldPrime(
        //     generateRandom256Bits(),
        // );
        // console.log('seedForReadPubKey=>', seedForReadPubKey);
        const fixedSeedForReadPubKey =
            1807143148206188134925427242927492302158087995127931582887251149414169118083n;

        // Generate seedForReadPubKey
        const readPubKeyKeypair = deriveKeypairFromSeed(fixedSeedForReadPubKey);
        const readPubKeys = readPubKeyKeypair.publicKey;
        // console.log('readPubKeys=>', readPubKeys);
        // read public keys - output
        // [
        //     1187405049038689339917658225106283881019816002721396510889166170461283567874n,
        //     311986042833546580202940940143769849297540181368261575540657864271112079432n
        // ]

        const readPrivateKey = readPubKeyKeypair.privateKey;
        // console.log('readPrivateKey=>', readPrivateKey);
        // readPrivateKey
        // 1807143148206188134925427242927492302158087995127931582887251149414169118083n

        // END ============= zAccountReadPubKey ======

        // START ============= zAccountReadPubKey ======
        // const seedForZAccountNullifierPubKey = moduloBabyJubSubFieldPrime(
        //     generateRandom256Bits(),
        // );
        // console.log(
        //     'seedForZAccountNullifierPubKey=>',
        //     seedForZAccountNullifierPubKey,
        // );
        const fixedSeedForZAccountNullifierPubKey =
            2081961849142627796057765042284889488177156119328724687723132407819597118232n;

        // Generate seedForReadPubKey
        const zAccountNullifierPubKeyPair = deriveKeypairFromSeed(
            fixedSeedForZAccountNullifierPubKey,
        );
        const zAccountNullifierPubKeys = zAccountNullifierPubKeyPair.publicKey;
        // console.log('zAccountNullifierPubKeys=>', zAccountNullifierPubKeys);
        // zAccountNullifierPubKeys=> [
        //     18636161575160505712724711689946435964943204943778681265331835661113836693938n,
        //     21369418187085352831313188453068285816400064790476280656092869887652115165947n
        //   ]
        // END ============= zAccountReadPubKey ======

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== Key generation for daoDataEscrow ========== */
        // const seedForDAODataEscrow = moduloBabyJubSubFieldPrime(generateRandom256Bits());
        const seedForDAODataEscrow =
            1064318262263419277405505696082741267239155647044169005107733812104603287728n;

        // Generate root spending keypair - private key + public keys
        const keyPairForDAODataEscrow =
            deriveKeypairFromSeed(seedForDAODataEscrow);
        const daoDataEscrowPublicKeys = keyPairForDAODataEscrow.publicKey;
        // console.log('daoDataEscrowPublicKeys=>', daoDataEscrowPublicKeys);
        // root public keys - output
        // [
        //     13801722253518986324105008999395866282063706397990269215703587397313668669202n,
        //     21263474481107240615412142108872300257673976823368253125988126712592278779858n
        //   ]

        const daoDataEscrowPrivateKey = keyPairForDAODataEscrow.privateKey;
        // console.log('daoDataEscrowPrivateKey=>', daoDataEscrowPrivateKey);
        // root private key - output
        // 1064318262263419277405505696082741267239155647044169005107733812104603287728n
        /* END ========== Key generation for daoDataEscrow ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== ZAssetMerkleTree  ========== */
        zAssetMerkleTree = new MerkleTree(poseidon2or3, 16, BigInt(0));
        // 120 bit ERC20 token has been mapped to 64 bit zAssetId
        // 64 bit ( was 160 )
        const zAsset = BigInt(0); // MUST BE zero for ZKP (zAssetID of zZKP is ZERO)

        // 160 bit - ERC20 token address
        const token = BigInt(0xac088b095f41ae65bec3aa4b645a0a0423388bcdn);

        // 256 bit - NFT-ID/Token-ID, can be zero in-case some LSB bits from zAssetID is used for NFT-count
        const tokenId = BigInt(0); // Because it is an ERC-20 token

        // 6 bit - network-id where UTXO is spent (UTXO-in)
        // Network ID where this zAsset UTXOs are spent
        // For the sake of simplicity this zAsset UTXO will be created in network 1 and spent in network 1.
        const network = BigInt(1);

        // Check
        const offset = BigInt(0);

        // Check
        const weight = BigInt(1);

        // 7 bit - 10^scale MUST be < 2^252 --> scale must be < 90 - Check
        const scale = BigInt(1);

        const zAssetLeafHash = poseidon([
            zAsset,
            token,
            tokenId,
            network,
            offset,
            weight,
            scale,
        ]);
        zAssetMerkleTreeLeaf = zAssetLeafHash;
        // 13568907681360856299692808632107589149169766513827851044539821704184982678988n
        // console.log('zAssetMerkleTreeLeaf=>', zAssetMerkleTreeLeaf);
        zAssetMerkleTree.insert(zAssetMerkleTreeLeaf);

        // POE - Proof Of Existance of zAssetMerkleTreeLeaf in zAssetMerkleTree
        const poeOfzAssetLeaf = zAssetMerkleTree.createProof(0);
        // console.log('poeOfzAssetLeaf=>', poeOfzAssetLeaf);
        // poeOfzAssetLeaf=> {
        //     root: 19535843916498255092279142315735733351018771081460221571169961247339571651079n,
        //     leaf: 6785577893762327932470540996982069498079967474890435076767956134926260446775n,
        //     siblingNodes: [
        //       0n,
        //       14744269619966411208579211824598458697587494354926760081771325075741142829156n,
        //       7423237065226347324353380772367382631490014989348495481811164164159255474657n,
        //       11286972368698509976183087595462810875513684078608517520839298933882497716792n,
        //       3607627140608796879659380071776844901612302623152076817094415224584923813162n,
        //       19712377064642672829441595136074946683621277828620209496774504837737984048981n,
        //       20775607673010627194014556968476266066927294572720319469184847051418138353016n,
        //       3396914609616007258851405644437304192397291162432396347162513310381425243293n,
        //       21551820661461729022865262380882070649935529853313286572328683688269863701601n,
        //       6573136701248752079028194407151022595060682063033565181951145966236778420039n,
        //       12413880268183407374852357075976609371175688755676981206018884971008854919922n,
        //       14271763308400718165336499097156975241954733520325982997864342600795471836726n,
        //       20066985985293572387227381049700832219069292839614107140851619262827735677018n,
        //       9394776414966240069580838672673694685292165040808226440647796406499139370960n,
        //       11331146992410411304059858900317123658895005918277453009197229807340014528524n,
        //       15819538789928229930262697811477882737253464456578333862691129291651619515538n
        //     ],
        //     path: [
        //       0, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0
        //     ]
        //   }
        /* END ========== ZAssetMerkleTree  ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== ZAccountNoteHasher ========== */
        const spendPubKey = [
            BigInt(
                17038548925136330597901776143419600886904054884722333959338076954470037655999n,
            ),
            BigInt(
                15181232296682046932319227486729475921640708467464477865639020738569527794871n,
            ),
        ];
        const zAccountRootSpendPubKey = [
            BigInt(
                12145192005176226861521344364385235319411642944472049576533844974362874884912n,
            ),
            BigInt(
                3806360534113678626454222391663570333911286964678234024800930715719248331406n,
            ),
        ];
        const zAccountReadPubKey = [
            1187405049038689339917658225106283881019816002721396510889166170461283567874n,
            311986042833546580202940940143769849297540181368261575540657864271112079432n,
        ];
        const zAccountNullifierPubKey = [
            18636161575160505712724711689946435964943204943778681265331835661113836693938n,
            21369418187085352831313188453068285816400064790476280656092869887652115165947n,
        ];
        const zAccountMasterEOA =
            BigInt(0xecb1bf390d9fc6fe4a2589a1110c3f9dd1d535fen);
        const zAccountId = BigInt(1234n);
        const zAccountZkpAmount = BigInt(50n);
        const zAccountPrpAmount = BigInt(40n);
        const zAccountZoneId = BigInt(1n); // zoneId
        const zAccountNonce = BigInt(0n); // Nonce will 0
        const zAccountTotalAmountPerTimePeriod = BigInt(0n);
        // Create time of a ZAccount is in accordance with the current block timestamp.
        // Ex: If current block timestamp is - 1687402800 (which is Thu Jun 22 2023 03:00:00 GMT+0000)
        // and ZAccount will be current block timestamp + delta in zAccount creation (eg:10 seconds)
        // zAccountCreateTime - 1687402810
        const zAccountCreateTime = BigInt(1687402810n); //createTime

        // Expiry time of a ZAccount UTXO is defined by the creation time of the UTXO + the KYC expiry time for a particular zone
        // Ex: If zone1 has a predefined zone expiry as 1 week (i.e 604800 epoch seconds) then the expiry time of a ZAccount UTXO would be the creation time + predefined zone expiry as 1 week (i.e 604800 epoch seconds)
        // This way each zAccount UTXO created has an expiry specific to zZones.

        // Expiry time of a ZAccount UTXO is zAcoount created time + the zone specific kyc expiry time
        const zAccountExpiryTime = zAccountCreateTime + BigInt(604800n);
        // console.log("zAccountExpiryTime=>",zAccountExpiryTime); // 1688007610n

        const zAccountNetworkId = BigInt(1n);

        const hash1 = poseidon([
            spendPubKey[0],
            spendPubKey[1],
            zAccountRootSpendPubKey[0],
            zAccountRootSpendPubKey[1],
            zAccountReadPubKey[0],
            zAccountReadPubKey[1],
            zAccountNullifierPubKey[0],
            zAccountNullifierPubKey[1],
        ]);

        const zAccountNoteHasher = poseidon([
            hash1,
            zAccountMasterEOA,
            zAccountId,
            zAccountZkpAmount,
            zAccountPrpAmount,
            zAccountZoneId,
            zAccountExpiryTime,
            zAccountNonce,
            zAccountTotalAmountPerTimePeriod,
            zAccountCreateTime,
            zAccountNetworkId,
        ]);

        // 13144629997801297520165716195490138255341464878144609947339096754816247452817n
        // console.log('zAccountNoteHasher=>', zAccountNoteHasher);

        /* END ========== ZAccountNoteHasher ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== ZAccount Nullifier computation ========== */
        const zAccountNullifierHasher = poseidon([
            BigInt(1234n),
            BigInt(1n),
            BigInt(1n),
            BigInt(
                1373679790059947716009348979891666704441891413152620235533738526566441607836n,
            ),
        ]);
        /* END ========== ZAccount Nullifier computation ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== ZAccountBlackListMerkleTree ========== */
        zAccountBlackListMerkleTree = new MerkleTree(
            poseidon2or3,
            16,
            BigInt(0),
        );

        // Random addition of a leaf to the zAccountBlack list
        // Meaning the current zAccount(sender) is not blacklisted
        zAccountBlackListMerkleTreeLeaf = 0;

        zAccountBlackListMerkleTree.insert(zAccountBlackListMerkleTreeLeaf);

        const poeOfzAccountBlackListLeaf =
            zAccountBlackListMerkleTree.createProof(0);
        // console.log('poeOfzAccountBlackListLeaf=>', poeOfzAccountBlackListLeaf);
        // poeOfzAccountBlackListLeaf=> {
        //     root: 19217088683336594659449020493828377907203207941212636669271704950158751593251n,
        //     leaf: 0,
        //     siblingNodes: [
        //       0n,
        //       14744269619966411208579211824598458697587494354926760081771325075741142829156n,
        //       7423237065226347324353380772367382631490014989348495481811164164159255474657n,
        //       11286972368698509976183087595462810875513684078608517520839298933882497716792n,
        //       3607627140608796879659380071776844901612302623152076817094415224584923813162n,
        //       19712377064642672829441595136074946683621277828620209496774504837737984048981n,
        //       20775607673010627194014556968476266066927294572720319469184847051418138353016n,
        //       3396914609616007258851405644437304192397291162432396347162513310381425243293n,
        //       21551820661461729022865262380882070649935529853313286572328683688269863701601n,
        //       6573136701248752079028194407151022595060682063033565181951145966236778420039n,
        //       12413880268183407374852357075976609371175688755676981206018884971008854919922n,
        //       14271763308400718165336499097156975241954733520325982997864342600795471836726n,
        //       20066985985293572387227381049700832219069292839614107140851619262827735677018n,
        //       9394776414966240069580838672673694685292165040808226440647796406499139370960n,
        //       11331146992410411304059858900317123658895005918277453009197229807340014528524n,
        //       15819538789928229930262697811477882737253464456578333862691129291651619515538n
        //     ],
        //     path: [
        //       0, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0
        //     ]
        //   }
        /* END ========== ZAccountBlackListMerkleTree ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== kycSignedMessageHashInternal calculation ========== */
        const kycSignedMessagePackageType = BigInt(1); // MUST 1 for KYC
        // Assuming the user will complete KYC verification for his ZAccount after 24 hours of ZAccount creation
        // 1687402810 < kycSignedMessageTimestamp
        // 1687489200 - Fri Jun 23 2023 03:00:00 GMT+0000
        const kycSignedMessageTimestamp = BigInt(1687489200);

        const kycSignedMessageSender =
            BigInt(0xecb1bf390d9fc6fe4a2589a1110c3f9dd1d535fen);
        const kycSignedMessageSigner =
            BigInt(0xecb1bf390d9fc6fe4a2589a1110c3f9dd1d535fen);
        const kycSignedMessageReceiver = BigInt(0);
        const kycSignedMessageSessionId = toBeHex(1_000_000);
        const kycSignedMessageRuleId = BigInt(16); // Supports only 8 bits

        const sessionId = uint8ArrayToBigInt(
            bigIntToUint8Array(BigInt(kycSignedMessageSessionId), 32).slice(
                0,
                31,
            ),
        );
        // console.log('sessionId=>', sessionId); //3906n

        const kycSignedMessageHashInternal = poseidon([
            kycSignedMessagePackageType,
            kycSignedMessageTimestamp,
            kycSignedMessageSender,
            kycSignedMessageReceiver,
            sessionId,
            kycSignedMessageRuleId,
            kycSignedMessageSigner,
        ]);

        // 9885087152629455533177922067642536315083173551946042079286556563507370714740n
        // console.log(
        //     'kycSignedMessageHashInternal=>',
        //     kycSignedMessageHashInternal,
        // );
        // private key - purefi
        const prvKey = Buffer.from(
            '0001020304050607080900010203040506070809000102030405060708090001',
            'hex',
        );

        const pubKey = eddsa.prv2pub(prvKey);
        // 13277427435165878497778222415993513565335242147425444199013288855685581939618n
        const kycEdDsaPubKey0 = pubKey[0];

        // 13622229784656158136036771217484571176836296686641868549125388198837476602820n
        const kycEdDsaPubKey1 = pubKey[1];

        // console.log('kycEdDsaPubKey0=>', kycEdDsaPubKey0);
        // console.log('kycEdDsaPubKey1=>', kycEdDsaPubKey1);

        const signature = eddsa.signPoseidon(
            prvKey,
            kycSignedMessageHashInternal,
        );

        // signature=> {
        //     R8: [
        //       11019469704926125664550728735213125647501490479460797831114453229899757579689n,
        //       13854963995377807573540546718176146863402996159127153864764353046667588731001n
        //     ],
        //     S: 2121005999002044499564841405347448402555587723184039422438334688521918381259n
        //   }
        // console.log('signature=>', signature);

        /* END ========== kycSignedMessageHashInternal calculator ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== zNetworkMerkleTree ========== */
        zNetworkMerkleTree = new MerkleTree(poseidon2or3, 6, BigInt(0));

        // zNetworkMerkleTreeLeaf calculation
        const active = BigInt(1);
        // Ex: Ethereum mainnet chain ID is 1 and Network ID is 1
        const networkId = BigInt(1);
        const chainId = BigInt(1);
        // Check networkIDsBitMap
        const networkIDsBitMap = BigInt(1);
        // transaction reward, utxo reward and deposit rewards are specific to individual networks.
        const forTxReward = BigInt(1);
        const forUtxoReward = BigInt(2);
        const forDepositReward = BigInt(3);
        const daoDataEscrowPubKey = [
            BigInt(
                13801722253518986324105008999395866282063706397990269215703587397313668669202n,
            ),
            BigInt(
                21263474481107240615412142108872300257673976823368253125988126712592278779858n,
            ),
        ];

        const hash = poseidon([
            active,
            chainId,
            networkId,
            networkIDsBitMap,
            forTxReward,
            forUtxoReward,
            forDepositReward,
            daoDataEscrowPubKey[0],
            daoDataEscrowPubKey[1],
        ]);

        zNetworkMerkleTreeLeaf = hash;
        // 3055780040239072029983302402692520014263900515058596363506432098686318796943n
        // console.log("zNetworkMerkleTreeLeaf=>",zNetworkMerkleTreeLeaf);

        zNetworkMerkleTree.insert(zNetworkMerkleTreeLeaf);

        const poeOfzNetworkMerkleLeaf = zNetworkMerkleTree.createProof(0);
        // console.log('poeOfzNetworkMerkleLeaf=>', poeOfzNetworkMerkleLeaf);
        // poeOfzNetworkMerkleLeaf=> {
        //     root: 3571799819190386765638761636798698138144469641608011835483658954125713500776n,
        //     leaf: 3055780040239072029983302402692520014263900515058596363506432098686318796943n,
        //     siblingNodes: [
        //       0n,
        //       14744269619966411208579211824598458697587494354926760081771325075741142829156n,
        //       7423237065226347324353380772367382631490014989348495481811164164159255474657n,
        //       11286972368698509976183087595462810875513684078608517520839298933882497716792n,
        //       3607627140608796879659380071776844901612302623152076817094415224584923813162n,
        //       19712377064642672829441595136074946683621277828620209496774504837737984048981n
        //     ],
        //     path: [ 0, 0, 0, 0, 0, 0 ]
        //   }
        /* END ========== zNetworkMerkleTree ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== KycKytMerkleTree ========== */
        kycKytMerkleTree = new MerkleTree(poseidon2or3, 16, BigInt(0));

        // kycKytMerkleTreeLeaf calculation
        const key = [
            BigInt(
                13277427435165878497778222415993513565335242147425444199013288855685581939618n,
            ),
            BigInt(
                13622229784656158136036771217484571176836296686641868549125388198837476602820n,
            ),
        ];
        const expiryTime = BigInt(1000n); // This is a dummy entry at 0 index position

        kycKytMerkleTreeLeaf = poseidon([key[0], key[1], expiryTime]);
        // 8182442114680484104794800359347888390550258022377668063579024785808762439749n
        // console.log('kycKytMerkleTreeLeaf=>', kycKytMerkleTreeLeaf);

        kycKytMerkleTree.insert(kycKytMerkleTreeLeaf);

        const poeOfkycKytMerkleTreeLeaf = kycKytMerkleTree.createProof(0);
        // console.log('poeOfkycKytMerkleTreeLeaf=>', poeOfkycKytMerkleTreeLeaf);

        // index 1 KYC detail
        // Adding another leaf so that the leafId is 1 which tests out non-zero scenario
        // Assuming user finishes KYC verification process at 1687489200 (Fri Jun 23 2023 03:00:00 GMT+0000)
        // Assuming that this KYC is valid for this ZAccount 1 year from the 1687489200 this time.
        // 1687489200 + 1 year = 1719111600 (Sun Jun 23 2024 03:00:00 GMT+0000)
        const expiryTimeLeaf1 = BigInt(1719111600n);

        const kycKytMerkleTreeLeaf1 = poseidon([
            key[0],
            key[1],
            expiryTimeLeaf1,
        ]);
        // 21681397631439410916494352266145913458520145236255362963249911494333091691639n
        // console.log('kycKytMerkleTreeLeaf1=>', kycKytMerkleTreeLeaf1);

        kycKytMerkleTree.insert(kycKytMerkleTreeLeaf1);

        const poeOfkycKytMerkleTreeLeaf1 = kycKytMerkleTree.createProof(1);
        // console.log('poeOfkycKytMerkleTreeLeaf1=>', poeOfkycKytMerkleTreeLeaf1);
        // poeOfkycKytMerkleTreeLeaf1=> {
        //     root: 18139283499551121798144508352920340786793810282154757122124989082341271083633n,
        //     leaf: 21681397631439410916494352266145913458520145236255362963249911494333091691639n,
        //     siblingNodes: [
        //       8182442114680484104794800359347888390550258022377668063579024785808762439749n,
        //       14744269619966411208579211824598458697587494354926760081771325075741142829156n,
        //       7423237065226347324353380772367382631490014989348495481811164164159255474657n,
        //       11286972368698509976183087595462810875513684078608517520839298933882497716792n,
        //       3607627140608796879659380071776844901612302623152076817094415224584923813162n,
        //       19712377064642672829441595136074946683621277828620209496774504837737984048981n,
        //       20775607673010627194014556968476266066927294572720319469184847051418138353016n,
        //       3396914609616007258851405644437304192397291162432396347162513310381425243293n,
        //       21551820661461729022865262380882070649935529853313286572328683688269863701601n,
        //       6573136701248752079028194407151022595060682063033565181951145966236778420039n,
        //       12413880268183407374852357075976609371175688755676981206018884971008854919922n,
        //       14271763308400718165336499097156975241954733520325982997864342600795471836726n,
        //       20066985985293572387227381049700832219069292839614107140851619262827735677018n,
        //       9394776414966240069580838672673694685292165040808226440647796406499139370960n,
        //       11331146992410411304059858900317123658895005918277453009197229807340014528524n,
        //       15819538789928229930262697811477882737253464456578333862691129291651619515538n
        //     ],
        //     path: [
        //       1, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0
        //     ]
        //   }

        /* END ========== KycKytMerkleTree ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== Key generation for KYC EdDSA ========== */
        // const seedForEDDsaPubKey = moduloBabyJubSubFieldPrime(generateRandom256Bits());
        const seedForEDDsaPubKey =
            2018329449321394819728652254162080836641315100665227476481704688554639961212n;

        // Generate root spending keypair - private key + public keys
        const keyPairForEDDsa = deriveKeypairFromSeed(seedForEDDsaPubKey);
        const eDDsaPublicKeys = keyPairForEDDsa.publicKey;
        // console.log('eDDsaPublicKeys=>', eDDsaPublicKeys);
        // root public keys - output
        // [
        //     13844307712101580138976418881985895509771215702310325755324993649339795145459n,
        //     2316855448348045196803672303986951089389471489704750331692824393498410052392n
        // ]

        const eDDsaPrivateKey = keyPairForEDDsa.privateKey;
        // console.log('eDDsaPrivateKey=>', eDDsaPrivateKey);
        // root private key - output
        // 2018329449321394819728652254162080836641315100665227476481704688554639961212n
        /* END ========== Key generation for KYC EdDSA  ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== zZoneMerkleTree ========== */
        zZoneRecordMerkleTree = new MerkleTree(poseidon2or3, 16, BigInt(0));
        const zoneId = BigInt(1n);
        const edDsaPubKey = [
            BigInt(eDDsaPublicKeys[0]),
            BigInt(eDDsaPublicKeys[1]),
        ];
        const originZoneIDs = BigInt(1n); // make it zoneId
        const targetZoneIDs = BigInt(1n); // make it zoneId
        const zZoneNetworkIDsBitMap = BigInt(1234);
        const zZoneKycKytMerkleTreeLeafIDsAndRulesList = BigInt(272n);
        const zZoneKycExpiryTime = BigInt(604800n); // 1 week - 604800 seconds
        const zZoneKytExpiryTime = BigInt(3600n); // provided as part of the transaction details. Transaction is valid for an hour 3600 seconds epoch time
        const zZoneDepositMaxAmount = BigInt(200n); // For zone 1 max deposit
        const zZoneWithrawMaxAmount = BigInt(150n);
        const zZoneInternalMaxAmount = BigInt(150n);
        const zZoneZAccountIDsBlackList = BigInt(0n); // No zAccountId is blacklisted. // to-do:another sceanrio to cover - blacklist a zAccount
        const zZoneMaximumAmountPerTimePeriod = BigInt(150n);
        const zZoneTimePeriodPerMaximumAmount = BigInt(86400n); // 24H

        zZoneRecordMerkleTreeLeaf = poseidon([
            zoneId,
            edDsaPubKey[0],
            edDsaPubKey[1],
            originZoneIDs,
            targetZoneIDs,
            zZoneNetworkIDsBitMap,
            zZoneKycKytMerkleTreeLeafIDsAndRulesList,
            zZoneKycExpiryTime,
            zZoneKytExpiryTime,
            zZoneDepositMaxAmount,
            zZoneWithrawMaxAmount,
            zZoneInternalMaxAmount,
            zZoneZAccountIDsBlackList,
            zZoneMaximumAmountPerTimePeriod,
            zZoneTimePeriodPerMaximumAmount,
        ]);
        // 7174834853279250577307670914280686296555333992946952463348469491377549260044n
        // console.log('zZoneRecordMerkleTreeLeaf=>', zZoneRecordMerkleTreeLeaf);

        zZoneRecordMerkleTree.insert(zZoneRecordMerkleTreeLeaf);

        const poeOfzZoneRecordMerkleTreeLeaf =
            zZoneRecordMerkleTree.createProof(0);
        // console.log(
        //     'poeOfzZoneRecordMerkleTreeLeaf=>',
        //     poeOfzZoneRecordMerkleTreeLeaf,
        // );
        // poeOfzZoneRecordMerkleTreeLeaf=> {
        //     root: 3853335516101579875457750934935398055005280448398251411213634628862424762402n,
        //     leaf: 7174834853279250577307670914280686296555333992946952463348469491377549260044n,
        //     siblingNodes: [
        //       0n,
        //       14744269619966411208579211824598458697587494354926760081771325075741142829156n,
        //       7423237065226347324353380772367382631490014989348495481811164164159255474657n,
        //       11286972368698509976183087595462810875513684078608517520839298933882497716792n,
        //       3607627140608796879659380071776844901612302623152076817094415224584923813162n,
        //       19712377064642672829441595136074946683621277828620209496774504837737984048981n,
        //       20775607673010627194014556968476266066927294572720319469184847051418138353016n,
        //       3396914609616007258851405644437304192397291162432396347162513310381425243293n,
        //       21551820661461729022865262380882070649935529853313286572328683688269863701601n,
        //       6573136701248752079028194407151022595060682063033565181951145966236778420039n,
        //       12413880268183407374852357075976609371175688755676981206018884971008854919922n,
        //       14271763308400718165336499097156975241954733520325982997864342600795471836726n,
        //       20066985985293572387227381049700832219069292839614107140851619262827735677018n,
        //       9394776414966240069580838672673694685292165040808226440647796406499139370960n,
        //       11331146992410411304059858900317123658895005918277453009197229807340014528524n,
        //       15819538789928229930262697811477882737253464456578333862691129291651619515538n
        //     ],
        //     path: [
        //       0, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0, 0, 0,
        //       0, 0, 0, 0
        //     ]
        //   }
        /* END ========== zZoneMerkleTree ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        /* START ========== static-merkle-root calculation ========== */
        const zAssetMerkleRoot =
            BigInt(
                19535843916498255092279142315735733351018771081460221571169961247339571651079n,
            );

        const zAccountBlackListMerkleRoot =
            BigInt(
                19217088683336594659449020493828377907203207941212636669271704950158751593251n,
            );

        const zNetworkTreeMerkleRoot =
            BigInt(
                3571799819190386765638761636798698138144469641608011835483658954125713500776n,
            );

        const zZoneMerkleRoot =
            BigInt(
                3853335516101579875457750934935398055005280448398251411213634628862424762402n,
            );

        const kycKytMerkleRoot =
            BigInt(
                18139283499551121798144508352920340786793810282154757122124989082341271083633n,
            );

        const staticTreeMerkleRoot = poseidon([
            zAssetMerkleRoot,
            zAccountBlackListMerkleRoot,
            zNetworkTreeMerkleRoot,
            zZoneMerkleRoot,
            kycKytMerkleRoot,
        ]);
        // 11728486084117138299049842970728391864873855415795077492316123666247373393728n
        // console.log('staticTreeMerkleRoot=>', staticTreeMerkleRoot);
        /* END ========== static-merkle-root calculation ========== */
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        // 1) UTXO-Taxi-Tree   - 6 levels MT
        // 2) UTXO-Bus-Tree    - 26 levels MT
        // 3) UTXO-Ferry-Tree  - 6 + 26 = 32 levels MT (6 for 16 networks)
        // considering zAccount registration is first of the tx, and UTXO trees are not populated yet, we will have a empty taxi, bus and ferry trees.
        taxiMerkleTree = new MerkleTree(poseidon2or3, 6, BigInt(0));
        // 20775607673010627194014556968476266066927294572720319469184847051418138353016n
        // console.log('taxiUTXOMerkleTree root=>', taxiMerkleTree.root);

        busMerkleTree = new MerkleTree(poseidon2or3, 26, BigInt(0));
        // 8163447297445169709687354538480474434591144168767135863541048304198280615192n
        // console.log('busUTXOMerkleTree root=>', busMerkleTree.root);

        ferryMerkleTree = new MerkleTree(poseidon2or3, 32, BigInt(0));
        // 21443572485391568159800782191812935835534334817699172242223315142338162256601n
        // console.log('ferryUTXOMerkleTree root=>', ferryMerkleTree.root);

        const forestMerkleRoot = poseidon([
            taxiMerkleTree.root,
            busMerkleTree.root,
            ferryMerkleTree.root,
            staticTreeMerkleRoot,
        ]);
        // 5481873231735763496906486873300326548492829360042714004477564093809633696439n
        // console.log('forestMerkleRoot=>', forestMerkleRoot);
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/

        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
        const salt = BigInt(98765n);
        const saltHash = poseidon([salt]);
        // 1035379174490095295757364370441431315669465777987680425354976294595527119016n
        // console.log('saltHash=>', saltHash);
        /* ========== $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ==========*/
    });

    const nonZeroInputForZAccountRegistration = {
        // external data anchoring
        extraInputsHash: BigInt(0n),

        // zkp amounts (not scaled)
        zkpAmount: BigInt(50n),
        zkpChange: BigInt(0n),

        // ZAsset membership verification
        zAssetId: BigInt(0n),
        zAssetToken: BigInt(0xac088b095f41ae65bec3aa4b645a0a0423388bcdn),
        zAssetTokenId: BigInt(0n),
        zAssetNetwork: BigInt(1n),
        zAssetOffset: BigInt(0n),
        zAssetWeight: BigInt(1n),
        zAssetScale: BigInt(1n),
        zAssetMerkleRoot:
            BigInt(
                19535843916498255092279142315735733351018771081460221571169961247339571651079n,
            ),
        zAssetPathIndex: [
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
        ],
        zAssetPathElements: [
            BigInt(0n),
            BigInt(
                14744269619966411208579211824598458697587494354926760081771325075741142829156n,
            ),
            BigInt(
                7423237065226347324353380772367382631490014989348495481811164164159255474657n,
            ),
            BigInt(
                11286972368698509976183087595462810875513684078608517520839298933882497716792n,
            ),
            BigInt(
                3607627140608796879659380071776844901612302623152076817094415224584923813162n,
            ),
            BigInt(
                19712377064642672829441595136074946683621277828620209496774504837737984048981n,
            ),
            BigInt(
                20775607673010627194014556968476266066927294572720319469184847051418138353016n,
            ),
            BigInt(
                3396914609616007258851405644437304192397291162432396347162513310381425243293n,
            ),
            BigInt(
                21551820661461729022865262380882070649935529853313286572328683688269863701601n,
            ),
            BigInt(
                6573136701248752079028194407151022595060682063033565181951145966236778420039n,
            ),
            BigInt(
                12413880268183407374852357075976609371175688755676981206018884971008854919922n,
            ),
            BigInt(
                14271763308400718165336499097156975241954733520325982997864342600795471836726n,
            ),
            BigInt(
                20066985985293572387227381049700832219069292839614107140851619262827735677018n,
            ),
            BigInt(
                9394776414966240069580838672673694685292165040808226440647796406499139370960n,
            ),
            BigInt(
                11331146992410411304059858900317123658895005918277453009197229807340014528524n,
            ),
            BigInt(
                15819538789928229930262697811477882737253464456578333862691129291651619515538n,
            ),
        ],

        // zAccount UTXO input verification
        zAccountRootSpendPrivKey:
            BigInt(
                1373679790059947716009348979891666704441891413152620235533738526566441607836n,
            ),
        zAccountRootSpendPubKey: [
            BigInt(
                12145192005176226861521344364385235319411642944472049576533844974362874884912n,
            ),
            BigInt(
                3806360534113678626454222391663570333911286964678234024800930715719248331406n,
            ),
        ],
        zAccountNullifierPubKey: [
            BigInt(
                18636161575160505712724711689946435964943204943778681265331835661113836693938n,
            ),
            BigInt(
                21369418187085352831313188453068285816400064790476280656092869887652115165947n,
            ),
        ],
        zAccountReadPubKey: [
            BigInt(
                1187405049038689339917658225106283881019816002721396510889166170461283567874n,
            ),
            BigInt(
                311986042833546580202940940143769849297540181368261575540657864271112079432n,
            ),
        ],
        zAccountSpendKeyRandom:
            BigInt(
                2340137772334602010357676040383629302593269637370615234782832501387264356683n,
            ),

        zAccountReadPrivKey:
            BigInt(
                1807143148206188134925427242927492302158087995127931582887251149414169118083n,
            ),
        zAccountNullifierPrivKey:
            BigInt(
                2081961849142627796057765042284889488177156119328724687723132407819597118232n,
            ),
        zAccountMasterEOA: BigInt(0xecb1bf390d9fc6fe4a2589a1110c3f9dd1d535fen),
        zAccountId: BigInt(1234n),
        zAccountZkpAmount: BigInt(50n),
        zAccountPrpAmount: BigInt(40n),
        zAccountZoneId: BigInt(1n),
        zAccountExpiryTime: BigInt(1688007610n),
        zAccountNonce: BigInt(0n),
        zAccountTotalAmountPerTimePeriod: BigInt(0n), // This field will be 0 at the time of registration
        zAccountCreateTime: BigInt(1687402810n),
        zAccountNetworkId: BigInt(1n),

        zNetworkId: BigInt(1n),

        // ZAccountUtxo commitment verification
        zAccountCommitment:
            BigInt(
                13144629997801297520165716195490138255341464878144609947339096754816247452817n,
            ),

        // ZAccount nullifier verification
        zAccountNullifier:
            BigInt(
                2994132316786135523210311335731537829558184739966469614652581809956454367397n,
            ),

        // verify if current zAccountId is blacklisted or not!
        zAccountBlackListLeaf: BigInt(0n),
        zAccountBlackListMerkleRoot:
            BigInt(
                19217088683336594659449020493828377907203207941212636669271704950158751593251n,
            ),
        zAccountBlackListPathElements: [
            BigInt(0n),
            BigInt(
                14744269619966411208579211824598458697587494354926760081771325075741142829156n,
            ),
            BigInt(
                7423237065226347324353380772367382631490014989348495481811164164159255474657n,
            ),
            BigInt(
                11286972368698509976183087595462810875513684078608517520839298933882497716792n,
            ),
            BigInt(
                3607627140608796879659380071776844901612302623152076817094415224584923813162n,
            ),
            BigInt(
                19712377064642672829441595136074946683621277828620209496774504837737984048981n,
            ),
            BigInt(
                20775607673010627194014556968476266066927294572720319469184847051418138353016n,
            ),
            BigInt(
                3396914609616007258851405644437304192397291162432396347162513310381425243293n,
            ),
            BigInt(
                21551820661461729022865262380882070649935529853313286572328683688269863701601n,
            ),
            BigInt(
                6573136701248752079028194407151022595060682063033565181951145966236778420039n,
            ),
            BigInt(
                12413880268183407374852357075976609371175688755676981206018884971008854919922n,
            ),
            BigInt(
                14271763308400718165336499097156975241954733520325982997864342600795471836726n,
            ),
            BigInt(
                20066985985293572387227381049700832219069292839614107140851619262827735677018n,
            ),
            BigInt(
                9394776414966240069580838672673694685292165040808226440647796406499139370960n,
            ),
            BigInt(
                11331146992410411304059858900317123658895005918277453009197229807340014528524n,
            ),
            BigInt(
                15819538789928229930262697811477882737253464456578333862691129291651619515538n,
            ),
        ],

        // KYC signature verification
        kycSignedMessagePackageType: BigInt(1),
        kycSignedMessageTimestamp: BigInt(1687489200),
        kycSignedMessageSender:
            BigInt(0xecb1bf390d9fc6fe4a2589a1110c3f9dd1d535fen),
        kycSignedMessageSigner:
            BigInt(0xecb1bf390d9fc6fe4a2589a1110c3f9dd1d535fen),
        kycSignedMessageReceiver: BigInt(0),
        kycSignedMessageSessionId: 3906n,
        kycSignedMessageRuleId: BigInt(16n), // RuleId's value can't be more than 2^8-1=255
        kycSignedMessageHash:
            BigInt(
                9885087152629455533177922067642536315083173551946042079286556563507370714740n,
            ),
        kycSignature: [
            BigInt(
                2121005999002044499564841405347448402555587723184039422438334688521918381259n,
            ),
            BigInt(
                11019469704926125664550728735213125647501490479460797831114453229899757579689n,
            ),
            BigInt(
                13854963995377807573540546718176146863402996159127153864764353046667588731001n,
            ),
        ],

        // KYCEdDSA public key membership verification
        kycEdDsaPubKey: [
            BigInt(
                13277427435165878497778222415993513565335242147425444199013288855685581939618n,
            ),
            BigInt(
                13622229784656158136036771217484571176836296686641868549125388198837476602820n,
            ),
        ],
        kycEdDsaPubKeyExpiryTime: BigInt(1719111600n),
        trustProvidersMerkleRoot:
            BigInt(
                18139283499551121798144508352920340786793810282154757122124989082341271083633n,
            ),
        kycPathElements: [
            BigInt(
                8182442114680484104794800359347888390550258022377668063579024785808762439749n,
            ),
            BigInt(
                14744269619966411208579211824598458697587494354926760081771325075741142829156n,
            ),
            BigInt(
                7423237065226347324353380772367382631490014989348495481811164164159255474657n,
            ),
            BigInt(
                11286972368698509976183087595462810875513684078608517520839298933882497716792n,
            ),
            BigInt(
                3607627140608796879659380071776844901612302623152076817094415224584923813162n,
            ),
            BigInt(
                19712377064642672829441595136074946683621277828620209496774504837737984048981n,
            ),
            BigInt(
                20775607673010627194014556968476266066927294572720319469184847051418138353016n,
            ),
            BigInt(
                3396914609616007258851405644437304192397291162432396347162513310381425243293n,
            ),
            BigInt(
                21551820661461729022865262380882070649935529853313286572328683688269863701601n,
            ),
            BigInt(
                6573136701248752079028194407151022595060682063033565181951145966236778420039n,
            ),
            BigInt(
                12413880268183407374852357075976609371175688755676981206018884971008854919922n,
            ),
            BigInt(
                14271763308400718165336499097156975241954733520325982997864342600795471836726n,
            ),
            BigInt(
                20066985985293572387227381049700832219069292839614107140851619262827735677018n,
            ),
            BigInt(
                9394776414966240069580838672673694685292165040808226440647796406499139370960n,
            ),
            BigInt(
                11331146992410411304059858900317123658895005918277453009197229807340014528524n,
            ),
            BigInt(
                15819538789928229930262697811477882737253464456578333862691129291651619515538n,
            ),
        ],
        kycPathIndex: [
            BigInt(1n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
        ],

        // kyc leaf-id(1) & rule(16) is allowed in zZone
        kycMerkleTreeLeafIDsAndRulesOffset: BigInt(0n),

        // zZone
        zZoneOriginZoneIDs: BigInt(123n),
        zZoneTargetZoneIDs: BigInt(156n),
        zZoneNetworkIDsBitMap: BigInt(1234n),
        zZoneTrustProvidersMerkleTreeLeafIDsAndRulesList: BigInt(272n),
        zZoneKycExpiryTime: BigInt(604800n), // 1 week epoch time
        zZoneKytExpiryTime: BigInt(3600n),
        zZoneDepositMaxAmount: BigInt(200n),
        zZoneWithrawMaxAmount: BigInt(150n),
        zZoneInternalMaxAmount: BigInt(150n),
        zZoneMerkleRoot:
            BigInt(
                3853335516101579875457750934935398055005280448398251411213634628862424762402n,
            ),
        zZonePathElements: [
            BigInt(0n),
            BigInt(
                14744269619966411208579211824598458697587494354926760081771325075741142829156n,
            ),
            BigInt(
                7423237065226347324353380772367382631490014989348495481811164164159255474657n,
            ),
            BigInt(
                11286972368698509976183087595462810875513684078608517520839298933882497716792n,
            ),
            BigInt(
                3607627140608796879659380071776844901612302623152076817094415224584923813162n,
            ),
            BigInt(
                19712377064642672829441595136074946683621277828620209496774504837737984048981n,
            ),
            BigInt(
                20775607673010627194014556968476266066927294572720319469184847051418138353016n,
            ),
            BigInt(
                3396914609616007258851405644437304192397291162432396347162513310381425243293n,
            ),
            BigInt(
                21551820661461729022865262380882070649935529853313286572328683688269863701601n,
            ),
            BigInt(
                6573136701248752079028194407151022595060682063033565181951145966236778420039n,
            ),
            BigInt(
                12413880268183407374852357075976609371175688755676981206018884971008854919922n,
            ),
            BigInt(
                14271763308400718165336499097156975241954733520325982997864342600795471836726n,
            ),
            BigInt(
                20066985985293572387227381049700832219069292839614107140851619262827735677018n,
            ),
            BigInt(
                9394776414966240069580838672673694685292165040808226440647796406499139370960n,
            ),
            BigInt(
                11331146992410411304059858900317123658895005918277453009197229807340014528524n,
            ),
            BigInt(
                15819538789928229930262697811477882737253464456578333862691129291651619515538n,
            ),
        ],
        zZonePathIndex: [
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
        ],
        zZoneEdDsaPubKey: [
            BigInt(
                13844307712101580138976418881985895509771215702310325755324993649339795145459n,
            ),
            BigInt(
                2316855448348045196803672303986951089389471489704750331692824393498410052392n,
            ),
        ],
        zZoneZAccountIDsBlackList: BigInt(0n), // no zAccountID is in blockclist
        zZoneMaximumAmountPerTimePeriod: BigInt(150n),
        zZoneTimePeriodPerMaximumAmount: BigInt(86400n),

        // zNetworks tree
        // network parameters:
        // 1) is-active - 1 bit (circuit will set it to TRUE ALWAYS)
        // 2) network-id - 6 bit
        // 3) rewards params - all of them: forTxReward, forUtxoReward, forDepositReward
        // 4) daoDataEscrowPubKey[2]
        zNetworkChainId: BigInt(1n),
        zNetworkIDsBitMap: BigInt(1n),
        zNetworkTreeMerkleRoot:
            BigInt(
                3571799819190386765638761636798698138144469641608011835483658954125713500776n,
            ),
        zNetworkTreePathElements: [
            BigInt(0n),
            BigInt(
                14744269619966411208579211824598458697587494354926760081771325075741142829156n,
            ),
            BigInt(
                7423237065226347324353380772367382631490014989348495481811164164159255474657n,
            ),
            BigInt(
                11286972368698509976183087595462810875513684078608517520839298933882497716792n,
            ),
            BigInt(
                3607627140608796879659380071776844901612302623152076817094415224584923813162n,
            ),
            BigInt(
                19712377064642672829441595136074946683621277828620209496774504837737984048981n,
            ),
        ],
        zNetworkTreePathIndex: [
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
            BigInt(0n),
        ],
        daoDataEscrowPubKey: [
            BigInt(
                13801722253518986324105008999395866282063706397990269215703587397313668669202n,
            ),
            BigInt(
                21263474481107240615412142108872300257673976823368253125988126712592278779858n,
            ),
        ],
        forTxReward: BigInt(1n),
        forUtxoReward: BigInt(2n),
        forDepositReward: BigInt(3n),

        // static tree merkle root
        // Poseidon of:
        // 1) zAssetMerkleRoot
        // 2) zAccountBlackListMerkleRoot
        // 3) zNetworkTreeMerkleRoot
        // 4) zZoneMerkleRoot
        // 5) kycKytMerkleRoot
        staticTreeMerkleRoot:
            BigInt(
                10148314721627660005834377470188837651967404256120618743230733300123301462601n,
            ),

        // forest root
        // Poseidon of:
        // 1) UTXO-Taxi-Tree   - 6 levels MT
        // 2) UTXO-Bus-Tree    - 26 levels MT
        // 3) UTXO-Ferry-Tree  - 6 + 26 = 32 levels MT (6 for 16 networks)
        // 4) Static-Tree
        forestMerkleRoot:
            BigInt(
                5481873231735763496906486873300326548492829360042714004477564093809633696439n,
            ),
        taxiMerkleRoot:
            BigInt(
                20775607673010627194014556968476266066927294572720319469184847051418138353016n,
            ),
        busMerkleRoot:
            BigInt(
                8163447297445169709687354538480474434591144168767135863541048304198280615192n,
            ),
        ferryMerkleRoot:
            BigInt(
                21443572485391568159800782191812935835534334817699172242223315142338162256601n,
            ),

        // salt
        salt: BigInt(98765n),
        saltHash:
            BigInt(
                1035379174490095295757364370441431315669465777987680425354976294595527119016n,
            ),

        // magical constraint - groth16 attack: https://geometry.xyz/notebook/groth16-malleability
        magicalConstraint: BigInt(123456789n),
    };

    it('should compute valid witness for non zero input tx', async () => {
        await wtns.calculate(
            nonZeroInputForZAccountRegistration,
            mainZAccountRegistrationWasm,
            mainZAccountRegistrationWitness,
            null,
        );
        console.log('Witness calculation successful!');
    });
});
